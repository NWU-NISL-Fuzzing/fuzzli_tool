




<!DOCTYPE html>
<html lang="zh" dir="ltr">
<head prefix="og: http://ogp.me/ns
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
  <script>(function(d) { d.className = d.className.replace(/\bno-js/, ''); })(document.documentElement);</script>
  <title>索引 - JavaScript | MDN</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="robots" content="index, follow">

  
<link rel="preload" href="/static/fonts/locales/ZillaSlab-Regular.subset.bbc33fb47cf6.woff2" as="font" type="font/woff2"
    crossorigin />
<link rel="preload" href="/static/fonts/locales/ZillaSlab-Bold.subset.e96c15f68c68.woff2" as="font" type="font/woff2"
    crossorigin />

  <link rel="home" href="/zh-CN/">
  <link rel="license" href="

  <link href="/static/build/styles/react-header.35f24f5aa50c.css" rel="stylesheet" type="text/css" />

<link href="/static/build/styles/react-mdn.0d64fea91b0c.css" rel="stylesheet" type="text/css" />

  <link href="/static/build/styles/prism.a6f275e5032b.css" rel="stylesheet" type="text/css" />

  

  
<script>
    // Mozilla DNT Helper
    /* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. */ if(typeof Mozilla==='undefined'){var Mozilla={}}Mozilla.dntEnabled=function(dnt,ua){'use strict';var dntStatus=dnt||navigator.doNotTrack||window.doNotTrack||navigator.msDoNotTrack;var userAgent=ua||navigator.userAgent;var anomalousWinVersions=['Windows NT 6.1','Windows NT 6.2','Windows NT 6.3'];var fxMatch=userAgent.match(/Firefox\/(\d+)/);var ieRegEx=/MSIE|Trident/i;var isIE=ieRegEx.test(userAgent);var platform=userAgent.match(/Windows.+?(?=;)/g);if(isIE&&typeof Array.prototype.indexOf!=='function'){return false}else if(fxMatch&&parseInt(fxMatch[1],10)<32){dntStatus='Unspecified'}else if(isIE&&platform&&anomalousWinVersions.indexOf(platform.toString())!==-1){dntStatus='Unspecified'}else{dntStatus={'0':'Disabled','1':'Enabled'}[dntStatus]||'Unspecified'}return dntStatus==='Enabled'?true:false};
    // only load GA if DNT is not enabled
    if (Mozilla && !Mozilla.dntEnabled()) {
        window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
        ga('create', 'UA-36116321-5', 'mozilla.org');
        ga('set', 'anonymizeIp', true);
    }
</script>
<script async src='https://www.google-analytics.com/analytics.js'></script>


  <script>
LUX=(function(){var a=("undefined"!==typeof(LUX)&&"undefined"!==typeof(LUX.gaMarks)?LUX.gaMarks:[]);var d=("undefined"!==typeof(LUX)&&"undefined"!==typeof(LUX.gaMeasures)?LUX.gaMeasures:[]);var j="LUX_start";var k=window.performance;var l=("undefined"!==typeof(LUX)&&LUX.ns?LUX.ns:(Date.now?Date.now():+(new Date())));if(k&&k.timing&&k.timing.navigationStart){l=k.timing.navigationStart}function f(){if(k&&k.now){return k.now()}var o=Date.now?Date.now():+(new Date());return o-l}function b(n){if(k){if(k.mark){return k.mark(n)}else{if(k.webkitMark){return k.webkitMark(n)}}}a.push({name:n,entryType:"mark",startTime:f(),duration:0});return}function m(p,t,n){if("undefined"===typeof(t)&&h(j)){t=j}if(k){if(k.measure){if(t){if(n){return k.measure(p,t,n)}else{return k.measure(p,t)}}else{return k.measure(p)}}else{if(k.webkitMeasure){return k.webkitMeasure(p,t,n)}}}var r=0,o=f();if(t){var s=h(t);if(s){r=s.startTime}else{if(k&&k.timing&&k.timing[t]){r=k.timing[t]-k.timing.navigationStart}else{return}}}if(n){var q=h(n);if(q){o=q.startTime}else{if(k&&k.timing&&k.timing[n]){o=k.timing[n]-k.timing.navigationStart}else{return}}}d.push({name:p,entryType:"measure",startTime:r,duration:(o-r)});return}function h(n){return c(n,g())}function c(p,o){for(i=o.length-1;i>=0;i--){var n=o[i];if(p===n.name){return n}}return undefined}function g(){if(k){if(k.getEntriesByType){return k.getEntriesByType("mark")}else{if(k.webkitGetEntriesByType){return k.webkitGetEntriesByType("mark")}}}return a}return{mark:b,measure:m,gaMarks:a,gaMeasures:d}})();LUX.ns=(Date.now?Date.now():+(new Date()));LUX.ac=[];LUX.cmd=function(a){LUX.ac.push(a)};LUX.init=function(){LUX.cmd(["init"])};LUX.send=function(){LUX.cmd(["send"])};LUX.addData=function(a,b){LUX.cmd(["addData",a,b])};LUX_ae=[];window.addEventListener("error",function(a){LUX_ae.push(a)});LUX_al=[];if("function"===typeof(PerformanceObserver)){var LongTaskObserver=new PerformanceObserver(function(c){var b=c.getEntries();for(var a=0;a<b.length;a++){var d=b[a];LUX_al.push(d)}});try{LongTaskObserver.observe({entryTypes:["longtask"],buffered:true})}catch(e){}};
</script>
<script src="https://cdn.speedcurve.com/js/lux.js?id=108906238" async defer crossorigin="anonymous"></script>


  <script>
  window.fetch || document.write('<script src="/static/build/js/fetch-polyfill.63fdc379c7eb.js"><\/script>');
</script>
<script>
  // Only include the fat polyfill for browsers that seem to not have
  // certain JS features. E.g. Firefox 38.
  Array.prototype.includes || document.write('<script src="/static/build/js/js-polyfill.6f2e22100487.js"><\/script>');
</script>

  <script async type="text/javascript" src="/static/build/js/perf.654b849a6fd9.js" charset="utf-8"></script>

  <!-- common social tags -->
  
  <meta property="og:type" content="website">
  <meta property="og:image" content="https://developer.mozilla.org/static/img/opengraph-logo.72382e605ce3.png">
  <meta property="og:site_name" content="MDN Web 文档">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:image" content="https://developer.mozilla.org/static/img/opengraph-logo.72382e605ce3.png">
  <meta name="twitter:site" content="@MozDevNet">
  <meta name="twitter:creator" content="@MozDevNet">
  <link rel="search" type="application/opensearchdescription+xml" href="https:

  <!-- third-generation iPad with high-resolution Retina display: -->
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/static/img/favicon144.e7e21ca263ca.png">
  <!-- iPhone with high-resolution Retina display: -->
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/static/img/favicon114.d526f38b09c5.png">
  <!-- first- and second-generation iPad: -->
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/static/img/favicon72.cc65d1d762a0.png">
  <!-- non-Retina iPhone, iPod Touch, and Android 2.1+ devices: -->
  <link rel="apple-touch-icon-precomposed" href="/static/img/favicon57.de33179910ae.png">
  <!-- basic favicon -->
  <link rel="shortcut icon" href="/static/img/favicon32.7f3da72dcea1.png">

  

  <link rel="preconnect" href="https://interactive-examples.mdn.mozilla.net" pr="0.75" />

  <link rel="canonical" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Index" >

  
  <link rel="alternate" hreflang="zh" href="https:
  
    <link rel="alternate" hreflang="en" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Index" title="Index">
  
    <link rel="alternate" hreflang="ar" href="https://developer.mozilla.org/ar/docs/Web/JavaScript/Index" title="Index">
  
    <link rel="alternate" hreflang="bn" href="https://developer.mozilla.org/bn/docs/Web/JavaScript/Index" title="Index">
  
    <link rel="alternate" hreflang="ca" href="https://developer.mozilla.org/ca/docs/Web/JavaScript/Index" title="Índex">
  
    <link rel="alternate" hreflang="de" href="https://developer.mozilla.org/de/docs/Web/JavaScript/Index" title="Index">
  
    <link rel="alternate" hreflang="es" href="https://developer.mozilla.org/es/docs/Web/JavaScript/%C3%8Dndice" title="Índice">
  
    <link rel="alternate" hreflang="fr" href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Index" title="Index">
  
    <link rel="alternate" hreflang="id" href="https://developer.mozilla.org/id/docs/Web/JavaScript/Index" title="Index">
  
    <link rel="alternate" hreflang="ja" href="https:
  
    <link rel="alternate" hreflang="ko" href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Index" title="색인">
  
    <link rel="alternate" hreflang="nl" href="https://developer.mozilla.org/nl/docs/Web/JavaScript/Index" title="JavaScript inhoudsopgave">
  
    <link rel="alternate" hreflang="pl" href="https://developer.mozilla.org/pl/docs/Web/JavaScript/Index" title="Index">
  
    <link rel="alternate" hreflang="pt" href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Index" title="Índice">
  
    <link rel="alternate" hreflang="ru" href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Index" title="Индекс">
  

  <!-- document-specific social tags -->
  <meta property="og:title" content="索引">
  <meta property="og:url" content="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Index">
  <meta name="twitter:url" content="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Index">
  <meta name="twitter:title" content="索引">
  
  <meta property="og:description" content="该页面列出了 MDN JavaScript 所有的页面及相关概览和标签。">
  <meta name="description" content="该页面列出了 MDN JavaScript 所有的页面及相关概览和标签。">
  <meta name="twitter:description" content="该页面列出了 MDN JavaScript 所有的页面及相关概览和标签。">
  

  
    <link href="/static/build/styles/print.ca192a439743.css" rel="stylesheet" type="text/css" media="print" />
  
</head>
<body>
  <script>
    // make sure global mdn object exists
    var mdn = window.mdn || {};

    (function(win) {
        'use strict';

        win.mdn.features = {};
        win.mdn.siteUrl = 'https://developer.mozilla.org';
        win.mdn.wikiSiteUrl = 'https://wiki.developer.mozilla.org';
        win.mdn.staticPath = '/static/';
        win.mdn.wiki = {
            autosuggestTitleUrl: '/zh-CN/docs/get-documents'
        };

        win.mdn.notifications = [];

        

        // interactive editor config
        win.mdn.interactiveEditor = {
            siteUrl: "https://developer.mozilla.org",
            editorUrl: "https://interactive-examples.mdn.mozilla.net"
        };
        win.mdn.langCookieName = "django_language";
        win.mdn.multiAuthEnabled = false;

    })(this);
</script>

  

  <div id="react-container" data-component-name="SPA"><div class="loading-bar loading-animation"></div><ul id="nav-access"><li><a id="skip-main" href="

<h2 id="MDN_JavaScript_pages">MDN JavaScript pages</h2>

<p>该页面列出了 MDN JavaScript 所有的页面及相关概览和标签。</p>

<p><strong>Found 818 pages:</strong></p>
<table class="fullwidth-table standard-table">
<thead>
    <tr><th>
    <th>Page</th>
    <th>Tags and summary</th>
</tr></thead>
<tbody>


<tr>
    <td rowspan="2">1</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript">JavaScript</a></td>
    <td><strong>JavaScript, Landing, Learn, priority</strong></td>
</tr>
<tr>
    <td>本部分将专注于 JavaScript 语言本身，而非局限于网页或其他限制环境。想要了解网页有关的 <a class="glossaryLink" href="/en-US/docs/Glossary/API" title="APIs: An API (Application Programming Interface) is a set of features and rules that exist inside a software program (the application) enabling interaction with it through software - as opposed to a human user interface. The API can be seen as a simple contract (the interface) between the application offering it and other items, such as third party software or hardware.">APIs</a> ，请参考 <a href="/zh-CN/docs/Web/API">Web APIs</a> 以及 <a href="/zh-CN/docs/Glossary/DOM">DOM</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">2</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Introduction_to_using_XPath_in_JavaScript">Introduction to using XPath in JavaScript</a></td>
    <td><strong>DOM, Extensions, Transforming_XML_with_XSLT, Web Development, XPath</strong></td>
</tr>
<tr>
    <td>该篇文档描述了如何在扩展和网站内部通过JavaScript调用 <a href="/zh-CN/XPath" title="zh-CN/XPath">XPath</a> 接口。 Mozilla 实现了相当多的 <a class="external" href="http:
</tr><tr>

</tr><tr>
    <td rowspan="2">3</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Shells">JavaScript shells编程环境</a></td>
    <td><strong>JavaScript, 工具, 扩展</strong></td>
</tr>
<tr>
    <td>JavaScript shell 可以让你在不刷新一个网页的情况下测试一段 <a href="/en-US/docs/Web/JavaScript">JavaScript</a> 代码。这在开发和调试代码的时候非常有帮助。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">4</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Differential_inheritance_in_JavaScript">JavaScript 中的差异化继承</a></td>
    <td><strong>Differential Inheritance, JavaScript</strong></td>
</tr>
<tr>
    <td>差异化继承是基于原型编程的一个常见模型，它讲的是大部分的对象是从其他更一般的对象中派生而来的的，只是在一些很小的地方进行了修改。每个对象维护一个指向它们的 <code>prototype</code> 的引用和一个差异化属性列表。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">5</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">JavaScript 中的相等性判断</a></td>
    <td><strong>JavaScr, 严格相等, 同值相等, 比较, 相等, 零值相等, 非严格相等</strong></td>
</tr>
<tr>
    <td>ES2015中有四种相等算法：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">6</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference">JavaScript 参考</a></td>
    <td><strong>ECMAScript, JS, JavaScript, 参考</strong></td>
</tr>
<tr>
    <td>本章介绍如何使用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Functions">JavaScript函数</a> 来开发应用程序。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">7</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Properties_Index">JavaScript 属性索引</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td><strong>No summary!</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">8</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Methods_Index">JavaScript 方法索引</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td>这篇文章按照字母顺序列出了MDN里边所有的JavaScript方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">9</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">JavaScript 标准内置对象</a></td>
    <td><strong>JavaScript, Reference, 参考, 总览</strong></td>
</tr>
<tr>
    <td>本章介绍和说明了 JavaScript 中所有的标准的内置对象、以及它们的方法和属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">10</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">Array</a></td>
    <td><strong>JavaScript, 二维数组, 全局对象, 参考手册, 数组</strong></td>
</tr>
<tr>
    <td>JavaScript的 <code><strong>Array</strong></code> 对象是用于构造数组的全局对象，数组是类似于列表的高阶对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">11</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from()</a></td>
    <td><strong>...rest, ...spread, Array, Array.from(), ECMAScript 2015, JavaScript, Reference, arguments, polyfill</strong></td>
</tr>
<tr>
    <td><code><strong>Array.from()</strong></code> 方法从一个类似数组或可迭代对象中创建一个新的，浅拷贝的数组实例。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">12</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">Array.isArray()</a></td>
    <td><strong>ECMAScript5, JavaScript, brush: js, class=, polyfill, 数组, 方法</strong></td>
</tr>
<tr>
    <td><strong>Array.isArray() </strong>用于确定传递的值是否是一个 <a href="/zh-CN/docs/Web/JavaScript/Reference/Array" title="REDIRECT Array"><code>Array</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">13</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/length">Array.length</a></td>
    <td><strong>JavaScript, 参考, 属性, 数组</strong></td>
</tr>
<tr>
    <td><code><strong>length</strong></code> 是<code>Array</code>的实例属性。返回或设置一个数组中的元素个数。该值是一个无符号 32-bit 整数，并且总是大于数组最高项的下标。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">14</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/observe">Array.observe()</a></td>
    <td><strong>JavaScript, 实验性, 数组, 方法, 过时的</strong></td>
</tr>
<tr>
    <td><strong>Array.observe()</strong> 方法用于异步监视数组发生的变化，类似于针对对象的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/observe" title="Object.observe() 方法用于异步地监视一个对象的修改。当对象属性被修改时，方法的回调函数会提供一个有序的修改流。然而，这个接口已经被废弃并从各浏览器中移除。你可以使用更通用的 Proxy 对象替代。"><code>Object.observe()</code></a> 。当数组的值发生变化时，它按发生顺序提供了一个变化流。与 <code>Object.observe()</code> 类似，它由如下可接受的变化类型列表<code>["add"、"update"、"delete"、"splice"]</code>触发。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">15</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of">Array.of()</a></td>
    <td><strong>Array, Array.of(), ECMAScript 2015, ES 6, JavaScript, polyfill, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>Array.of()</strong></code> 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">16</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype">Array.prototype</a></td>
    <td><strong>Array.prototype</strong></td>
</tr>
<tr>
    <td><strong><code>Array.prototype</code></strong>  属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Array" title="REDIRECT Array"><code>Array</code></a> 构造函数的原型，并允许您向所有Array对象添加新的属性和方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">17</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">Array.prototype.concat()</a></td>
    <td><strong>JavaScript, 原型, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>concat()</strong></code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">18</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin">Array.prototype.copyWithin()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, polyfill, 原型, 数组, 方法</strong></td>
</tr>
<tr>
    <td>The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone <a class="external" href="https://github.com/mdn/interactive-examples" rel="noopener">https://github.com/mdn/interactive-examples</a> and send us a pull request.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">19</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries">Array.prototype.entries()</a></td>
    <td><strong>Array.prototype.entries()</strong></td>
</tr>
<tr>
    <td><code><strong>entries()</strong></code> 方法返回一个新的<strong>Array Iterator</strong>对象，该对象包含数组中每个索引的键/值对。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">20</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every">Array.prototype.every()</a></td>
    <td><strong>ECMAScript 5, JavaScript, polyfill, 原型, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>every()</strong></code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">21</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">Array.prototype.fill()</a></td>
    <td><strong>Array, ECMAScript6, JavaScript, Method, polyfill</strong></td>
</tr>
<tr>
    <td><code><strong>fill()</strong></code> 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">22</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a></td>
    <td><strong>ECMAScript 5, JavaScript, Prototype, polyfill, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>filter()</strong></code> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">23</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find">Array.prototype.find()</a></td>
    <td><strong>ECMAScript6, JavaScript, polyfill, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>find()</strong></code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。"><code>undefined</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">24</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex">Array.prototype.findIndex()</a></td>
    <td><strong>Array, JavaScript, Method, Prototype</strong></td>
</tr>
<tr>
    <td><code><strong>findIndex()</strong></code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。否则返回-1。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">25</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">Array.prototype.flat()</a></td>
    <td><strong>JavaScript, 原型, 参考, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>flat()</strong></code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">26</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">Array.prototype.flatMap()</a></td>
    <td><strong>Array, JavaScript, Method, Prototype, Reference</strong></td>
</tr>
<tr>
    <td><code><strong>flatMap()</strong></code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">map</a> 和 深度值1的 <a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">flat</a> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">27</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">Array.prototype.forEach()</a></td>
    <td><strong>Array, ECMAScript5, JavaScript, forEach</strong></td>
</tr>
<tr>
    <td><code><strong>forEach()</strong></code> 方法对数组的每个元素执行一次提供的函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">28</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">Array.prototype.includes()</a></td>
    <td><strong>Array, ECMAScript 2016, JavaScript, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>includes()</strong></code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">29</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">Array.prototype.indexOf()</a></td>
    <td><strong>JavaScript, polyfill, 原型, 参考, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>indexOf()</strong></code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">30</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">Array.prototype.join()</a></td>
    <td><strong>Array, Array.prototype.join(), join(), separator</strong></td>
</tr>
<tr>
    <td><code><strong>join()</strong></code> 方法将一个数组（或一个<a class="new" href="/zh-CN//docs/Web/JavaScript/Guide/Indexed_collections
</tr><tr>

</tr><tr>
    <td rowspan="2">31</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys">Array.prototype.keys()</a></td>
    <td><strong>Array, ECMAScript 2015, Iterator, JavaScript, Method, Prototype</strong></td>
</tr>
<tr>
    <td><code><strong>keys() </strong></code>方法返回一个包含数组中每个索引键的<code><strong>Array Iterator</strong></code>对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">32</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf">Array.prototype.lastIndexOf()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>lastIndexOf()</strong></code> 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">33</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map()</a></td>
    <td><strong>Array, ECMAScript5, JavaScript, Method, Prototype, polyfill</strong></td>
</tr>
<tr>
    <td><code><strong>map()</strong></code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">34</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">Array.prototype.pop()</a></td>
    <td><strong>Array, Array.prototype.pop(), ES5, ES6, Prototype</strong></td>
</tr>
<tr>
    <td><code><strong>pop()</strong></code>方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">35</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array.prototype.push()</a></td>
    <td><strong>Array, Array.prototype.push(), JavaScript, Method, Prototype, 参考, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>push()</strong></code> 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">36</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">Array.prototype.reduce()</a></td>
    <td><strong>Array, ECMAScript 5, JavaScript, Method, Prototype, Reduce, Reference</strong></td>
</tr>
<tr>
    <td><code><strong>reduce()</strong></code> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">37</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight">Array.prototype.reduceRight()</a></td>
    <td><strong>Array.prototype.reduceRight()</strong></td>
</tr>
<tr>
    <td><code><strong>reduceRight()</strong></code> 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">38</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">Array.prototype.reverse()</a></td>
    <td><strong>Array, Array.prototype.reverse(), JavaScript, 原型, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>reverse()</strong></code> 方法将数组中元素的位置颠倒，并返回该数组。该方法会改变原数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">39</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift">Array.prototype.shift()</a></td>
    <td><strong>Array.prototype.shift(), JavaScript, 原型, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>shift()</strong></code> 方法从数组中删除<strong>第一个</strong>元素，并返回该元素的值。此方法更改数组的长度。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">40</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Array.prototype.slice()</a></td>
    <td><strong>Array, JavaScript, Prototype, 原型, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong title="切片">slice()</strong></code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">41</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some">Array.prototype.some()</a></td>
    <td><strong>Array, ECMAScript5, JavaScript, Method, Prototype, Reference</strong></td>
</tr>
<tr>
    <td><code><strong>some()</strong></code> 方法测试是否至少有一个元素可以通过被提供的函数方法。该方法返回一个Boolean类型的值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">42</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort()</a></td>
    <td><strong>Array, Array &amp; sort, JavaScript, Prototype, sort</strong></td>
</tr>
<tr>
    <td><code><strong>sort()</strong></code> 方法用<a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">43</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a></td>
    <td><strong>Array, JavaScript, 原型, 参考, 数组, 方法</strong></td>
</tr>
<tr>
    <td><strong><code>splice()</code></strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">44</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString">Array.prototype.toLocaleString()</a></td>
    <td><strong>Array, JavaScript, Method</strong></td>
</tr>
<tr>
    <td><code><strong>toLocaleString()</strong></code> 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 <code>toLocaleString</code> 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 ","）隔开。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">45</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource">Array.prototype.toSource()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>返回一个字符串,代表该数组的源代码.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">46</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString">Array.prototype.toString()</a></td>
    <td><strong>Array, JavaScript, Method</strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code> 返回一个字符串，表示指定的数组及其元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">47</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">Array.prototype.unshift()</a></td>
    <td><strong>Array, JavaScript, Method, 原型, 参考资料, 数组, 方法</strong></td>
</tr>
<tr>
    <td><strong><code>unshift()</code></strong> 方法将一个或多个元素添加到数组的<strong>开头</strong>，并返回该数组的<strong>新长度(该</strong>方法修改原有数组<strong>)</strong>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">48</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values">Array.prototype.values()</a></td>
    <td><strong>Array, Array.prototype.values(), Chrome 未实现, ECMAScript6, Iterator, JavaScript, Prototype, 数组, 方法, 迭代</strong></td>
</tr>
<tr>
    <td><strong><code>values()</code></strong> 方法返回一个新的 <strong><code>Array Iterator</code></strong> 对象，该对象包含数组每个索引的值</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">49</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator">Array.prototype[@@iterator]()</a></td>
    <td><strong>Array, ECMAScript 2015, Iterator, JavaScript, Method, Prototype</strong></td>
</tr>
<tr>
    <td><code>@@iterator</code> 属性和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values" title="values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值"><code>Array.prototype.values()</code></a> 属性的初始值均为同一个函数对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">50</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables">Array.prototype[@@unscopables]</a></td>
    <td><strong>Array, ECMAScript 2015, JavaScript, Property, Prototype</strong></td>
</tr>
<tr>
    <td>Symbol属性 @@unscopable 包含了所有 ES2015 (ES6) 中新定义的且并未被更早的 ECMAScript 标准收纳的属性名。这些属性并不包含在 <code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">51</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unobserve">Array.unobserve()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>Array<strong>.unobserve()方法用来移除</strong><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/observe" title='Array.observe() 方法用于异步监视数组发生的变化，类似于针对对象的 Object.observe() 。当数组的值发生变化时，它按发生顺序提供了一个变化流。与 Object.observe() 类似，它由如下可接受的变化类型列表["add"、"update"、"delete"、"splice"]触发。'><code>Array.observe()</code></a>设置的所有观察者。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">52</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species">get Array[@@species]</a></td>
    <td><strong>JavaScript, 原型, 数组, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>Array[@@species]</strong></code>访问器属性返回 <code>Array</code> 的构造函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">53</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">ArrayBuffer</a></td>
    <td><strong>ArrayBuffer, JavaScript, 构造函数, 类型数组</strong></td>
</tr>
<tr>
    <td>The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone <a class="external" href="https://github.com/mdn/interactive-examples" rel="noopener">https://github.com/mdn/interactive-examples</a> and send us a pull request.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">54</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView">ArrayBuffer.isView()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <code><strong>ArrayBuffer.isView()</strong></code> 方法当arg是一个ArrayBuffer的视图就返回true, 例如类型化数组对象(<a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">typed array objects</a> )或者 一个数据视图(a <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a>); <font face="Consolas, Liberation Mono, Courier, monospace">否则返回false</font>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">55</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/prototype">ArrayBuffer.prototype</a></td>
    <td><strong>ArrayBuffer</strong></td>
</tr>
<tr>
    <td><strong><code>ArrayBuffer.prototype</code></strong><code>属性表示</code><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https:
</tr><tr>

</tr><tr>
    <td rowspan="2">56</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength">ArrayBuffer.prototype.byteLength</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>byteLength</strong>访问器属性</code>表示一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https:
</tr><tr>

</tr><tr>
    <td rowspan="2">57</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice">ArrayBuffer.prototype.slice()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>slice()</strong></code>方法返回一个新的 <code>ArrayBuffer</code> ，它的内容是这个<code>ArrayBuffer的</code>字节副本，从begin（包括），到end（不包括）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">58</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer">ArrayBuffer.transfer()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态<code><strong>ArrayBuf</strong></code><strong>fer.transfer()</strong> 方法返回一个新的ArrayBuffer， 其内容取自oldBuffer的数据，并且根据 newByteLength 的大小来对数据进行截取或者以0扩展。 如果 newByteLength 未定义，则使用 oldBuffer 的byteLength。这个操作使得 oldBuffer 处于被移除的状态。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">59</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/@@species">get ArrayBuffer[@@species]</a></td>
    <td><strong>ArrayBuffer, JavaScript, TypedArrays, 属性</strong></td>
</tr>
<tr>
    <td>该 <code><strong>ArrayBuffer[@@species]</strong></code> 访问器属性会返回 <code>ArrayBuffer</code> 构造器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">60</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction">AsyncFunction</a></td>
    <td><strong>JavaScript, Reference, 实验性内容, 构造函数</strong></td>
</tr>
<tr>
    <td><code>AsyncFunction</code> 构造函数用来创建新的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" title="async function 声明用于定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。"><code>异步函数</code></a> 对象，JavaScript 中每个异步函数都是  <code>AsyncFunction</code> 的对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">61</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/prototype">AsyncFunction.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>AsyncFunction.prototype</strong></code> 属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction" title="AsyncFunction 构造函数用来创建新的 异步函数 对象，JavaScript 中每个异步函数都是  AsyncFunction 的对象。"><code>AsyncFunction</code></a> 的原型对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">62</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics">Atomics</a></td>
    <td><strong>JavaScript, 共享内存, 规范</strong></td>
</tr>
<tr>
    <td><strong><code>Atomics</code></strong> 对象提供了一组静态方法用来对 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer" title="SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。"><code>SharedArrayBuffer</code></a> 对象进行原子操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">63</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add">Atomics.add()</a></td>
    <td><strong>Atomics, JavaScript, Shared Memory, 共享内存, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>Atomics</strong></code><strong><code>.add()</code></strong> 静态方法会将给定的值加到数组里的某个特定位置上，并返回该位置的旧值。此原子操作保证在写上修改的值之前不会发生其他写操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">64</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and">Atomics.and()</a></td>
    <td><strong>Atomics, JavaScript, 共享内存, 实验性, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>Atomics</strong></code><strong><code>.and()</code></strong> 静态方法会将给定的值与数组上的值进行按位与操作，并将结果赋值给数组，然后返回数组该位置上的旧值。此原子操作保证在写上修改的值之前不会发生其他写操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">65</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange">Atomics.compareExchange()</a></td>
    <td><strong>Atomics, JavaScript, 共享内存, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>Atomics</strong></code><strong><code>.compareExchange()</code></strong> 静态方法会在数组的值与期望值相等的时候，将给定的替换值替换掉数组上的值，然后返回旧值。此原子操作保证在写上修改的值之前不会发生其他写操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">66</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange">Atomics.exchange()</a></td>
    <td><strong>Atmoics, Experimental, JavaScript, Method, 共享内存, 实验性</strong></td>
</tr>
<tr>
    <td><code><strong>Atomics</strong></code><strong><code>.exchange()</code></strong> 静态方法会用给定的值替换掉数组上的值，然后返回数组的旧值。此原子操作保证在写上修改的值之前不会发生其他写操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">67</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree">Atomics.isLockFree()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Atomics</strong></code><strong><code>.isLockFree()</code></strong> 用于校验是否能够使用原子操作的<code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">68</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load">Atomics.load()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Atomics</strong></code><strong><code>.load()</code></strong> 返回一个数组当中给定位置的值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">69</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify">Atomics.notify()</a></td>
    <td><strong>Atomics, JavaScript, Method, Shared Memory</strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Atomics</strong></code><strong><code>.notify()</code></strong> 提醒一些在等待队列中休眠的代理。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">70</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or">Atomics.or()</a></td>
    <td><strong>Atomics, JavaScript, Method, Shared Memory</strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Atomics</strong></code><strong><code>.or()</code></strong> 用数组中指定位置的值进行一次按位或运算，并返回未计算时数组中指定位置处的值。这个atomic操作保证了在修改后的值被写回之前没有其它的写入操作发生。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">71</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store">Atomics.store()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态的Atomics.store（）方法将给定的值存储在数组中的指定位置，并返回该值。.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">72</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait">Atomics.wait()</a></td>
    <td><strong>Atomics, JavaScript, Method, Shared Memory</strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Atomics</strong></code><strong><code>.wait()</code></strong> 确保了一个在 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int32Array" title="该 Int32Array 类型表示在平台顺序字节中一个双补码32位有符号的整型数组。如果需要控制字节顺序，请改用DataView 。此内容的初始化为0。一旦创建，你可以使用对象的方法或者标准数组索引的语法(即使用括号表示法)。"><code>Int32Array</code></a> 数组中给定位置的值没有发生变化、仍然是给定的值时进程将会睡眠，直到被唤醒或超时。该方法返回一个字符串，值为<code>"ok"</code>, <code>"not-equal"</code>, 或 <code>"timed-out"</code> 之一。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">73</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>BigInt</code></strong> 是一种内置对象，可以表示大于 2<sup>53</sup> 的整数。而在Javascript中，<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" title="JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。Number 对象由 Number() 构造器创建。"><code>Number</code></a> 基本类型可以精确表示的最大整数是 2<sup>53</sup>。<strong><code>BigInt</code></strong> 可以表示任意大的整数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">74</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array">BigInt64Array</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>content here.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">75</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array">BigUint64Array</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>BigUint64Array</code></strong> 类型数组表示一个平台字节顺序的64位无符号整型数组。如果想要控制字符顺序，请使用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a> 替代。内容初始化为 <code>0n</code>. 创建之后可以使用对象中的方法或使用标准数组索引语法(括号表示法)来获取数组中的元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">76</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean">Boolean</a></td>
    <td><strong>Boolean, Constructor, JavaScript</strong></td>
</tr>
<tr>
    <td><strong><code>Boolean</code></strong>对象是一个布尔值的对象包装器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">77</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean/prototype">Boolean.prototype</a></td>
    <td><strong>Boolean, JavaScript, Property, Prototype</strong></td>
</tr>
<tr>
    <td><strong><code>Boolean.prototype</code></strong> 属性表示<a href="/zh-CN/docs/Web/JavaScript/Reference/Boolean" title="此页面仍未被本地化, 期待您的翻译!"><code>Boolean</code></a> 构造函数的原型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">78</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toSource">Boolean.prototype.toSource()</a></td>
    <td><strong>JavaScript, Method, Prototype, 布尔</strong></td>
</tr>
<tr>
    <td><span class="short_text" id="result_box" lang="zh-CN"><span>toSource（）方法返回一个表示对象的源码的字符串。</span></span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">79</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString">Boolean.prototype.toString()</a></td>
    <td><strong>Boolean, JavaScript, Method, Prototype</strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code> 方法返回指定的布尔对象的字符串形式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">80</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf">Boolean.prototype.valueOf()</a></td>
    <td><strong>Boolean, JavaScript, Method, Prototype</strong></td>
</tr>
<tr>
    <td><code><strong>valueOf()</strong></code> 方法返回一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Boolean" title="此页面仍未被本地化, 期待您的翻译!"><code>Boolean</code></a>对象的原始值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">81</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView">DataView</a></td>
    <td><strong>DataView, JavaScript, TypedArrays, 构造器</strong></td>
</tr>
<tr>
    <td><strong><code>DataView</code></strong> 视图是一个可以从 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https:
</tr><tr>

</tr><tr>
    <td rowspan="2">82</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/prototype">DataView.prototype</a></td>
    <td><strong>DataView属性</strong></td>
</tr>
<tr>
    <td><code><strong>DataView</strong></code><strong><code>.prototype</code></strong> 表示<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a>的原型</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">83</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer">DataView.prototype.buffer</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>buffer</code></strong> 属性描述了在构造时被 DataView 引用的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request."><code>ArrayBuffer</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">84</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength">DataView.prototype.byteLength</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>byteLength</code></strong> 属性描述了视图从它的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https:
</tr><tr>

</tr><tr>
    <td rowspan="2">85</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset">DataView.prototype.byteOffset</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>byteOffset</code></strong> 属性描述了从 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https:
</tr><tr>

</tr><tr>
    <td rowspan="2">86</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32">DataView.prototype.getFloat32()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getFloat32()</code></strong><code>方法</code><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">87</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64">DataView.prototype.getFloat64()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getFloat64()</code></strong><code>方法</code><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">88</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16">DataView.prototype.getInt16()</a></td>
    <td><strong>类型化, 类型化数组</strong></td>
</tr>
<tr>
    <td><strong><code>getInt16()</code></strong><code>方法</code><code>从</code><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a>相对于起始位置偏移 n 个字节处开始，获取一个16-bit数(短整型，2个字节).</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">89</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32">DataView.prototype.getInt32()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getInt32()</code></strong><code>方法</code><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">90</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8">DataView.prototype.getInt8()</a></td>
    <td><strong>类型化, 类型化数组</strong></td>
</tr>
<tr>
    <td><strong><code>getInt8()</code></strong><code>方法</code><code>从</code><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a>相对于起始位置偏移 n 个字节处开始，获取一个有符号的 8-bit 整数(一个字节)。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">91</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16">DataView.prototype.getUint16()</a></td>
    <td><strong>类型化, 类型化数组</strong></td>
</tr>
<tr>
    <td><strong><code>getUint16()</code></strong><code>方法</code><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">92</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32">DataView.prototype.getUint32()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUint32()</code></strong><code>方法</code><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">93</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8">DataView.prototype.getUint8()</a></td>
    <td><strong>类型化, 类型化数组</strong></td>
</tr>
<tr>
    <td><strong><code>getUint8()</code></strong><code>方法</code><code>从</code><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a>相对于起始位置偏移 n 个字节处开始，获取一个无符号的8-bit整数(一个字节).</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">94</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32">DataView.prototype.setFloat32()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setFloat32()</code></strong><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">95</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64">DataView.prototype.setFloat64()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setFloat64()</code></strong><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">96</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16">DataView.prototype.setInt16()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setInt16()</code></strong><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">97</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32">DataView.prototype.setInt32()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setInt32()</code></strong><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">98</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8">DataView.prototype.setInt8()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setInt8()</code></strong><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">99</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16">DataView.prototype.setUint16()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setUint16()</code></strong><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">100</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32">DataView.prototype.setUint32()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setUint32()</code></strong><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">101</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8">DataView.prototype.setUint8()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setUint8()</code></strong><code>从</code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">102</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64">getBigInt64()</a></td>
    <td><strong>DataView, JavaScript, Prototype, getBigInt64(), 大整型</strong></td>
</tr>
<tr>
    <td><strong><code>getBigInt64()</code></strong> 方法从 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a>开始获取一个指定偏移量的带符号64位整数 (long long) 。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">103</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</a></td>
    <td><strong>Date, JavaScript, 日期, 时间</strong></td>
</tr>
<tr>
    <td>创建一个 JavaScript <code>Date</code> 实例，该实例呈现时间中的某个时刻。<code>Date</code> 对象则基于 <a class="external" href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html
</tr><tr>

</tr><tr>
    <td rowspan="2">104</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC">Date.UTC()</a></td>
    <td><strong>Date, JavaScript, Method</strong></td>
</tr>
<tr>
    <td><code><strong>Date.UTC()</strong></code> 方法接受的参数同日期构造函数接受最多参数时一样，返回从1970-1-1 00:00:00 UTC到指定日期的的毫秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">105</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/now">Date.now()</a></td>
    <td><strong>Date, JavaScript, Method</strong></td>
</tr>
<tr>
    <td><strong><code>Date.now()</code></strong> 方法返回自1970年1月1日 00:00:00 UTC到当前时间的毫秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">106</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/parse">Date.parse()</a></td>
    <td><strong>Date, JavaScript, Method, Reference</strong></td>
</tr>
<tr>
    <td><code><strong>Date.parse()</strong></code> 方法解析一个表示某个日期的字符串，并返回从1970-1-1 00:00:00 UTC 到该日期对象（该日期对象的UTC时间）的毫秒数，如果该字符串无法识别，或者一些情况下，包含了不合法的日期数值（如：2015-02-31），则返回值为NaN。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">107</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype">Date.prototype</a></td>
    <td><strong>Date, JavaScript, Property</strong></td>
</tr>
<tr>
    <td><strong><code>Date.prototype</code></strong> 属性表示<a href="/zh-CN/docs/Web/JavaScript/Reference/Date" title="此页面仍未被本地化, 期待您的翻译!"><code>Date</code></a>构造函数的原型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">108</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate">Date.prototype.getDate()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>根据本地时间，返回一个指定的日期对象为一个月中的哪一日（从1--31）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">109</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay">Date.prototype.getDay()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getDay()</code></strong> 方法根据本地时间，返回一个具体日期中一周的第几天，0 表示星期天。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">110</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear">Date.prototype.getFullYear()</a></td>
    <td><strong>Date, JavaScript, Method, Prototype, Reference</strong></td>
</tr>
<tr>
    <td><strong><code>getFullYear()</code></strong> 方法根据本地时间返回指定日期的年份。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">111</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours">Date.prototype.getHours()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getHours()</code></strong> 方法根据本地时间，返回一个指定的日期对象的小时。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">112</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds">Date.prototype.getMilliseconds()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>getMilliseconds() 方法，根据本地时间，返回一个指定的日期对象的毫秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">113</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes">Date.prototype.getMinutes()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getMinutes()</code></strong> 方法根据本地时间，返回一个指定的日期对象的分钟数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">114</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth">Date.prototype.getMonth()</a></td>
    <td><strong>Date, JavaScript, Prototype, 原型, 参考, 方法</strong></td>
</tr>
<tr>
    <td>根据本地时间，返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">115</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds">Date.prototype.getSeconds()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getSeconds()</code></strong> 方法根据本地时间，返回一个指定的日期对象的秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">116</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime">Date.prototype.getTime()</a></td>
    <td><strong>Date, JavaScript, 原型, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>getTime()</strong></code> 方法返回一个时间的格林威治时间数值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">117</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset">Date.prototype.getTimezoneOffset()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>getTimezoneOffset()</strong></code> 方法返回协调世界时（UTC）相对于当前时区的时间差值，单位为分钟。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">118</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate">Date.prototype.getUTCDate()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUTCDate()</code></strong> 方法以世界时为标准，返回一个指定的日期对象为一个月中的第几天</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">119</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay">Date.prototype.getUTCDay()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUTCDay()</code></strong> 方法以世界时为标准，返回一个指定的日期对象为一星期中的第几天，其中 0 代表星期天。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">120</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear">Date.prototype.getUTCFullYear()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUTCFullYear()</code></strong> 以世界时为标准，返回一个指定的日期对象的年份。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">121</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours">Date.prototype.getUTCHours()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUTCHours()</code></strong> 方法以世界时为标准，返回一个指定的日期对象的小时数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">122</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds">Date.prototype.getUTCMilliseconds()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUTCMilliseconds()</code></strong> 方法以世界时为标准，返回一个指定的日期对象的毫秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">123</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes">Date.prototype.getUTCMinutes()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUTCMinutes()</code></strong> 方法以世界时为标准，返回一个指定的日期对象的分钟数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">124</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth">Date.prototype.getUTCMonth()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUTCMonth()</code></strong> 方法以世界时为标准，返回一个指定的日期对象的月份，它是从 0 开始计数的（0 代表一年的第一个月）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">125</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds">Date.prototype.getUTCSeconds()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>getUTCSeconds()</code></strong> 方法以世界时为标准，返回一个指定的日期对象的秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">126</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear">Date.prototype.getYear()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>getYear() 方法返回指定的本地日期的年份。因为 <code>getYear</code> 不返回千禧年[full years] ("year 2000 problem")，所以这个方法不再被使用，现在替换为 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear" title="getFullYear() 方法根据本地时间返回指定日期的年份。"><code>getFullYear</code></a> .</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">127</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate">Date.prototype.setDate()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>setDate()</strong></code> 方法根据本地时间来指定一个日期对象的天数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">128</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear">Date.prototype.setFullYear()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>setFullYear()</strong></code> 方法根据本地时间为一个日期对象设置年份。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">129</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours">Date.prototype.setHours()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>setHours()</strong></code> 方法根据本地时间为一个日期对象设置小时数，返回从1970-01-01 00:00:00 UTC 到更新后的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" title="创建一个 JavaScript Date 实例，该实例呈现时间中的某个时刻。Date 对象则基于 Unix Time Stamp，即自1970年1月1日（UTC）起经过的毫秒数。"><code>日期</code></a> 对象实例所表示时间的毫秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">130</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds">Date.prototype.setMilliseconds()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>setMilliseconds()</strong></code> 方法会根据本地时间设置一个日期对象的豪秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">131</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes">Date.prototype.setMinutes()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>setMinutes()</strong></code> 方法根据本地时间为一个日期对象设置分钟数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">132</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth">Date.prototype.setMonth()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>setMonth()</strong></code> 方法根据本地时间为一个设置年份的日期对象设置月份。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">133</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds">Date.prototype.setSeconds()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>setSeconds()</strong></code> 方法根据本地时间设置一个日期对象的秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">134</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime">Date.prototype.setTime()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>setTime()</strong></code> 方法以一个表示从1970-1-1 00:00:00 UTC计时的毫秒数为来为 <code>Date</code> 对象设置时间。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">135</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate">Date.prototype.setUTCDate()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setUTCDate()</code></strong> 方法就是根据全球时间设置特定date对象的日期。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">136</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear">Date.prototype.setUTCFullYear()</a></td>
    <td><strong>Date, JavaScript, Method, Prototype, Reference</strong></td>
</tr>
<tr>
    <td><strong><code>setUTCFullYear()</code></strong> 方法根据世界标准时间为一个具体日期设置年份。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">137</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours">Date.prototype.setUTCHours()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <strong><code>setUTCHours()</code></strong> method sets the hour for a specified date according to universal time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated <a href="/zh-CN/docs/Web/JavaScript/Reference/Date" title="此页面仍未被本地化, 期待您的翻译!"><code>Date</code></a> instance.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">138</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds">Date.prototype.setUTCMilliseconds()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setUTCMilliseconds()</code></strong> 方法会根据世界时来设置指定时间的毫秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">139</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes">Date.prototype.setUTCMinutes()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setUTCMinutes()</code></strong>方法会根据世界协调时（UTC）来设置指定日期的分钟数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">140</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth">Date.prototype.setUTCMonth()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>setUTCMonth()方法根据通用的时间来设置一个准确的月份</code></strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">141</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds">Date.prototype.setUTCSeconds()</a></td>
    <td><strong>日期</strong></td>
</tr>
<tr>
    <td><code><font face="Open Sans, Arial, sans-serif">此 </font><strong>setUTCSeconds()</strong></code> 方法为一个依据国际通用时间的特定日期设置秒数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">142</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear">Date.prototype.setYear()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <code><strong>setYear()</strong></code> method sets the year for a specified date according to local time. Because <code>setYear</code> does not set full years ("year 2000 problem"), it is no longer used and has been replaced by the <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear" title="setFullYear() 方法根据本地时间为一个日期对象设置年份。"><code>setFullYear</code></a> method.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">143</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString">Date.prototype.toDateString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toDateString()</strong></code> 方法以美式英语和人类易读的形式返回一个日期对象日期部分的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">144</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString">Date.prototype.toGMTString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <code><strong>toGMTString()</strong></code> method converts a date to a string, using Internet GMT conventions. The exact format of the value returned by <code>toGMTString</code> varies according to the platform and browser, in general it should represent a human readable date string.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">145</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString">Date.prototype.toISOString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toISOString()</strong></code> 方法返回一个 ISO（<a class="external" href="http:
</tr><tr>

</tr><tr>
    <td rowspan="2">146</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON">Date.prototype.toJSON()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>toJSON()</code></strong> 方法返回 <a href="/zh-CN/docs/Web/JavaScript/Reference/Date" title="此页面仍未被本地化, 期待您的翻译!"><code>Date</code></a> 对象的字符串形式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">147</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString">Date.prototype.toLocaleDateString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toLocaleDateString()</strong></code> 方法返回该日期对象日期部分的字符串，该字符串格式因不同语言而不同。新增的参数 <code>locales</code> 和 <code>options</code> 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， <code>locales</code> 和 <code>options</code> 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">148</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat">Date.prototype.toLocaleFormat()</a></td>
    <td><strong>Date, 非标准</strong></td>
</tr>
<tr>
    <td>非标准方法 <strong><code>toLocaleFormat()</code></strong> 按特定的格式将一个日期转换成一个字符串。 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" title="交互示例的源代码存储在 GitHub 资源库。如果你愿意分布交互示例，请复制https:
</tr><tr>

</tr><tr>
    <td rowspan="2">149</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString">Date.prototype.toLocaleString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toLocaleString()</strong></code> <span style="line-height: 1.5;">方法返回该日期对象的字符串，该字符串格式因不同语言而不同。新增的参数 </span><code style="font-style: normal; line-height: 1.5;">locales</code><span style="line-height: 1.5;"> 和 </span><code style="font-style: normal; line-height: 1.5;">options</code><span style="line-height: 1.5;"> 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， </span><code style="font-style: normal; line-height: 1.5;">locales</code><span style="line-height: 1.5;"> 和 </span><code style="font-style: normal; line-height: 1.5;">options</code><span style="line-height: 1.5;"> 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。</span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">150</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString">Date.prototype.toLocaleTimeString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <code><strong>toLocaleTimeString()</strong></code> <span style="line-height: 1.5;">方法返回该日期对象时间部分的字符串，该字符串格式因不同语言而不同。新增的参数 </span><code style="font-style: normal; line-height: 1.5;">locales</code><span style="line-height: 1.5;"> 和 </span><code style="font-style: normal; line-height: 1.5;">options</code><span style="line-height: 1.5;"> 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， </span><code style="font-style: normal; line-height: 1.5;">locales</code><span style="line-height: 1.5;"> 和 </span><code style="font-style: normal; line-height: 1.5;">options</code><span style="line-height: 1.5;"> 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。</span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">151</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource">Date.prototype.toSource()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>toSource() </code></strong>返回表示源代码的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">152</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toString">Date.prototype.toString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code> 方法返回一个字符串，表示该<a href="/zh-CN/docs/Web/JavaScript/Reference/Date" title="此页面仍未被本地化, 期待您的翻译!"><code>Date</code></a>对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">153</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString">Date.prototype.toTimeString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toTimeString()</strong></code> 方法以人类易读形式返回一个日期对象时间部分的字符串，该字符串以美式英语格式化。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">154</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString">Date.prototype.toUTCString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toUTCString()</strong></code> 方法把一个日期转换为一个字符串，使用UTC时区。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">155</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf">Date.prototype.valueOf()</a></td>
    <td><strong>Date, JavaScript, 原型, 参考, 方法, 日期</strong></td>
</tr>
<tr>
    <td><code><strong>valueOf()</strong></code> 方法返回一个 <a href="/zh-CN/docs/Web/JavaScript/Reference/Date" title="此页面仍未被本地化, 期待您的翻译!"><code>Date</code></a> 对象的原始值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">156</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive">Date.prototype[@@toPrimitive]</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>[@@toPrimitive]()</strong></code> 方法可以转换一个 <code>Date</code> 对象到一个原始值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">157</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error">Error</a></td>
    <td><strong>Error, Whoops!, 参考</strong></td>
</tr>
<tr>
    <td><span style="line-height: inherit;">通过<strong>Error</strong>的构造器可以创建一个错误对象。当运行时错误产生时，Error的实例对象会被抛出。Error对象</span>也<span style="line-height: inherit;">可用于用户自定义的异常的基础对象。下面列出了各种内建的标准错误类型。</span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">158</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype">Error.prototype</a></td>
    <td><strong>Error, JavaScript, Property, 参考, 属性</strong></td>
</tr>
<tr>
    <td>所有 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error" title="通过Error的构造器可以创建一个错误对象。当运行时错误产生时，Error的实例对象会被抛出。Error对象也可用于用户自定义的异常的基础对象。下面列出了各种内建的标准错误类型。"><code>Error</code></a> 与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error
</tr><tr>

</tr><tr>
    <td rowspan="2">159</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber">Error.prototype.columnNumber</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>columnNumber</strong></code>属性包含引发此错误的文件行中的列号。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">160</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName">Error.prototype.fileName</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>fileName</strong></code> 属性包含引发此错误的文件的路径.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">161</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber">Error.prototype.lineNumber</a></td>
    <td><strong>JavaScript, 属性, 错误</strong></td>
</tr>
<tr>
    <td><code><strong>lineNumber</strong></code> 属性的值为抛出错误的代码在其源文件中所在的行号。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">162</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/message">Error.prototype.message</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>message</strong></code> 属性是有关错误信息，人类易读的（human-readable）描述。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">163</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/name">Error.prototype.name</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code style="font-style: normal; line-height: 19.0909080505371px;"><strong>name</strong></code><span style="line-height: 19.0909080505371px;"> </span>属性表示error类型的名称.初始值为"Error".</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">164</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack">Error.prototype.stack</a></td>
    <td><strong>JavaScript, 原型, 参考, 属性, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error" title="通过Error的构造器可以创建一个错误对象。当运行时错误产生时，Error的实例对象会被抛出。Error对象也可用于用户自定义的异常的基础对象。下面列出了各种内建的标准错误类型。"><code>Error</code></a>对象作为一个非标准的栈属性提供了一种函数追踪方式。无论这个函数被被调用，处于什么模式，来自于哪一行或者哪个文件，有着什么样的参数。这个栈产生于最近一次调用最早的那次调用，返回原始的全局作用域调用</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">165</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/toSource">Error.prototype.toSource()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toSource()</strong></code> 方法返回可以计算出到相同错误的代码。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">166</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/toString">Error.prototype.toString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code> 方法返回一个指定的错误对象（Error object）的字符串表示。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">167</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError">EvalError</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>本对象代表了一个关于 <a href="/en/Core_JavaScript_1.5_Reference/Global_Functions/eval" title="en/Core_JavaScript_1.5_Reference/Global_Functions/eval">eval</a> 函数的错误.此异常不再会被JavaScript抛出，但是EvalError对象仍然保持兼容性.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">168</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError/prototype">EvalError.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>EvalError.prototype</strong></code> 属性是 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError" title="本对象代表了一个关于 eval 函数的错误.此异常不再会被JavaScript抛出，但是EvalError对象仍然保持兼容性."><code>EvalError</code></a> 原型构造函数.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">169</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float32Array">Float32Array</a></td>
    <td><strong>JavaScript, TypeArray, TypeArrays, 构造函数</strong></td>
</tr>
<tr>
    <td><strong><code>Float32Array</code></strong> 类型数组代表的是平台字节顺序为32位的浮点数型数组(对应于 C 浮点数据类型) 。 如果需要控制字节顺序， 使用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，在读写时不用考虑平台字节序问题。"><code>DataView</code></a> 替代。其内容初始化为<code>0</code>。一旦建立起来，你可以使用这个对象的方法对其元素进行操作，或者使用标准数组索引语法 (使用方括号)。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">170</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float64Array">Float64Array</a></td>
    <td><strong>JavaScript, TypeArray, TypeArrays, 构造函数</strong></td>
</tr>
<tr>
    <td><strong><code>Float64Array</code></strong> 类型数组代表的是平台字节顺序为64位的浮点数型数组(对应于 C 浮点数据类型) 。 如果需要控制字节顺序， 使用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，在读写时不用考虑平台字节序问题。"><code>DataView</code></a> 替代。其内容初始化为<code>0</code>。一旦建立起来，你可以使用这个对象的方法对其元素进行操作，或者使用标准数组索引语法 (使用方括号)。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">171</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">Function</a></td>
    <td><strong>CSP, Constructor, Function, JavaScript, 函数, 构造器</strong></td>
</tr>
<tr>
    <td><strong><code>Function</code> 构造函数</strong> 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个<code>Function对象。</code></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">172</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments">Function.arguments</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong><em>function</em>.arguments</strong></code> 属性代表传入函数的实参，它是一个类数组对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">173</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arity">Function.arity</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>返回一个函数的形参数量.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">174</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/caller">Function.caller</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>返回调用指定函数的函数.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">175</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName">Function.displayName</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>function.displayName</code></strong> 属性获取函数的显示名称</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">176</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length">Function.length</a></td>
    <td><strong>Function, JavaScript, Property</strong></td>
</tr>
<tr>
    <td><code><strong>length</strong></code> 属性指明函数的形参个数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">177</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/name">Function.name</a></td>
    <td><strong>ECMAScript 2015, Function, JavaScript, Property</strong></td>
</tr>
<tr>
    <td><code>name</code> 属性返回一个函数声明的名称。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">178</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype">Function.prototype</a></td>
    <td><strong>JavaScript, 函数, 原型, 原型属性</strong></td>
</tr>
<tr>
    <td><code><strong>Function.prototype</strong></code> 属性存储了 <a href="/zh-CN/docs/Web/JavaScript/Reference/Function" title="此页面仍未被本地化, 期待您的翻译!"><code>Function</code></a> 的原型对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">179</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply()</a></td>
    <td><strong>Function, JavaScript, Method</strong></td>
</tr>
<tr>
    <td><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或<a href="/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections
</tr><tr>

</tr><tr>
    <td rowspan="2">180</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind()</a></td>
    <td><strong>Class, ECMAScript 2015, ECMAScript 5, Function, JavaScript, Method, bind, polyfill</strong></td>
</tr>
<tr>
    <td><code><strong><span style="font-family: courier new,andale mono,monospace; line-height: 1.5;">bind()</span></strong></code>方法创建一个新的函数，在<code><strong><span style="font-family: courier new,andale mono,monospace; line-height: 1.5;">bind()</span></strong></code>被调用时，这个新函数的<code>this</code>被bind的第一个参数指定，其余的参数将作为新函数的参数供调用时使用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">181</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call()</a></td>
    <td><strong>JavaScript, 函数, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>call()</strong></code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">182</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator">Function.prototype.isGenerator()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>判断一个函数是否是一个<a href="/zh-cn/JavaScript/Guide/Iterators_and_Generators
</tr><tr>

</tr><tr>
    <td rowspan="2">183</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource">Function.prototype.toSource()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>返回函数的源代码的字符串表示.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">184</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/toString">Function.prototype.toString()</a></td>
    <td><strong>Function, JavaScript, Method</strong></td>
</tr>
<tr>
    <td><strong><code>toString()</code> </strong>方法返回一个表示当前函数源代码的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">185</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator">Generator</a></td>
    <td><strong>ECMAScript 2015, Generator, JavaScript, Legacy Generator, Legacy Iterator, 参考, 生成器</strong></td>
</tr>
<tr>
    <td><strong>生成器</strong>对象是由一个 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/function*" title="function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。">generator function</a> 返回的,并且它符合<a href="/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols
</tr><tr>

</tr><tr>
    <td rowspan="2">186</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator/next">Generator.prototype.next()</a></td>
    <td><strong>ECMAScript 2015, Generator, JavaScript, 原型, 参考, 方法, 生成器</strong></td>
</tr>
<tr>
    <td><code><strong>next</strong></code><strong><code>()</code></strong> 方法返回一个包含属性 <code>done</code> 和 <code>value</code> 的对象。该方法也可以通过接受一个参数用以向生成器传值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">187</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator/return">Generator.prototype.return()</a></td>
    <td><strong>ECMAScript6, JavaScript, 原型, 参考, 方法, 生成器</strong></td>
</tr>
<tr>
    <td><code><strong>return</strong></code><strong><code>()</code></strong> 方法返回给定的值并结束生成器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">188</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw">Generator.prototype.throw()</a></td>
    <td><strong>ECMAScript6, JavaScript, 参考, 属性, 方法, 生成器</strong></td>
</tr>
<tr>
    <td><code><strong>throw</strong></code><strong><code>()</code></strong> 方法用来向生成器抛出异常，并恢复生成器的执行，返回带有 <code>done</code> 及 <code>value</code> 两个属性的对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">189</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction">GeneratorFunction</a></td>
    <td><strong>Constructor, ECMAScript 2015, GeneratorFunction, Iterator, JavaScript, Reference</strong></td>
</tr>
<tr>
    <td><strong><code>GeneratorFunction</code>构造器</strong>生成新的<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/function*" title="function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。"><code>生成器函数</code></a> 对象。在JavaScript中，生成器函数实际上都是<code>GeneratorFunction</code>的实例对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">190</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype">GeneratorFunction.prototype</a></td>
    <td><strong>ECMAScript 2015, GeneratorFunction, Iterator, JavaScript, Property, Prototype, Reference</strong></td>
</tr>
<tr>
    <td><code><strong>GeneratorFunction.prototype</strong></code>属性是<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction" title="GeneratorFunction构造器生成新的生成器函数 对象。在JavaScript中，生成器函数实际上都是GeneratorFunction的实例对象。"><code>GeneratorFunction</code></a>的原型对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">191</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity">Infinity</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td>全局属性 <code><strong>Infinity</strong></code> 是一个数值，表示无穷大。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">192</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int16Array">Int16Array</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <strong><code>Int16Array</code></strong> typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，在读写时不用考虑平台字节序问题。"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">193</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int32Array">Int32Array</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>该 <strong><code>Int32Array</code></strong> 类型表示在平台顺序字节中一个双补码32位有符号的整型数组。如果需要控制字节顺序，请改用<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a> 。此内容的初始化为<code>0</code>。一旦创建，你可以使用对象的方法或者标准数组索引的语法(即使用括号表示法)。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">194</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int8Array">Int8Array</a></td>
    <td><strong>Int8Array, 构造器, 特定类型数组</strong></td>
</tr>
<tr>
    <td><strong><code>Int8Array</code></strong> 类型数组表示二进制补码8位有符号整数的数组。内容初始化为0。 一旦建立，你可以使用对象的方法引用数组中的元素，或使用标准数组索引语法( 即，使用括号注释)。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">195</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError">InternalError</a></td>
    <td><strong>InternalError, 内部错误</strong></td>
</tr>
<tr>
    <td><strong><code>InternalError</code> 对象</strong>表示出现在JavaScript引擎内部的错误。 例如： <strong>"InternalError</strong>: too much recursion"（内部错误：递归过深）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">196</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl">Intl</a></td>
    <td><strong>JavaScript, 国际化</strong></td>
</tr>
<tr>
    <td><strong><code>Intl</code></strong> 对象是 ECMAScript 国际化 API 的一个命名空间，它提供了精确的字符串对比、数字格式化，和日期时间格式化。<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Collator" title="Intl.Collator 是用于语言敏感字符串比较的 collators构造函数。"><code>Collator</code></a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat" title="Intl.NumberFormat是对语言敏感的格式化数字类的构造器类"><code>NumberFormat</code></a> 和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" title="交互示例的源代码存储在 GitHub 资源库。如果你愿意分布交互示例，请复制https:
</tr><tr>

</tr><tr>
    <td rowspan="2">197</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales">Intl.getCanonicalLocales()</a></td>
    <td><strong>区域语言代码, 去重</strong></td>
</tr>
<tr>
    <td><strong><code>Intl.getCanonicalLocales()</code></strong> 方法返回一个数组，数组包含规范的区域语言代码，重复的元素将会被去除，每一个元素都会被验证为格式有效的区域语言代码。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">198</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Collator">Intl.Collator</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Intl.Collator<font face="Open Sans, Arial, sans-serif"> </font></code></strong><code>是用于语言敏感字符串比较的 collators构造函数。</code></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">199</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">Intl.DateTimeFormat</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>交互示例的源代码存储在 GitHub 资源库。如果你愿意分布交互示例，请复制<a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">200</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/prototype">Intl.DateTimeFormat.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Intl.DateTimeFormat.prototype</code></strong>表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" title="交互示例的源代码存储在 GitHub 资源库。如果你愿意分布交互示例，请复制https:
</tr><tr>

</tr><tr>
    <td rowspan="2">201</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ListFormat">Intl.ListFormat</a></td>
    <td><strong>Intl, JavaScript, ListFormat, 列表格式化</strong></td>
</tr>
<tr>
    <td><strong><code>Intl.ListFormat</code></strong> 是一个语言相关的列表格式化构造器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">202</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Locale">Intl.Locale</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Intl.Locale</code></strong> 构造器(constructor) 是 Intl 对象的标准内置属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">203</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat">Intl.NumberFormat</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Intl.NumberFormat是对语言敏感的格式化数字类的构造器类</code></strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">204</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/format">Intl.NumberFormat.prototype.format</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Intl.NumberFormat.prototype.format</code></strong> 属性返回一个根据<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat" title="Intl.NumberFormat是对语言敏感的格式化数字类的构造器类"><code>NumberFormat</code></a>对象的语言环境和格式化选项，来格式化一个数字的getter函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">205</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/PluralRules">Intl.PluralRules</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><font><font><font><font>该</font></font></font></font><font><font><font><font>对象的英文请立即获取iTunes多种敏感格式状语从句：多种语言规则</font></font></font><font><font><font>的</font></font></font><font><font><font>对象的构造函数。</font></font></font></font><strong><code>Intl.PluralRules</code></strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">206</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat">Intl.RelativeTimeFormat</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>No summary!</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">207</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON">JSON</a></td>
    <td><strong>JSON, JavaScript, Object, Reference, polyfill</strong></td>
</tr>
<tr>
    <td><strong><code>JSON</code></strong>对象包含两个方法: 用于解析 <a class="external" href="http:
</tr><tr>

</tr><tr>
    <td rowspan="2">208</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">JSON.parse()</a></td>
    <td><strong>ECMAScript5, JSON, JSON.parse(), JSON.stringify, JavaScript, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>JSON.parse()</strong></code> 方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。提供可选的reviver函数用以在返回之前对所得到的对象执行变换(操作)。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">209</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify()</a></td>
    <td><strong>JSON, JSON.stringify(), JavaScript, Method, Reference, stringify, 字符串</strong></td>
</tr>
<tr>
    <td><code><strong>JSON.stringify()</strong></code> 方法是将一个JavaScript值(对象或者数组)转换为一个 JSON字符串，如果指定了replacer是一个函数，则可以选择性的替换值，或者如果指定了replacer是一个数组，可选择性的仅包含数组指定的属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">210</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a></td>
    <td><strong>ECMAScript6, JavaScript, Map</strong></td>
</tr>
<tr>
    <td><strong><code>Map</code></strong> 对象保存键值对。任何值(对象或者<a class="glossaryLink" href="/en-US/docs/Glossary/Primitive" title="原始值: In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, null, undefined, and symbol.">原始值</a>) 都可以作为一个键或一个值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">211</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype">Map.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Map</strong></code><strong><code>.prototype</code></strong> 属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Map" title="此页面仍未被本地化, 期待您的翻译!"><code>Map</code></a>构造函数的原型对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">212</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/clear">Map.prototype.clear()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Map</strong></td>
</tr>
<tr>
    <td><code>clear()</code>方法会移除Map对象中的所有元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">213</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/delete">Map.prototype.delete()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Map, Method, Prototype</strong></td>
</tr>
<tr>
    <td><strong> </strong><code><strong><strong>delete()</strong></strong></code><strong> </strong>方法用于移除 <code>Map</code> 对象中指定的元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">214</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/entries">Map.prototype.entries()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>entries()</strong></code> ?方法返回一个新的包含 <code>[key, value]</code> ?对的 <code><strong>Iterator</strong></code> ?对象，返回的迭代器的迭代顺序与 <code>Map</code> 对象的插入顺序相同。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">215</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach">Map.prototype.forEach()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>forEach()</strong></code> 方法将会以插入顺序对 Map 对象中的每一个键值对执行一次参数中提供的回调函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">216</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/get">Map.prototype.get()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Map, Method, Prototype, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>get()</strong></code> 方法返回某个 <code>Map</code> 对象中的一个指定元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">217</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has">Map.prototype.has()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Map, Method, Reference</strong></td>
</tr>
<tr>
    <td>方法<code><strong>has()</strong></code> 返回一个bool值，用来表明map 中是否存在指定元素.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">218</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/keys">Map.prototype.keys()</a></td>
    <td><strong>ECMAScript6, Iterator, JavaScript, Map, Method, Prototype, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>keys()</strong></code> 返回一个新的 <code><strong>Iterator</strong></code> 对象。它包含按照顺序插入 <code>Map</code> 对象中每个元素的key值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">219</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/set">Map.prototype.set()</a></td>
    <td><strong>ECMAScript6, JavaScript, Map, Method, Prototype, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>set()</strong></code> 方法为 <code>Map</code> 对象添加或更新一个指定了键（<code>key</code>）和值（<code>value</code>）的（新）键值对。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">220</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size">Map.prototype.size</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Map, Property</strong></td>
</tr>
<tr>
    <td><code><strong>size</strong></code> 是可访问属性，用于返回 一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Map" title="此页面仍未被本地化, 期待您的翻译!"><code>Map</code></a> 对象的成员数量。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">221</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/values">Map.prototype.values()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>一个新的 <a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">222</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator">Map.prototype[@@iterator]()</a></td>
    <td><strong>ECMAScript 2015, Iterator, JavaScript, Map, Method, Reference</strong></td>
</tr>
<tr>
    <td><code><strong>@@iterator</strong></code><strong> </strong>属性的初始值与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/entries" title="entries() ?方法返回一个新的包含 [key, value] ?对的 Iterator ?对象，返回的迭代器的迭代顺序与 Map 对象的插入顺序相同。"><code>entries</code></a> 属性的初始值是同一个函数对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">223</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@toStringTag">Map.prototype[@@toStringTag]</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Map[@@toStringTag]</code></strong> 的初始值是"Map".</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">224</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species">get Map[@@species]</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Map[@@species]</strong></code> 访问器属性会返回一个 <code>Map</code> 构造函数.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">225</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">Math</a></td>
    <td><strong>JavaScript, Math, NeedsTranslation, TopicStub</strong></td>
</tr>
<tr>
    <td><strong><code>Math</code></strong> 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">226</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/E">Math.E</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.E</strong></code> 属性表示自然对数的底数（或称为基数），e，约等于 2.718。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">227</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10">Math.LN10</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.LN10</strong></code> 属性表示 10 的自然对数，约为 2.302：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">228</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2">Math.LN2</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.LN2</strong></code> 属性表示 2 的自然对数，约为 0.693：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">229</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E">Math.LOG10E</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.LOG10E</strong></code> 属性表示以 10 为底数，e 的对数，约为 0.434：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">230</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E">Math.LOG2E</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.LOG2E</strong></code> 属性表示以 2 为底数，e 的对数，约为 1.442：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">231</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI">Math.PI</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.PI</strong></code> 表示一个圆的周长与直径的比例，约为 3.14159：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">232</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2">Math.SQRT1_2</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.SQRT1_2</strong></code> 属性表示 1/2 的平方根，约为 0.707：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">233</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2">Math.SQRT2</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.SQRT2</strong></code> 属性表示 2 的平方根，约为 1.414：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">234</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/abs">Math.abs()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.abs(x)</strong></code> 函数返回指定数字 “x“ 的绝对值。如下：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">235</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/acos">Math.acos()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.acos()</strong></code> 返回一个数的反余弦值（单位为弧度），即：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">236</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/%E5%8F%8D%E5%8F%8C%E6%9B%B2%E4%BD%99%E5%BC%A6%E5%80%BC">Math.acosh()</a></td>
    <td><strong>三角函数, 数学</strong></td>
</tr>
<tr>
    <td><strong><code>Math.acosh()</code></strong><code>返回一个数字的反双曲余弦值，即：</code></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">237</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asin">Math.asin()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.asin()</strong></code> 方法返回一个数值的反正弦（单位为弧度），即：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">238</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh">Math.asinh()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Math.asinh()</code></strong> 函数返回给定数字的反双曲正弦值, 即：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">239</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan">Math.atan()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.atan()</strong></code> 函数返回一个数值的反正切（以弧度为单位），即：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">240</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2">Math.atan2()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.atan2()</strong></code> 返回其参数比值的反正切值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">241</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh">Math.atanh()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Math.atanh()</code></strong> 函数返回一个数值反双曲正切值, 即：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">242</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt">Math.cbrt()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.cbrt()</strong></code> 函数返回任意数字的立方根.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">243</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil">Math.ceil()</a></td>
    <td><strong>Math.ceil(), Math.ceil() === 向上取整, 向上取整</strong></td>
</tr>
<tr>
    <td><strong><code>Math.ceil()</code></strong> 函数返回大于或等于一个给定数字的最小整数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">244</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32">Math.clz32()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.clz32() </strong></code>函数返回一个数字在转换成 32 无符号整形数字的二进制形式后, 开头的 0 的个数, 比如 <code>1000000</code> 转换成 32 位无符号整形数字的二进制形式后是 <code>00000000000011110100001001000000</code>, 开头的 0 的个数是 12 个, 则 <code>Math.clz32(1000000)</code> 返回 <code>12</code>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">245</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cos">Math.cos()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.cos()</strong></code> 函数返回一个数值的余弦值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">246</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh">Math.cosh()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Math.cosh()</code></strong> 函数返回数值的双曲余弦函数, 可用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/E" title="Math.E 属性表示自然对数的底数（或称为基数），e，约等于 2.718。">constant e</a> 表示:</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">247</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/exp">Math.exp()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.exp()</strong></code> 函数返回 <code>e<sup>x</sup></code>，<code>x</code> 表示参数，<code>e</code> 是<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/E">欧拉常数（Euler's constant）</a>，自然对数的底数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">248</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1">Math.expm1()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.expm1()</strong></code> 函数返回 <code>E<sup>x</sup> - 1</code>, 其中 <code>x</code> 是该函数的参数, <code>E</code> 是自然对数的底数 <code>2.718281828459045.</code></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">249</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">Math.floor()</a></td>
    <td><strong>Math.floor(), 向下取整</strong></td>
</tr>
<tr>
    <td><code><strong>Math.floor()</strong></code> 返回小于或等于一个给定数字的最大整数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">250</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/fround">Math.fround()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Math.fround()</code></strong> 可以将任意的数字转换为离它最近的<a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">251</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot">Math.hypot()</a></td>
    <td><strong>JavaScript, Math, 方法, 试验性</strong></td>
</tr>
<tr>
    <td><code><strong>Math.hypot()</strong></code> 函数返回它的所有参数的平方和的平方根，即：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">252</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/imul">Math.imul()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>该函数返回两个参数的类C的32位整数乘法运算的运算结果.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">253</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log">Math.log()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.log()</strong></code> 函数返回一个数的自然对数，即：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">254</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log10">Math.log10()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.log10()</strong></code> 函数返回<span style="color:
</tr><tr>

</tr><tr>
    <td rowspan="2">255</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p">Math.log1p()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.log1p()</strong></code> 函数返回一个数字加1后的自然对数 (底为 <code>E</code>), 既<code>log(x+1)</code>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">256</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log2">Math.log2()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.log2()</strong></code> 函数返回一个数字以 2 为底的对数.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">257</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max">Math.max()</a></td>
    <td><strong>JavaScript, Math, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>Math.max()</strong></code> 函数返回一组数中的最大值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">258</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min">Math.min()</a></td>
    <td><strong>JavaScript, Math, Math.min, 参考, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>Math.min()</strong></code> 返回零个或更多个数值的最小值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">259</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/pow">Math.pow()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.pow()</strong></code> 函数返回基数（<code>base</code>）的指数（<code>exponent</code>）次幂<code>，即</code><span style="line-height: 1.572;"> </span><code style="font-size: 14px;">base<sup>exponent</sup></code><span style="line-height: 1.572;">。</span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">260</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random">Math.random()</a></td>
    <td><strong>JavaScript, Math, Math.random(), Method, 随机数</strong></td>
</tr>
<tr>
    <td><code><strong>Math.random()</strong></code> 函数返回一个浮点,  伪随机数在范围<strong>[0，1)</strong>，也就是说，从0（包括0）往上，但是不包括1（排除1），然后您可以缩放到所需的范围。实现将初始种子选择到随机数生成算法;它不能被用户选择或重置。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">261</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round">Math.round()</a></td>
    <td><strong>Math.round(), 四舍五入</strong></td>
</tr>
<tr>
    <td><code><strong>Math.round()</strong></code> 函数返回一个数字四舍五入后最接近的整数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">262</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sign">Math.sign()</a></td>
    <td><strong>JavaScript, Math, Math.sign()</strong></td>
</tr>
<tr>
    <td><strong><code>Math.sign()</code></strong> 函数返回一个数字的符号, 指示数字是正数，负数还是零。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">263</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sin">Math.sin()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.sin()</strong></code> 函数返回一个数值的正弦值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">264</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh">Math.sinh()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.sinh()</strong></code> 函数返回一个数字(单位为角度)的双曲正弦值.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">265</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt">Math.sqrt()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.sqrt()</strong></code> 函数返回一个数的平方根，即：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">266</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tan">Math.tan()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Math.tan()</strong></code> 方法返回一个数值的正切值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">267</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh">Math.tanh()</a></td>
    <td><strong>ECMAScript6, JavaScript, Math, Method, tanh, 双曲正切</strong></td>
</tr>
<tr>
    <td><strong><code>Math.tanh()</code></strong> 函数将会返回一个数的双曲正切函数值，计算如下:</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">268</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc">Math.trunc()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Math, Method</strong></td>
</tr>
<tr>
    <td><code><strong>Math.trunc()</strong></code> 方法会将数字的小数部分去掉，只保留整数部分。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">269</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN">NaN</a></td>
    <td><strong>NaN</strong></td>
</tr>
<tr>
    <td>全局属性 <strong><code>NaN</code></strong> 的值表示不是一个数字（Not-A-Number）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">270</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">Number</a></td>
    <td><strong>JavaScript, Number, Reference</strong></td>
</tr>
<tr>
    <td>JavaScript 的 <strong><code>Number</code></strong> 对象是经过封装的能让你处理数字值的对象。<code>Number</code> 对象由 <code>Number()</code> 构造器创建。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">271</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON">Number.EPSILON</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Number.EPSILON</code></strong> 属性表示 1 与<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" title="JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。Number 对象由 Number() 构造器创建。"><code>Number</code></a>可表示的大于 1 的最小的浮点数之间的差值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">272</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER">Number.MAX_SAFE_INTEGER</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Number.MAX_SAFE_INTEGER</code></strong> 常量表示在 JavaScript 中最大的安全整数（maxinum safe integer)（<code>2<sup>53</sup> - 1）。</code></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">273</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE">Number.MAX_VALUE</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Number.MAX_VALUE</strong></code> 属性表示在 JavaScript 里所能表示的最大数值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">274</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER">Number.MIN_SAFE_INTEGER</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Number.MIN_SAFE_INTEGER</code></strong> 代表在 JavaScript中最小的安全的integer型数字 (<code>-(2<sup>53</sup> - 1)</code>).</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">275</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE">Number.MIN_VALUE</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Number.MIN_VALUE</strong></code> 属性表示在 JavaScript 中所能表示的最小的正值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">276</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY">Number.NEGATIVE_INFINITY</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Number.NEGATIVE_INFINITY</strong></code> 属性表示负无穷大。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">277</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN">Number.NaN</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Number.NaN</strong></code> 表示“非数字”（Not-A-Number）。和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" title="全局属性 NaN 的值表示不是一个数字（Not-A-Number）。"><code>NaN</code></a> 相同。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">278</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY">Number.POSITIVE_INFINITY</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Number.POSITIVE_INFINITY</strong></code> 属性表示正无穷大。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">279</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite">Number.isFinite()</a></td>
    <td><strong>Experimental, JavaScript, Method, Number, Reference</strong></td>
</tr>
<tr>
    <td><strong><code>Number.isFinite()</code></strong> 方法用来检测传入的参数是否是一个有穷数（finite number）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">280</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger">Number.isInteger()</a></td>
    <td><strong>JavaScript, Method, Number, Reference, 方法</strong></td>
</tr>
<tr>
    <td><strong><code>Number.isInteger()</code></strong> 方法用来判断给定的参数是否为整数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">281</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN">Number.isNaN()</a></td>
    <td><strong>ECMAScript6, Experimental, Expérimental(2), JavaScript, Method, Number</strong></td>
</tr>
<tr>
    <td><strong><code>Number.isNaN()</code></strong> 方法确定传递的值是否为 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" title="全局属性 NaN 的值表示不是一个数字（Not-A-Number）。"><code>NaN</code></a>和其类型是 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" title="JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。Number 对象由 Number() 构造器创建。"><code>Number</code></a>。它是原始的全局<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN" title="isNaN() 函数用来确定一个值是否为NaN 。注：isNaN函数内包含一些非常有趣的规则；你也可以通过ECMAScript 2015/ES6 中定义的Number.isNaN()或者 可以使用typeof 来判断该值是否为一个非数字。"><code>isNaN()</code></a>的更强大的版本。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">282</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger">Number.isSafeInteger()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Number.isSafeInteger()</code></strong> 方法用来判断传入的参数值是否是一个“安全整数”（safe integer）。一个安全整数是一个符合下面条件的整数：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">283</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat">Number.parseFloat()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Number.parseFloat()</code></strong> 方法可以把一个字符串解析成浮点数。该方法与全局的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat" title="parseFloat() 函数解析一个字符串参数并返回一个浮点数。"><code>parseFloat()</code></a> 函数相同，并且处于 ECMAScript 6 规范中（用于全局变量的模块化）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">284</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt">Number.parseInt()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Method, Number</strong></td>
</tr>
<tr>
    <td><strong><code>Number.parseInt()</code></strong> 方法依据指定基数 [ 参数 <strong>radix </strong>的值]，把字符串 [ 参数 <strong>string</strong> 的值] 解析成整数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">285</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/prototype">Number.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Number.prototype</code></strong> 属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" title="JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。Number 对象由 Number() 构造器创建。"><code>Number</code></a> 构造函数的原型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">286</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential">Number.prototype.toExponential()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>toExponential()</code></strong> 方法以指数表示法返回该数值字符串表示形式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">287</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">Number.prototype.toFixed()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toFixed()</strong></code> 方法使用定点表示法来格式化一个数值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">288</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString">Number.prototype.toLocaleString()</a></td>
    <td><strong>JavaScript, 原型, 国际化, 数字, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>toLocaleString()</strong></code> 方法返回这个数字在特定语言环境下的表示字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">289</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision">Number.prototype.toPrecision()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toPrecision()</strong></code> 方法以指定的精度返回该数值对象的字符串表示。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">290</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource">Number.prototype.toSource()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toSource()</strong></code> 方法返回该对象源码的字符串表示。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">291</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString">Number.prototype.toString()</a></td>
    <td><strong>Bug, Number.prototype.toString(), Tips</strong></td>
</tr>
<tr>
    <td><strong><code>toString()</code></strong> 方法返回指定 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" title="JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。Number 对象由 Number() 构造器创建。"><code>Number</code></a> 对象的字符串表示形式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">292</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf">Number.prototype.valueOf()</a></td>
    <td><strong>JavaScript, Method, Number, valueOf()</strong></td>
</tr>
<tr>
    <td><strong><code>valueOf()</code></strong> 方法返回一个被 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" title="JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。Number 对象由 Number() 构造器创建。"><code>Number</code></a> 对象包装的原始值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">293</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger">Number.toInteger()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Number.toInteger()</code></strong> 用来将参数转换成整数,但该方法的实现已被移除.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">294</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">Object</a></td>
    <td><strong>Constructor, JavaScript, Object, 对象, 构造器</strong></td>
</tr>
<tr>
    <td><code><strong>Object</strong></code> 构造函数创建一个对象包装器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">295</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Method, Object, polyfill</strong></td>
</tr>
<tr>
    <td><code><strong>Object.assign()</strong></code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">296</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create()</a></td>
    <td><strong>ECMAScript5, JavaScript, Method, Object, Reference, polyfill</strong></td>
</tr>
<tr>
    <td><strong><code>Object.create()</code></strong>方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。 （请打开浏览器控制台以查看运行结果。）</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">297</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties">Object.defineProperties()</a></td>
    <td><strong>ECMAScript 5, JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td><strong><code>Object.defineProperties()</code> </strong>方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">298</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a></td>
    <td><strong>ECMAScript 5, JavaScript, JavaScript 1.8.5, Method, Object</strong></td>
</tr>
<tr>
    <td><code><strong>Object.defineProperty()</strong></code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">299</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples">Object.defineProperty 的补充示例</a></td>
    <td><strong>Examples, JavaScript, Object</strong></td>
</tr>
<tr>
    <td>本页为<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" title="Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。"><code>Object.defineProperty()</code></a>提供一个附加示例。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">300</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">Object.entries()</a></td>
    <td><strong>JavaScript, Method, Object, Reference</strong></td>
</tr>
<tr>
    <td>The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone <a class="external" href="https://github.com/mdn/interactive-examples" rel="noopener">https://github.com/mdn/interactive-examples</a> and send us a pull request.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">301</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze()</a></td>
    <td><strong>ECMAScript 5, JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td><strong><code>Object.freeze()</code></strong> 方法可以<strong>冻结</strong>一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。<code>freeze()</code> 返回和传入的参数相同的对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">302</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries">Object.fromEntries()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Object.fromEntries()</strong></code> 方法把键值对列表转换为一个对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">303</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getNotifier">Object.getNotifier()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Object.getNotifer()</code></strong> 方法用于创建可人工触发 change 事件的对象，但该方法在浏览器中已被废弃。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">304</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">Object.getOwnPropertyDescriptor()</a></td>
    <td><strong>JavaScript, Object, 对象, 方法</strong></td>
</tr>
<tr>
    <td><strong><code>Object.getOwnPropertyDescriptor()</code></strong> 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">305</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors">Object.getOwnPropertyDescriptors()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Object.getOwnPropertyDescriptors()</strong></code> 方法用来获取一个对象的所有自身属性的描述符。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">306</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames">Object.getOwnPropertyNames()</a></td>
    <td><strong>ECMAScript 5, JavaScript, JavaScript 1.8.5, Method, Object, Reference</strong></td>
</tr>
<tr>
    <td><strong><code>Object.getOwnPropertyNames()</code></strong>方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">307</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols">Object.getOwnPropertySymbols()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td><code><strong>Object.getOwnPropertySymbols()</strong></code> 方法返回一个给定对象自身的所有 Symbol 属性的数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">308</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf">Object.getPrototypeOf()</a></td>
    <td><strong>ECMAScript 5, JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td><code><strong>Object.getPrototypeOf()</strong></code> 方法返回指定对象的原型（内部<code>[[Prototype]]</code>属性的值）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">309</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is">Object.is()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, 判断, 对象, 方法, 相等</strong></td>
</tr>
<tr>
    <td><code><strong>Object.is()</strong></code> 方法判断两个值是否是<a href="/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">相同的值</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">310</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible">Object.isExtensible()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Object.isExtensible()</strong></code> 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">311</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen">Object.isFrozen()</a></td>
    <td><strong>ECMAScript 5, JavaScript, JavaScript 1.8.5, Method, Object</strong></td>
</tr>
<tr>
    <td><code><strong>Object.isFrozen()</strong></code>方法判断一个对象是否被<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" title="Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。">冻结</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">312</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed">Object.isSealed()</a></td>
    <td><strong>ECMAScript5, JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td><strong><code>Object.isSealed()</code></strong> 方法判断一个对象是否被密封。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">313</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys()</a></td>
    <td><strong>CCAC: Chrome Console Auto Copy, ECMAScript 5, JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td><code><strong>Object.keys()</strong></code> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用<font face="Consolas, Liberation Mono, Courier, monospace"> </font><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" title="for...in语句以任意顺序遍历一个对象自有的、继承的、可枚举的、非Symbol的属性。对于每个不同的属性，语句都会被执行。"><code>for...in</code></a> 循环遍历该对象时返回的顺序一致 。如果对象的键-值都不可枚举，那么将返回由键组成的数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">314</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/observe">Object.observe()</a></td>
    <td><strong>ECMAScript7, Experimental, Expérimental(2), JavaScript, Method, Object, observe</strong></td>
</tr>
<tr>
    <td><strong><code>Object.observe()</code></strong> 方法用于异步地监视一个对象的修改。当对象属性被修改时，方法的回调函数会提供一个有序的修改流。然而，这个接口已经被废弃并从各浏览器中移除。你可以使用更通用的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" title="Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。"><code>Proxy</code></a> 对象替代。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">315</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions">Object.preventExtensions()</a></td>
    <td><strong>ECMAScript 5, JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td><code><strong>Object.preventExtensions()</strong></code>方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">316</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype">Object.prototype</a></td>
    <td><strong>JavaScript, Object, Property</strong></td>
</tr>
<tr>
    <td><code><strong>Object.prototype</strong></code> 属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" title="Object 构造函数创建一个对象包装器。"><code>Object</code></a> 的原型对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">317</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/count">Object.prototype.__count__</a></td>
    <td><strong>JavaScript, Object, Obsolete, Property, Prototype</strong></td>
</tr>
<tr>
    <td><strong><code>__count__</code></strong> 属性曾经用来存放对象的可枚举的属性的个数，但是已经被废除。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">318</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__">Object.prototype.__defineGetter__()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>__defineGetter__</strong></code> 方法可以将一个函数绑定在当前对象的指定属性上，当那个属性的值被读取时，你所绑定的函数就会被调用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">319</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__">Object.prototype.__defineSetter__()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>__defineSetter__ </strong>方法可以将一个函数绑定在当前对象的指定属性</code>上，当那个属性被赋值时，你所绑定的函数就会被调用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">320</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__">Object.prototype.__lookupGetter__()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>__lookupGetter__</strong></code> 方法会返回当前对象上指定属性的<strong>属性读取访问器函数（getter）。</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">321</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__">Object.prototype.__lookupSetter__()</a></td>
    <td><strong>不建议使用, 原型, 对象, 方法, 过时的, 非标准</strong></td>
</tr>
<tr>
    <td>一个绑定了setter的特殊属性的函数引用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">322</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod">Object.prototype.__noSuchMethod__</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>__noSuchMethod__</code></strong> 属性曾经是指当调用某个对象里不存在的方法时即将被执行的函数，但是现在这个函数已经不可用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">323</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent">Object.prototype.__parent__</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>指向一个对象的上下文.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">324</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto">Object.prototype.__proto__</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Object, Property, Prototype, Reference</strong></td>
</tr>
<tr>
    <td>使用<code>__proto__</code>是有争议的，也不鼓励使用它。因为它从来没有被包括在EcmaScript语言规范中，但是现代浏览器都实现了它。<code>__proto__</code>属性已在ECMAScript 6语言规范中标准化，用于确保Web浏览器的兼容性，因此它未来将被支持。它已被不推荐使用, 现在更推荐使用<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf" title="Object.getPrototypeOf() 方法返回指定对象的原型（内部[[Prototype]]属性的值）。"><code>Object.getPrototypeOf</code></a>/<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf" title="静态方法 Reflect.getPrototypeOf() 与 Object.getPrototypeOf() 方法是一样的。都是返回指定对象的原型（即，内部的 [[Prototype]] 属性的值）。"><code>Reflect.getPrototypeOf</code></a> 和<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" title="如果对象的[[Prototype]]被修改成不可扩展(通过 Object.isExtensible()查看)，就会抛出 TypeError异常。如果prototype参数不是一个对象或者null(例如，数字，字符串，boolean，或者 undefined)，则什么都不做。否则，该方法将obj的[[Prototype]]修改为新的值。"><code>Object.setPrototypeOf</code></a>/<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf" title="静态方法 Reflect.setPrototypeOf() 与 Object.setPrototypeOf() 方法是一致的。它将指定对象的原型 （即，内部的[[Prototype]] 属性）设置为另一个对象或为 null。"><code>Reflect.setPrototypeOf</code></a>（尽管如此，设置对象的[[Prototype]]是一个缓慢的操作，如果性能是一个问题，应该避免）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">325</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor">Object.prototype.constructor</a></td>
    <td><strong>JavaScript, Object, Property, Prototype</strong></td>
</tr>
<tr>
    <td>返回创建实例对象的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" title="Object 构造函数创建一个对象包装器。"><code>Object</code></a> 构造函数的引用。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。对原始类型来说，如<code>1</code>，<code>true</code>和<code>"test"</code>，该值只可读。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">326</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/eval">Object.prototype.eval()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Object.eval()</strong></code> 方法用于在对象的上下文中对 JavaScript 代码字符串求值，但该方法已被移除。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">327</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty">Object.prototype.hasOwnProperty()</a></td>
    <td><strong>JavaScript, Method, Object, Object.prototype.hasOwnProperty(), Prototype, 对象</strong></td>
</tr>
<tr>
    <td><code><strong>hasOwnProperty()</strong></code> 方法会返回一个布尔值，指示对象<strong>自身</strong>属性中是否具有指定的属性（也就是是否有指定的键）</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">328</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf">Object.prototype.isPrototypeOf()</a></td>
    <td><strong>JavaScript, Object, Prototype, isPrototypeOf(), 原型, 对象, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>isPrototypeOf()</strong></code> 方法用于测试一个对象是否存在于另一个对象的原型链上。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">329</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable">Object.prototype.propertyIsEnumerable()</a></td>
    <td><strong>JavaScript, Method, Object, Prototype</strong></td>
</tr>
<tr>
    <td><code><strong>propertyIsEnumerable()</strong></code> 方法返回一个布尔值，表示指定的属性是否可枚举。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">330</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString">Object.prototype.toLocaleString()</a></td>
    <td><strong>JavaScript, Method, Object, Prototype</strong></td>
</tr>
<tr>
    <td><code><strong>toLocaleString()</strong></code> 方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">331</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource">Object.prototype.toSource()</a></td>
    <td><strong>JavaScript, Method, Object, Prototype</strong></td>
</tr>
<tr>
    <td><strong><code>toSource()</code></strong>方法返回一个表示对象源代码的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">332</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">Object.prototype.toString()</a></td>
    <td><strong>JavaScript, Method, Object, Prototype</strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code> 方法返回一个表示该对象的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">333</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch">Object.prototype.unwatch()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>unwatch()</strong></code> 删除一个 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/watch" title="undefined."><code>watch()</code></a> 设置的 watchpoint.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">334</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf">Object.prototype.valueOf()</a></td>
    <td><strong>JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td><code><strong>valueOf()</strong></code> 方法返回指定对象的原始值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">335</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/watch">Object.prototype.watch()</a></td>
    <td><strong>Debugging, Deprecated, JavaScript, Method, Object, Obsolete, Prototype</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。"><code>undefined</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">336</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal">Object.seal()</a></td>
    <td><strong>ECMAScript 5, JavaScript, Method, Object</strong></td>
</tr>
<tr>
    <td>The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone <a class="external" href="https://github.com/mdn/interactive-examples" rel="noopener">https://github.com/mdn/interactive-examples</a> and send us a pull request.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">337</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf()</a></td>
    <td><strong>Array, Class, ECMAScript6, ES6, JavaScript, Object.setPrototypeOf(), Typescript, setPrototypeOf(), 对象, 方法</strong></td>
</tr>
<tr>
    <td>如果对象的[[Prototype]]被修改成不可扩展(通过 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible" title="Object.isExtensible() 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。"><code>Object.isExtensible()</code></a>查看)，就会抛出 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a>异常。如果<code>prototype</code>参数不是一个对象或者<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" title="值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。"><code>null</code></a>(例如，数字，字符串，boolean，或者 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。"><code>undefined</code></a>)，则什么都不做。否则，该方法将<code>obj</code>的<code>[[Prototype]]</code>修改为新的值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">338</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/unobserve">Object.unobserve()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>Object.unobserve()</strong> 是用来移除通过 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/observe" title="Object.observe() 方法用于异步地监视一个对象的修改。当对象属性被修改时，方法的回调函数会提供一个有序的修改流。然而，这个接口已经被废弃并从各浏览器中移除。你可以使用更通用的 Proxy 对象替代。"><code>Object.observe()</code></a>设置的观察者的方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">339</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values">Object.values()</a></td>
    <td><strong>JavaScript, Method, Object, Reference</strong></td>
</tr>
<tr>
    <td><code><strong>Object.values()</strong></code>方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" title="for...in语句以任意顺序遍历一个对象自有的、继承的、可枚举的、非Symbol的属性。对于每个不同的属性，语句都会被执行。"><code>for...in</code></a>循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">340</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray">ParallelArray</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>ParallelArray的目标是在web应用程序中让数据并行.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">341</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Promise, Reference</strong></td>
</tr>
<tr>
    <td><strong>Promise </strong>对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">342</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all">Promise.all()</a></td>
    <td><strong>AJAX, Async-Await, Fetch, Promise, Promise.all(), Promise.race()</strong></td>
</tr>
<tr>
    <td><code><strong>Promise.all(iterable)</strong></code> 方法返回一个 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。"><code>Promise</code></a> 实例，此实例在 <code>iterable</code> 参数内所有的 <code>promise</code> 都“完成（resolved）”或参数中不包含 <code>promise</code> 时回调完成（resolve）；如果参数中  <code>promise</code> 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 <code>promise</code> 的结果。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">343</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/prototype">Promise.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Promise</strong></code><strong><code>.prototype</code></strong> 属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。"><code>Promise</code></a> 构造器的原型.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">344</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled">Promise.prototype.allSettled()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>该<code><strong>Promise.allSettled()</strong></code>方法返回一个promise，该promise在所有给定的promise已被解析或被拒绝后解析，并且每个对象都描述每个promise的结果。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">345</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch">Promise.prototype.catch()</a></td>
    <td><strong>Promise, Promise.prototype.catch()</strong></td>
</tr>
<tr>
    <td><strong>catch()</strong> 方法返回一个<a class="new" href="/zh-CN/docs/Web/API/Promise" rel="nofollow">Promise</a>，并且处理拒绝的情况。它的行为与调用<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" title="then() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。"><code>Promise.prototype.then(undefined, onRejected)</code></a> 相同。 (事实上, calling <code>obj.catch(onRejected)</code> 内部calls <code>obj.then(undefined, onRejected)</code>).</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">346</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally">Promise.prototype.finally()</a></td>
    <td><strong>JavaScript, Promises, Reference, finally</strong></td>
</tr>
<tr>
    <td>返回一个设置了 <code>finally</code> 回调函数的<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。"><code>Promise</code></a>对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">347</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then">Promise.prototype.then()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Promise, Promise.prototype.then(), Prototype, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>then()</strong></code> 方法返回一个  <a class="new" href="/zh-CN/docs/Web/API/Promise" rel="nofollow" title="此页面仍未被本地化, 期待您的翻译!"><code>Promise</code></a> 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">348</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race">Promise.race()</a></td>
    <td><strong>Promise</strong></td>
</tr>
<tr>
    <td><strong><code>Promise.race(iterable)</code> </strong>方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">349</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject">Promise.reject()</a></td>
    <td><strong>ECAMScript 2015, JavaScript, Method, Promise</strong></td>
</tr>
<tr>
    <td><code><strong>Promise.reject(reason)</strong></code>方法返回一个带有拒绝原因reason参数的Promise对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">350</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve">Promise.resolve()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The source for this interactive demo is stored in a GitHub repository. If you'd like to contribute to the interactive demo project, please clone <a class="external" href="https://github.com/mdn/interactive-examples" rel="noopener">https://github.com/mdn/interactive-examples</a> and send us a pull request.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">351</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Proxy</strong></td>
</tr>
<tr>
    <td><strong>Proxy</strong> 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">352</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable">Proxy.revocable()</a></td>
    <td><strong>ECMAScript6, Experimental, Expérimental(2), JavaScript, Method, Proxy</strong></td>
</tr>
<tr>
    <td><code><strong>Proxy.revocable()</strong></code> 方法可以用来创建一个可撤销的代理对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">353</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler">处理器对象</a></td>
    <td><strong>ECMAScript6, Experimental, Expérimental(2), JavaScript, Proxy</strong></td>
</tr>
<tr>
    <td>处理器对象用来自定义<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" title="Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。">代理对象</a>的各种可代理操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">354</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/apply">handler.apply()</a></td>
    <td><strong>ECMAScript6, JavaScript, Method, Proxy</strong></td>
</tr>
<tr>
    <td><strong><code>handler.apply()</code></strong> 方法用于拦截函数的调用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">355</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/construct">handler.construct()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>handler.construct()</strong></code> 方法用于拦截<a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/new" title="new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。"><code>new</code></a> 操作符. 为了使new操作符在生成的Proxy对象上生效，用于初始化代理的目标对象自身必须具有[[Construct]]内部方法（即 <code>new target</code> 必须是有效的）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">356</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/defineProperty">handler.defineProperty()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>handler.defineProperty()</code></strong> 用于拦截对对象的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" title="Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。"><code>Object.defineProperty()</code></a> 操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">357</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/deleteProperty">handler.deleteProperty()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>handler.deleteProperty()</code></strong> 方法用于拦截对对象属性的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/delete" title="delete 操作符用于删除对象的某个属性；如果没有指向这个属性的引用，那它最终会被释放。"><code>delete</code></a> 操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">358</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/enumerate">handler.enumerate()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>代理方法<strong><code>handler.enumerate()</code></strong>决定了被代理对象在<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" title="for...in语句以任意顺序遍历一个对象自有的、继承的、可枚举的、非Symbol的属性。对于每个不同的属性，语句都会被执行。"><code>for...in</code></a>中的行为。不过这个方法已经在ES2016标准中被移除了。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">359</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get">handler.get()</a></td>
    <td><strong>ECMAScript6, JavaScript, Method, Proxy</strong></td>
</tr>
<tr>
    <td><strong><code>handler.get()</code></strong> 方法用于拦截对象的读取属性操作。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">360</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor">handler.getOwnPropertyDescriptor()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>handler.getOwnPropertyDescriptor()</code></strong> 方法是 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" title="Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）"><code>Object.getOwnPropertyDescriptor()</code></a>  的钩子。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">361</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getPrototypeOf">handler.getPrototypeOf()</a></td>
    <td><strong>ECMAScript6, Experimental, Expérimental(2), JavaScript, Method, Proxy</strong></td>
</tr>
<tr>
    <td><strong><code>handler.getPrototypeOf()</code></strong> 是一个代理方法，当读取代理对象的原型时，该方法就会被调用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">362</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/has">handler.has()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>handler.has()</code></strong> 方法是针对 <a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/in" title="如果指定的属性在指定的对象或其原型链中，则in 运算符返回true。"><code>in</code></a> 操作符的代理方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">363</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/isExtensible">handler.isExtensible()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Method, Proxy</strong></td>
</tr>
<tr>
    <td>下列参数将会被传递给 <code>isExtensible</code>方法。 this 绑定在 handler 对象上。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">364</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/ownKeys">handler.ownKeys()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>handler.ownKeys()</code></strong> 方法用于拦截 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys" title="静态方法 Reflect.ownKeys() 返回一个由目标对象自身的属性键组成的数组。"><code>Reflect.ownKeys()</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">365</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/preventExtensions">handler.preventExtensions()</a></td>
    <td><strong>Proxy 代理 拦截</strong></td>
</tr>
<tr>
    <td><strong><code>handler.preventExtensions()</code></strong> 方法用于设置对</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">366</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set">handler.set()</a></td>
    <td><strong>ECMAScript6, JavaScript, Method, Proxy</strong></td>
</tr>
<tr>
    <td><code><strong>handler.set()</strong></code> 方法用于拦截设置属性值的操作</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">367</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/setPrototypeOf">handler.setPrototypeOf()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>handler.setPrototypeOf()</code></strong> 方法主要用来拦截 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" title="如果对象的[[Prototype]]被修改成不可扩展(通过 Object.isExtensible()查看)，就会抛出 TypeError异常。如果prototype参数不是一个对象或者null(例如，数字，字符串，boolean，或者 undefined)，则什么都不做。否则，该方法将obj的[[Prototype]]修改为新的值。"><code>Object.setPrototypeOf()</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">368</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError">RangeError</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>RangeError</strong>对象标明一个错误，当一个值不在其所允许的范围或者集合中。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">369</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError/prototype">RangeError.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>所有  <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError" title="RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"><code>RangeError</code></a> 的实例都继承自 <code>RangeError.prototype</code> ，所以你可以使用这个属性来为所有的实例添加属性或方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">370</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError">ReferenceError</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>ReferenceError（引用错误）</strong></code> 对象代表当一个不存在的变量被引用时发生的错误。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">371</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/prototype">ReferenceError.prototype</a></td>
    <td><strong>Error, JavaScript, Property, Prototype, ReferenceError</strong></td>
</tr>
<tr>
    <td><code><strong>ReferenceError.prototype</strong></code> 表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" title="ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"><code>ReferenceError</code></a> 的原型构造器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">372</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Overview, Reflect</strong></td>
</tr>
<tr>
    <td><strong>Reflect</strong> 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler">处理器对象</a>的方法相同。<code>Reflect</code>不是一个函数对象，因此它是不可构造的。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">373</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply">Reflect.apply()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.apply()</code></strong> 通过指定的参数列表发起对目标(target)函数的调用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">374</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct">Reflect.construct()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Reflect</strong></code><strong><code>.construct()</code></strong> 方法的行为有点像 <a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">375</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty">Reflect.defineProperty()</a></td>
    <td><strong>ECMAScript 2016, JavaScript, Method, Reflect</strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.defineProperty()</code></strong> 基本等同于 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" title="Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。"><code>Object.defineProperty()</code></a> 方法，唯一不同是返回 <a href="/zh-CN/docs/Web/JavaScript/Reference/Boolean" title="此页面仍未被本地化, 期待您的翻译!"><code>Boolean</code></a> 值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">376</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty">Reflect.deleteProperty()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.deleteProperty()</code></strong> 允许用于删除属性。它很像 <a href="/en-US/docs/Web/JavaScript/Reference/Operators/delete"><code>delete</code> operator</a> ，但它是一个函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">377</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/enumerate">Reflect.enumerate()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>目标对象自身和继承的可迭代属性的一个迭代器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">378</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get">Reflect.get()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Reflect</strong></code><strong><code>.get()</code></strong>方法与从 对象 (<code>target[propertyKey]</code>) 中读取属性类似，但它是通过一个函数执行来操作的。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">379</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor">Reflect.getOwnPropertyDescriptor()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.getOwnPropertyDescriptor()</code></strong> 与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" title="Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）"><code>Object.getOwnPropertyDescriptor()</code></a> 方法相似。如果在对象中存在，则返回给定的属性的属性描述符。否则返回 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。"><code>undefined</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">380</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf">Reflect.getPrototypeOf()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.getPrototypeOf()</code></strong> 与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf" title="Object.getPrototypeOf() 方法返回指定对象的原型（内部[[Prototype]]属性的值）。"><code>Object.getPrototypeOf()</code></a> 方法是一样的。都是返回指定对象的原型（即，内部的 <code>[[Prototype]]</code> 属性的值）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">381</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has">Reflect.has()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.has()</code></strong> 作用与 <a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">382</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible">Reflect.isExtensible()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><font face="Open Sans, Arial, sans-serif">静态方法 </font><strong>Reflect</strong></code><strong><code>.isExtensible()</code></strong> 判断一个对象是否可扩展 （即是否能够添加新的属性）。与它 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible" title="Object.isExtensible() 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。"><code>Object.isExtensible()</code></a> 方法相似，但有一些不同，详情可见 <a href="
</tr><tr>

</tr><tr>
    <td rowspan="2">383</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys">Reflect.ownKeys()</a></td>
    <td><strong>Reflect</strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.ownKeys()</code></strong> 返回一个由目标对象自身的属性键组成的数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">384</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions">Reflect.preventExtensions()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.preventExtensions()</code></strong> 方法阻止新属性添加到对象 例如：防止将来对对象的扩展被添加到对象中)。该方法与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions" title="Object.preventExtensions()方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。"><code>Object.preventExtensions()</code></a>相似，但有一些不同点。详情可见 <a href="
</tr><tr>

</tr><tr>
    <td rowspan="2">385</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set">Reflect.set()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.set()</code></strong> 工作方式就像在一个对象上设置一个属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">386</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf">Reflect.setPrototypeOf()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>静态方法 <code><strong>Reflect</strong></code><strong><code>.setPrototypeOf()</code></strong> 与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" title="如果对象的[[Prototype]]被修改成不可扩展(通过 Object.isExtensible()查看)，就会抛出 TypeError异常。如果prototype参数不是一个对象或者null(例如，数字，字符串，boolean，或者 undefined)，则什么都不做。否则，该方法将obj的[[Prototype]]修改为新的值。"><code>Object.setPrototypeOf()</code></a> 方法是一致的。它将指定对象的原型 （即，内部的<code>[[Prototype]] </code>属性）设置为另一个对象或为 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" title="值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。"><code>null</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">387</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">RegExp</a></td>
    <td><strong>RegExp, Regular Expressions, 字面量, 工厂符号, 构造函数, 边界字符（Boundaries）</strong></td>
</tr>
<tr>
    <td><strong><code>RegExp</code></strong> 构造函数创建了一个正则表达式对象，用于将文本与一个模式匹配。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">388</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n">RegExp.$1-$9</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>非标准<strong>$1, $2, $3, $4, $5, $6, $7, $8, $9 </strong>属性是包含括号子串匹配的正则表达式的静态和只读属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">389</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input">RegExp.input ($_)</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>input</code> </strong>非标准属性是正则表达式静态属性，含有正则表达式所匹配的字符串。<code>RegExp.$_</code>是这个属性的别名。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">390</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex">RegExp.lastIndex</a></td>
    <td><strong>JavaScript, Property, RegExp, Regular Expressions</strong></td>
</tr>
<tr>
    <td><code><strong>lastIndex</strong></code> 是正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">391</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch">RegExp.lastMatch ($&amp;)</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>lastMatch </strong>非标准属性是正则表达式的静态和只读属性，含有最后匹配到的字符串。<code>RegExp.$&amp;</code> 是这个属性的别名。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">392</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen">RegExp.lastParen ($+)</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>lastParen </strong>非标准属性是正则表达式的静态和只读属性，包含匹配到的最后一个子串（如果存在）。<code>RegExp.$+</code>是这一属性的别名。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">393</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext">RegExp.leftContext ($`)</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>leftContext </strong>非标准属性是正则表达式的静态和只读属性，含有最新匹配的左侧子串。 <code>RegExp.$`</code> 是这个属性的别名。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">394</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype">RegExp.prototype</a></td>
    <td><strong>JavaScript, Property, RegExp</strong></td>
</tr>
<tr>
    <td><font face="Courier New, Andale Mono, monospace">RegExp.prototype 属性表示 </font><span style="line-height: 1.5;"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp" title="RegExp 构造函数创建了一个正则表达式对象，用于将文本与一个模式匹配。"><code>RegExp</code></a> </span><span style="font-family: 'Courier New', 'Andale Mono', monospace; line-height: 1.5;">构造函数的原型对象。</span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">395</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile">RegExp.prototype.compile()</a></td>
    <td><strong>Deprecated, JavaScript</strong></td>
</tr>
<tr>
    <td><code>已废弃的<strong>compile</strong></code><strong><code>()</code></strong> 方法被用于在脚本执行过程中（重新）编译正则表达式。与<code>RegExp</code>构造函数基本一样。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">396</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll">RegExp.prototype.dotAll</a></td>
    <td><strong>JavaScript, 修饰符, 正则表达式</strong></td>
</tr>
<tr>
    <td><strong><code>dotAll</code></strong> 属性表明是否在正则表达式中一起使用"<code>s</code>"修饰符（引入/s修饰符，使得.可以匹配任意单个字符）。<code>dotAll</code> 是一个只读的属性，属于单个正则表达式实例。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">397</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec">RegExp.prototype.exec()</a></td>
    <td><strong>
</tr>
<tr>
    <td><code><strong>exec() </strong></code>方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" title="值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。"><code>null</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">398</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags">RegExp.prototype.flags</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>flags</code></strong>属性返回一个字符串，由当前正则表达式对象的标志组成。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">399</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global">RegExp.prototype.global</a></td>
    <td><strong>JavaScript, Property, Prototype, RegExp</strong></td>
</tr>
<tr>
    <td><code><strong>global</strong></code> 属性表明正则表达式是否使用了 "<code>g</code>" 标志。<code>global</code> 是一个正则表达式实例的只读属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">400</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase">RegExp.prototype.ignoreCase</a></td>
    <td><strong>JavaScript, Property, Prototype, RegExp</strong></td>
</tr>
<tr>
    <td><code><strong>ignoreCase</strong></code> 属性表明正则表达式是否使用了 "<code>i</code>" 标志。<code>ignoreCase</code> 是正则表达式实例的只读属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">401</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline">RegExp.prototype.multiline</a></td>
    <td><strong>JavaScript, Property, Prototype, RegExp, Regular Expressions</strong></td>
</tr>
<tr>
    <td><code><strong>multiline</strong></code> 属性表明正则表达式是否使用了 "<code>m</code>" 标志。<code>multiline</code> 是正则表达式实例的一个只读属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">402</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source">RegExp.prototype.source</a></td>
    <td><strong>JavaScript, Property, Prototype, Reference, RegExp, Regular Expressions</strong></td>
</tr>
<tr>
    <td><strong><code>source</code></strong> 属性返回一个值为当前正则表达式对象的模式文本的字符串，该字符串不会包含正则字面量两边的斜杠以及任何的标志字符。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">403</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky">RegExp.prototype.sticky</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>sticky</code></strong> 属性反映了搜索是否具有粘性（ 仅从正则表达式的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex" title="lastIndex 是正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。"><code>lastIndex</code></a> 属性表示的索引处搜索 ）。<code>sticky</code> 是正则表达式对象的只读属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">404</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test">RegExp.prototype.test()</a></td>
    <td><strong>JavaScript, Method, Prototype, RegExp, Regular Expressions</strong></td>
</tr>
<tr>
    <td><code><strong>test()</strong></code> 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 <code>true</code> 或 <code>false</code>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">405</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toSource">RegExp.prototype.toSource()</a></td>
    <td><strong>JavaScript, Method, Non-standard, Prototype, RegExp</strong></td>
</tr>
<tr>
    <td>返回一个字符串,代表当前对象的源代码</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">406</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString">RegExp.prototype.toString()</a></td>
    <td><strong>JavaScript, Method, Prototype, RegExp</strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code> 返回一个表示该正则表达式的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">407</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode">RegExp.prototype.unicode</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>unicode</code></strong> 属性表明正则表达式带有"<code>u</code>" 标志。 <code>unicode</code> 是正则表达式独立实例的只读属性。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">408</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll">RegExp.prototype[@@matchAll]()</a></td>
    <td><strong>JavaScript, 正则表达式</strong></td>
</tr>
<tr>
    <td><strong><code>[@@matchAll]</code></strong>方法返回对字符串使用正则表达式的所有匹配项。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">409</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match">RegExp.prototype[@@match]()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>对<em>正则表达式</em>匹配<em>字符串</em>时，<strong><code>[@@match]()</code></strong>方法用于获取匹配结果。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">410</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace">RegExp.prototype[@@replace]()</a></td>
    <td><strong>JavaScript, RegExp, 正则表达式</strong></td>
</tr>
<tr>
    <td><strong><code>[@@replace]()</code></strong> 方法会在一个字符串中用给定的替换器，替换所有符合正则模式的匹配项，并返回替换后的新字符串结果。用来替换的参数可以是一个字符串或是一个针对每次匹配的回调函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">411</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search">RegExp.prototype[@@search]()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>[@@search]()</code></strong> 方法执行了一个在给定字符串中的一个搜索以取得匹配正则模式的项。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">412</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split">RegExp.prototype[@@split]()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>[@@split]()</code></strong> 方法切割 <a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a> 对象为一个其子字符串的数组 。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">413</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext">RegExp.rightContext ($')</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>rightContext </strong>非标准属性是正则表达式的静态和只读属性，含有最新匹配的右侧子串。 <code>RegExp.$'</code> 是这个属性的别名。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">414</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species">get RegExp[@@species]</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>RegExp[@@species]</strong></code> 访问器属性返回<code>RegExp</code> 的构造器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">415</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a></td>
    <td><strong>ECMAScript6, JavaScript, set, 集合</strong></td>
</tr>
<tr>
    <td><strong><code>Set</code></strong> 对象允许你存储任何类型的唯一值，无论是<a class="glossaryLink" href="/en-US/docs/Glossary/Primitive" title="原始值: In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, null, undefined, and symbol.">原始值</a>或者是对象引用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">416</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/prototype">Set.prototype</a></td>
    <td><strong>ECMAScript6, JavaScript, set, 属性</strong></td>
</tr>
<tr>
    <td><code><strong>Set</strong></code><strong><code>.prototype</code></strong>属性表示<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" title="Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。"><code>Set</code></a>构造器的原型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">417</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/add">Set.prototype.add()</a></td>
    <td><strong>ECMAScript6, JavaScript, Prototype, set, 原型, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>add()</strong></code> 方法用来向一个 <code>Set</code> 对象的末尾添加一个指定的值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">418</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/clear">Set.prototype.clear()</a></td>
    <td><strong>ECMAScript6, JavaScript, Prototype, set, 原型, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>clear()</strong></code> 方法用来清空一个 <code>Set</code> 对象中的所有元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">419</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/delete">Set.prototype.delete()</a></td>
    <td><strong>ECMAScript6, JavaScript, set, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>delete()</strong></code> 方法可以从一个 <code>Set</code> 对象中删除指定的元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">420</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/entries">Set.prototype.entries()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>entries() 方法返回一个新的迭代器对象 ，这个对象的元素是类似 [value, value] 形式的数组，value 是集合对象中的每个元素，迭代器对象元素的顺序即集合对象中元素插入的顺序。由于集合对象不像 Map 对象那样拥有 key，然而，为了与 Map 对象的 API 形式保持一致，故使得每一个 entry 的 key 和 value 都拥有相同的值，因而最终返回一个 [value, value] 形式的数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">421</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach">Set.prototype.forEach()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code>forEach</code> 方法会根据集合中元素的插入顺序，依次执行提供的回调函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">422</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/has">Set.prototype.has()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, set</strong></td>
</tr>
<tr>
    <td><strong>has() </strong>方法返回一个布尔值来指示对应的值value是否存在Set对象中。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">423</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/size">Set.prototype.size</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Property, set</strong></td>
</tr>
<tr>
    <td><strong>Size</strong>属性将会返回<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" title="Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。"><code>Set</code></a>对象中元素的个数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">424</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/values">Set.prototype.values()</a></td>
    <td><strong>ECMAScript 2015, set</strong></td>
</tr>
<tr>
    <td><code><strong>values()</strong></code> 方法返回一个 <code><strong>Iterator</strong></code>  对象，该对象按照原Set 对象元素的插入顺序返回其所有元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">425</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator">Set.prototype[@@iterator]()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The initial value of the <code><strong>@@iterator</strong></code> property is the same function object as the initial value of the <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/values" title="values() 方法返回一个 Iterator  对象，这个对象以插入 Set 对象的顺序包含了原 Set 对象里的每个元素。"><code>values</code></a> property.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">426</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species">get Set[@@species]</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Set[@@species]</strong></code> 访问器属性返回<code>Set</code>的构造函数.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">427</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer">SharedArrayBuffer</a></td>
    <td><strong>ArrayBuffer, Service Worker, Shared Memory, SharedArrayBuffer, TypedArrays, Web Worker, Worker, 共享内存, 实验的, 构造函数</strong></td>
</tr>
<tr>
    <td><strong><code>SharedArrayBuffer</code></strong> 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https:
</tr><tr>

</tr><tr>
    <td rowspan="2">428</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/prototype">SharedArrayBuffer.prototype</a></td>
    <td><strong>Prototype, SharedArrayBuffer</strong></td>
</tr>
<tr>
    <td><strong><code>SharedArrayBuffer.prototype</code></strong>  属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer" title="SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。"><code>SharedArrayBuffer</code></a>  对象的原型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">429</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength">SharedArrayBuffer.prototype.byteLength</a></td>
    <td><strong>SharedArrayBuffer</strong></td>
</tr>
<tr>
    <td><code><strong>byteLength</strong></code> 访问器属性表示以字节为单位的一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer" title="SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。"><code>SharedArrayBuffer</code></a>的长度。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">430</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice">SharedArrayBuffer.prototype.slice()</a></td>
    <td><strong>SharedArrayBuffer, slice</strong></td>
</tr>
<tr>
    <td><code><strong>SharedArrayBuffer.prototype.slice()</strong></code> 方法返回一个新的<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer" title="SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。"><code>SharedArrayBuffer</code></a> 其内容是该SharedArrayBuffer的字节从开始包含，直到结束，独占的副本。如果开始或结束是负的，它指的是从数组末尾开始的索引。此方法与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" title="slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。"><code>Array.prototype.slice()</code></a> 具有相同的算法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">431</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">String</a></td>
    <td><strong>JavaScript, String, 参考, 字符串</strong></td>
</tr>
<tr>
    <td><strong><code>String</code></strong> 全局对象是一个用于字符串或一个字符序列的构造函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">432</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode">String.fromCharCode()</a></td>
    <td><strong>ASCII码变成字符串, fromCharCode</strong></td>
</tr>
<tr>
    <td>静态 <strong><code>String.fromCharCode()</code></strong> 方法返回由指定的UTF-16代码单元序列创建的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">433</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint">String.fromCodePoint()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>String.fromCodePoint()</code> 静态方法返回使用指定的代码点序列创建的字符串。</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">434</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length">String.length</a></td>
    <td><strong>JavaScript, Property, Prototype, String</strong></td>
</tr>
<tr>
    <td><strong>length</strong> 属性表示一个字符串的长度。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">435</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/prototype">String.prototype</a></td>
    <td><strong>JavaScript, 原型, 参考, 字符串, 属性</strong></td>
</tr>
<tr>
    <td><code><strong>String.prototype</strong></code> 属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a>原型对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">436</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/anchor">String.prototype.anchor()</a></td>
    <td><strong>HTML, JavaScript, Method, Prototype, String</strong></td>
</tr>
<tr>
    <td><code><strong>anchor()</strong></code> 方法创建一个 <a href="/zh-CN/docs/Web/HTML/Element/a" title="HTML &lt;a> 元素（或称锚元素）可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。"><code>&lt;a&gt;</code></a> HTML 锚元素，被用作超文本靶标（hypertext target）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">437</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/big">String.prototype.big()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>big()</code></strong>方法的作用是创建一个使字符串显示大号字体的<a href="/zh-CN/docs/Web/HTML/Element/big" title="The HTML Big Element (&lt;big>) 会使字体加大一号（例如从小号(small)到中号(medium)，从大号(large)到加大(x-large)），最大不超过浏览器的最大字体。"><code>&lt;big&gt;</code></a>标签。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">438</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/blink">String.prototype.blink()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>blink()</code></strong>方法创建使字符串闪烁的 <a href="/zh-CN/docs/Web/HTML/Element/blink" title="HTML Blink Element (&lt;blink>)不是标准元素，它会使包含其中的文本闪烁。"><code>&lt;blink&gt;</code></a> HTML 元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">439</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/bold">String.prototype.bold()</a></td>
    <td><strong>Deprecated, HTML wrapper methods, JavaScript</strong></td>
</tr>
<tr>
    <td><strong><code>bold() </code></strong><code>方法会创建</code> HTML 元素 “b”，并将字符串加粗展示。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">440</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt">String.prototype.charAt()</a></td>
    <td><strong>String.prototype.charAt()</strong></td>
</tr>
<tr>
    <td><strong>charAt()</strong> 方法从一个字符串中返回指定的字符。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">441</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt">String.prototype.charCodeAt()</a></td>
    <td><strong>JavaScript, String, Unicode, 参考, 字符串, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>charCodeAt()</strong></code> 方法返回0到65535之间的整数，表示给定索引处的UTF-16代码单元 (在 Unicode 编码单元表示一个单一的 UTF-16 编码单元的情况下，UTF-16 编码单元匹配 Unicode 编码单元。但在——例如 Unicode 编码单元 &gt; 0x10000 的这种——不能被一个 UTF-16 编码单元单独表示的情况下，只能匹配 Unicode 代理对的第一个编码单元) 。如果你想要整个代码点的值，使用 <strong><code>codePointAt</code></strong>()。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">442</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt">String.prototype.codePointAt()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>codePointAt()</code></strong> 方法返回 一个 Unicode 编码点值的非负整数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">443</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/concat">String.prototype.concat()</a></td>
    <td><strong>JavaScript, Method, Prototype, String</strong></td>
</tr>
<tr>
    <td><strong><code>concat()</code></strong> 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">444</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith">String.prototype.endsWith()</a></td>
    <td><strong>JavaScript, Method, Prototype, Reference, String, 原型, 参考, 字符串, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>endsWith()</strong></code>方法用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 <code>true</code> 或 <code>false</code>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">445</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fixed">String.prototype.fixed()</a></td>
    <td><strong>Deprecated, HTML wrapper methods, JavaScript</strong></td>
</tr>
<tr>
    <td>fixed()方法创建了一个&lt;tt&gt;标签元素将字符串包裹起来，从而让这个字符串里面的内容具有固定间距。&lt;/tt&gt;</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">446</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor">String.prototype.fontcolor()</a></td>
    <td><strong>Deprecated, HTML wrapper methods, JavaScript, Method, Prototype, Reference, String</strong></td>
</tr>
<tr>
    <td><strong><code>fontcolor()</code></strong><font><font>方法创建一个<a href="/zh-CN/docs/Web/HTML/Element/font" title="HTML Font 元素（&lt;font>）定义了该内容的字体大小、顏色与表现。"><code>&lt;font&gt;</code></a>的HTML元素让字符串被显示成指定的字体颜色。</font></font></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">447</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize">String.prototype.fontsize()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <strong><code>fontsize()</code></strong> method creates a <a href="/zh-CN/docs/Web/HTML/Element/font" title="HTML Font 元素（&lt;font>）定义了该内容的字体大小、顏色与表现。"><code>&lt;font&gt;</code></a> HTML element that causes a string to be displayed in the specified font size.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">448</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes">String.prototype.includes()</a></td>
    <td><strong>JavaScript, Method, Monkey patching, Prototype, String, String.prototype.includes()</strong></td>
</tr>
<tr>
    <td><strong><code>includes()</code> </strong>方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">449</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">String.prototype.indexOf()</a></td>
    <td><strong>JavaScript, String, 原型, 参考, 字符串, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>indexOf()</strong></code> 方法返回调用它的 <a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a> 对象中第一次出现的指定值的索引，从 <code>fromIndex</code> 处进行搜索。如果未找到该值，则返回 -1。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">450</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/italics">String.prototype.italics()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <strong><code>italics()</code></strong> method creates an <a href="/zh-CN/docs/Web/HTML/Element/i" title="HTML元素 &lt;i> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。"><code>&lt;i&gt;</code></a> HTML element that causes a string to be italic.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">451</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf">String.prototype.lastIndexOf()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>lastIndexOf()</strong></code> 方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。从该字符串的后面向前查找，从 <code>fromIndex</code> 处开始。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">452</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/link">String.prototype.link()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>link()</code></strong> 方法创建一个 HTML 元素 <a href="/zh-CN/docs/Web/HTML/Element/a" title="HTML &lt;a> 元素（或称锚元素）可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。"><code>&lt;a&gt;</code></a> ，用该字符串作为超链接的显示文本，参数作为指向另一个 URL 的超链接。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">453</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">String.prototype.localeCompare()</a></td>
    <td><strong>Internationalization, JavaScript, String.prototype.localeCompare(), 原型, 参考, 字符串, 方法</strong></td>
</tr>
<tr>
    <td><strong><code>localeCompare()</code></strong> 方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">454</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match">String.prototype.match()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>match()</code> </strong>方法检索返回一个字符串匹配正则表达式的的结果。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">455</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll">String.prototype.matchAll()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>matchAll()</code></strong> 方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">456</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/normalize">String.prototype.normalize()</a></td>
    <td><strong>ECMAScript6, Experimental, Expérimental(2), JavaScript, Method, String, Unicode</strong></td>
</tr>
<tr>
    <td><strong>normalize()</strong> 方法会按照指定的一种 Unicode 正规形式将当前字符串正规化.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">457</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd">String.prototype.padEnd()</a></td>
    <td><strong>JavaScript, Method, Reference, String</strong></td>
</tr>
<tr>
    <td><strong><code>padEnd()</code></strong>  方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">458</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart">String.prototype.padStart()</a></td>
    <td><strong>ECMAScript 2017, JavaScript, Method, Reference, String, String.padStart()</strong></td>
</tr>
<tr>
    <td><strong><code>padStart()</code></strong> 方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">459</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/quote">String.prototype.quote()</a></td>
    <td><strong>JavaScript, Method, Obsolete, Prototype, String</strong></td>
</tr>
<tr>
    <td>将字符串中包含的特殊字符进行转义(反斜杠),然后在字符串两边各加上一个双引号(<code>"</code>)并返回,并不修改原字符串.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">460</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/repeat">String.prototype.repeat()</a></td>
    <td><strong>ECMAScript 2015, ES 6, JavaScript, Method, Prototype, Reference, String, polyfill, repeat(), 填充</strong></td>
</tr>
<tr>
    <td><strong><code>repeat()</code></strong> 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">461</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">String.prototype.replace()</a></td>
    <td><strong>JavaScript, Method, Prototype, Regular, String</strong></td>
</tr>
<tr>
    <td><strong><code>replace()</code></strong> 方法返回一个由替换值（<code>replacement</code>）替换一些或所有匹配的模式（<code>pattern</code>）后的新字符串。模式可以是一个字符串或者一个<a href="/zh-CN/docs/Web/JavaScript/Reference/RegExp">正则表达式</a>，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">462</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search">String.prototype.search()</a></td>
    <td><strong>JavaScript, 原型, 参考, 字符串, 方法, 正则表达式</strong></td>
</tr>
<tr>
    <td><strong><code>search()</code></strong> 方法执行正则表达式和 <a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a> 对象之间的一个搜索匹配。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">463</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice">String.prototype.slice()</a></td>
    <td><strong>JavaScript, Method, Prototype, String, 原型, 字符串, 方法</strong></td>
</tr>
<tr>
    <td><strong><code>slice()</code></strong> 方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">464</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/small">String.prototype.small()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>small()</code></strong> 方法的作用是创建一个使字符串显示小号字体的 <a href="/zh-CN/docs/Web/HTML/Element/small" title="HTML 中的元素將使文本的字体变小一号。(例如从大变成中等，从中等变成小，从小变成超小)。在HTML5中，除了它的样式含义，这个元素被重新定义为表示边注释和附属细则，包括版权和法律文本。"><code>&lt;small&gt;</code></a> 标签。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">465</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split">String.prototype.split()</a></td>
    <td><strong>JavaScript, Method, Prototype, Reference, Regular Expressions, String</strong></td>
</tr>
<tr>
    <td><code><strong>split() </strong></code>方法使用指定的分隔符字符串将一个<a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a>对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">466</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith">String.prototype.startsWith()</a></td>
    <td><strong>JavaScript, Prototype, String, 原型, 参考, 字符串, 方法</strong></td>
</tr>
<tr>
    <td><code><strong>startsWith()</strong></code> 方法用来判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 <code>true</code> 或 <code>false</code>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">467</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/strike">String.prototype.strike()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>strike()</code></strong>方法创建<a href="/zh-CN/docs/Web/HTML/Element/strike" title="HTML &lt;strike> 元素（或者 HTML 删除线元素）在文本上放置删除线。"><code>&lt;strike&gt;</code></a> HTML 元素，使字符串展示为被删除的文本。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">468</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/sub">String.prototype.sub()</a></td>
    <td><strong>String.sub(), 已废弃</strong></td>
</tr>
<tr>
    <td><strong><code>sub()</code></strong>方法创建一个 <a href="/zh-CN/docs/Web/HTML/Element/sub" title="HTML &lt;sub> 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。"><code>&lt;sub&gt;</code></a> HTML 元素，使字符串展示为下标。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">469</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr">String.prototype.substr()</a></td>
    <td><strong>String.prototype.substr()</strong></td>
</tr>
<tr>
    <td><code><strong>substr()</strong></code> 方法返回一个字符串中从指定位置开始到指定字符数的字符。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">470</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring">String.prototype.substring()</a></td>
    <td><strong>String.prototype.substring()</strong></td>
</tr>
<tr>
    <td><strong><code>substring() </code></strong>方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">471</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/sup">String.prototype.sup()</a></td>
    <td><strong>String.prototype.sup()</strong></td>
</tr>
<tr>
    <td><strong><code>sup()</code></strong>方法创建 一个<a href="/zh-CN/docs/Web/HTML/Element/sup" title="HTML &lt;sup> 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。"><code>&lt;sup&gt;</code></a>HTML 元素，使字符串显示为上标。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">472</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase">String.prototype.toLocaleLowerCase()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>toLocaleLowerCase()</code></strong>方法根据任何特定于语言环境的案例映射，返回调用字符串值转换为小写的值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">473</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase">String.prototype.toLocaleUpperCase()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>toLocaleUpperCase()</code></strong> 使用本地化（locale-specific）的大小写映射规则将输入的字符串转化成大写形式并返回结果字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">474</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase">String.prototype.toLowerCase()</a></td>
    <td><strong>JavaScript, Method, Prototype, String, toLowerCase()</strong></td>
</tr>
<tr>
    <td><code><strong>toLowerCase()</strong></code> 会将调用该方法的字符串值转为小写形式，并返回。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">475</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toSource">String.prototype.toSource()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>toSource()</code></strong> 方法返回一个代表对象的源代码。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">476</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toString">String.prototype.toString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code> 方法返回指定对象的字符串形式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">477</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">String.prototype.toUpperCase()</a></td>
    <td><strong>JavaScript, Method, Prototype, String</strong></td>
</tr>
<tr>
    <td><code><strong>toUpperCase()</strong></code> 将调用该方法的字符串值转换为大写形式，并返回。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">478</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim">String.prototype.trim()</a></td>
    <td><strong>ECMAScript5, JavaScript, Method, Prototype, String, String.prototype.trim()</strong></td>
</tr>
<tr>
    <td><strong><code>trim() </code></strong>方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">479</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft">String.prototype.trimLeft()</a></td>
    <td><strong>JavaScript, Method, Prototype, String</strong></td>
</tr>
<tr>
    <td>一个新字符串，表示从其开头（左端）剥离空格的调用字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">480</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight">String.prototype.trimRight()</a></td>
    <td><strong>JavaScript, Method, Prototype, String</strong></td>
</tr>
<tr>
    <td><code><strong>trimRight()</strong> </code>方法从一个字符串的右端移除空白字符。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">481</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf">String.prototype.valueOf()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>valueOf()</strong></code> 方法返回一个<a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a>对象的原始值（primitive value）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">482</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator">String.prototype[@@iterator]()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>[@@iterator]()</code></strong> 方法返回一个新的Iterator对象，它遍历字符串的代码点，返回每一个代码点的字符串值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">483</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/raw">String.raw()</a></td>
    <td><strong>JavaScript, Method, Reference, String, 参考, 字符串, 方法</strong></td>
</tr>
<tr>
    <td><strong>String.raw()</strong> 是一个<a href="/zh-CN/docs/Web/JavaScript/Reference/template_strings">模板字符串</a>的标签函数，它的作用类似于 Python 中的字符串前缀 <code>r</code> 和 C
</tr><tr>

</tr><tr>
    <td rowspan="2">484</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a></td>
    <td><strong>ECMAScript6, JavaScript, Symbol</strong></td>
</tr>
<tr>
    <td><code>Symbol()</code>函数会返回<strong>symbol</strong>类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法："<code>new Symbol()</code>"。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">485</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator">Symbol.asyncIterator</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Symbol.asyncIterator</strong></code> 符号指定了一个对象的默认AsyncIterator。如果一个对象设置了这个属性，它就是异步可迭代对象，可用于<code><a href="/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of">for await...of</a></code>循环。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">486</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for">Symbol.for()</a></td>
    <td><strong>JavaScript, Method, Symbol</strong></td>
</tr>
<tr>
    <td><code><strong>Symbol.for(key)</strong></code> 方法会根据给定的键 <code>key</code>，来从运行时的 symbol 注册表中找到对应的 symbol，如果找到了，则返回它，否则，新建一个与该键关联的 symbol，并放入全局 symbol 注册表中。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">487</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance">Symbol.hasInstance</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Symbol.hasInstance 用于判断某对象是否为某构造器的实例。</code></strong> 因此你可以用它自定义 <a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" title="instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置"><code>instanceof</code></a> 操作符在某个类上的行为。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">488</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable">Symbol.isConcatSpreadable</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>内置的<strong><code>Symbol.isConcatSpreadable</code></strong><code>符号用于配置某对象作为</code><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" title="concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。"><code>Array.prototype.concat()</code></a>方法的参数时是否展开其数组元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">489</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator">Symbol.iterator</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Property, Symbol</strong></td>
</tr>
<tr>
    <td><strong>Symbol.iterator </strong>为每一个对象定义了默认的迭代器。该迭代器可以被 <code><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of">for...of</a></code> 循环使用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">490</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor">Symbol.keyFor()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Symbol.keyFor(sym)</strong></code> 方法用来获取 symbol 注册表中与某个 symbol 关联的键。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">491</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match">Symbol.match</a></td>
    <td><strong>ECMAScript6, JavaScript, Symbol, 属性</strong></td>
</tr>
<tr>
    <td><code><strong>Symbol.match </strong></code>指定了匹配的是正则表达式而不是字符串。<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" title="match() 方法检索返回一个字符串匹配正则表达式的的结果。"><code>String.prototype.match()</code></a> 方法会调用此函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">492</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll">Symbol.matchAll</a></td>
    <td><strong>JavaScript, Property, Reference, Symbol</strong></td>
</tr>
<tr>
    <td><code><strong>Symbol.matchAll</strong></code> 返回一个迭代器，该迭代器根据字符串生成正则表达式的匹配项。此函数可以被 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll" title="matchAll() 方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。"><code>String.prototype.matchAll()</code></a> 方法调用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">493</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/prototype">Symbol.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Symbol</strong></code><strong><code>.prototype</code></strong> 表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" title='Symbol()函数会返回symbol类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法："new Symbol()"。'><code>Symbol</code></a> 构造函数的原型。.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">494</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description">Symbol.prototype.description</a></td>
    <td><strong>JavaScript, Property, Prototype, Symbol</strong></td>
</tr>
<tr>
    <td><code><strong>description</strong></code> 是一个只读属性，它会返回 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" title='Symbol()函数会返回symbol类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法："new Symbol()"。'><code>Symbol</code></a> 对象的可选描述的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">495</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toSource">Symbol.prototype.toSource()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toSource()</strong></code> 方法返回代表该对象源码的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">496</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString">Symbol.prototype.toString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code> 方法返回当前 symbol 对象的字符串表示。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">497</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf">Symbol.prototype.valueOf()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>valueOf()</strong></code> 方法返回当前 symbol 对象所包含的 symbol 原始值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">498</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive">Symbol.prototype[@@toPrimitive]</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>[@@toPrimitive]()</strong></code> 方法可将 Symbol 对象转换为原始值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">499</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace">Symbol.replace</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Symbol.replace</strong></code> 这个属性指定了当一个字符串替换所匹配字符串时所调用的方法。<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" title="replace() 方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。"><code>String.prototype.replace()</code></a> 方法会调用此方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">500</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search">Symbol.search</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code>Symbol.search 指定了一个搜索方法，这个方法接受用户输入的正则表达式，返回该正则表达式在字符串中匹配到的下标，这个方法由以下的方法来调用 </code><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search" title="search() 方法执行正则表达式和 String 对象之间的一个搜索匹配。"><code>String.prototype.search()</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">501</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species">Symbol.species</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Property, Symbol</strong></td>
</tr>
<tr>
    <td>知名的<strong> </strong><code><strong>Symbol.species</strong></code> 是个函数值属性，其被构造函数用以创建派生对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">502</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split">Symbol.split</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Symbol.split</strong></code> 指向 一个正则表达式的索引处分割字符串的方法。 这个方法通过 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" title="split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。"><code>String.prototype.split()</code></a> 调用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">503</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive">Symbol.toPrimitive</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>Symbol.toPrimitive</strong></code> 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">504</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag">Symbol.toStringTag</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Symbol.toStringTag</code></strong> 是一个内置 symbol，它通常作为对象的属性键使用，对应的属性值应该为字符串类型，这个字符串用来表示该对象的自定义类型标签，通常只有内置的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" title="toString() 方法返回一个表示该对象的字符串。"><code>Object.prototype.toString()</code></a> 方法会去读取这个标签并把它包含在自己的返回值里。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">505</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables">Symbol.unscopables</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Property, Symbol</strong></td>
</tr>
<tr>
    <td><strong><code>Symbol.unscopables </code></strong>指用于指定对象值，其对象自身和继承的从关联对象的 with 环境绑定中排除的属性名称。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">506</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError">SyntaxError</a></td>
    <td><strong>Error, JavaScript, Object, SyntaxError</strong></td>
</tr>
<tr>
    <td><code><strong>SyntaxError</strong></code> 对象代表尝试解析语法上不合法的代码的错误。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">507</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/prototype">SyntaxError.prototype</a></td>
    <td><strong>Error, JavaScript, Property, Prototype, SyntaxError</strong></td>
</tr>
<tr>
    <td><code><strong>SyntaxError.prototype</strong></code> 属性表示<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a> 构造器的原型.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">508</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError">TypeError</a></td>
    <td><strong>Error, JavaScript, Object, Reference, Référence(2), TypeError, 参考, 类型错误</strong></td>
</tr>
<tr>
    <td><code><strong>TypeError（类型错误）</strong></code> 对象用来表示值的类型非预期类型时发生的错误。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">509</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError/prototype">TypeError.prototype</a></td>
    <td><strong>Error, JavaScript, TypeError, 原型, 错误</strong></td>
</tr>
<tr>
    <td><code><strong>TypeError.prototype</strong></code> 属性表示 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a>构造函数的原型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">510</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">TypedArray</a></td>
    <td><strong>JavaScript, TypedArray, TypedArrays</strong></td>
</tr>
<tr>
    <td>一个<strong>TypedArray </strong>对象描述一个底层的<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">二进制数据缓存区</a>的一个类似数组(array-like)视图。事实上，没有名为 <strong>TypedArray</strong>的全局对象，也没有一个名为的 <strong>TypedArray</strong>构造函数。相反，有许多不同的全局对象，下面会列出这些针对特定元素类型的类型化数组的构造函数。在下面的页面中，你会找到一些不管什么类型都公用的属性和方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">511</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT">TypedArray.BYTES_PER_ELEMENT</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>TypedArray.BYTES_PER_ELEMENT</strong></code> 属性代表了强类型数组中每个元素所占用的字节数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">512</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from">TypedArray.from()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong><em>TypedArray</em>.from()</strong></code> 方法 从一个类数组或者可迭代对象中创建一个新类型数组。 这个方法和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" title="Array.from() 方法从一个类似数组或可迭代对象中创建一个新的，浅拷贝的数组实例。"><code>Array.from()</code></a>类似。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">513</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name">TypedArray.name</a></td>
    <td><strong>JavaScript, Property, TypedArray, TypedArrays, 构造函数</strong></td>
</tr>
<tr>
    <td><code><strong><em>TypedArray</em>.name</strong></code> ?属性是描述类型数组构造名的字符串值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">514</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of">TypedArray.of()</a></td>
    <td><strong>Typed, TypedArray, TypedArray.fo(), TypedArray.from()</strong></td>
</tr>
<tr>
    <td><code><strong><em>TypedArray</em>.of()</strong></code> 方法创建一个具有可变数量参数的新<a class="new" href="/en-US/docs/" rel="nofollow">类型数组</a> 。此方法几乎与<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of" title="Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。"><code>Array.of()</code></a> 相同。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">515</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype">TypedArray.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>TypedArray</strong></code><strong><code>.prototype</code></strong>属性表示<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" title="一个TypedArray 对象描述一个底层的二进制数据缓存区的一个类似数组(array-like)视图。事实上，没有名为 TypedArray的全局对象，也没有一个名为的 TypedArray构造函数。相反，有许多不同的全局对象，下面会列出这些针对特定元素类型的类型化数组的构造函数。在下面的页面中，你会找到一些不管什么类型都公用的属性和方法。"><code>TypedArray</code></a>构造器的原型.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">516</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer">TypedArray.prototype.buffer</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>buffer</code></strong>访问器属性表示由<em>TypedArray</em>在构造期间引用的<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request."><code>ArrayBuffer</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">517</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength">TypedArray.prototype.byteLength</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>byteLength</code></strong>访问器属性表示类型化数组的长度（字节数）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">518</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset">TypedArray.prototype.byteOffset</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>byteOffset</code></strong> 访问器属性表示类型化数组距离其<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https:
</tr><tr>

</tr><tr>
    <td rowspan="2">519</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin">TypedArray.prototype.copyWithin()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>copyWithin()</strong></code>方法将数组中的元素序列复制到以<code>target</code>起始的位置。 副本取自第二个参数和第三个参数 <code>start</code> 和<code>end</code>的位置下标。<code>end</code> 参数是可选的，默认为数组长度。这个方法的算法和<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin" title="改变了的数组。"><code>Array.prototype.copyWithin</code></a><em>相同。</em> <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">520</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries">TypedArray.prototype.entries()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <strong><code>entries()</code></strong>返回新的<code>Array Iterator</code>对象，包含数组每个下标处的键值对。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">521</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every">TypedArray.prototype.every()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>every()</strong></code> 方法测试类型化数组的所有元素是否都能够通过由提供函数实现的测试。这个方法的算法与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every" title="every() 方法测试数组的所有元素是否都通过了指定函数的测试。"><code>Array.prototype.every()</code></a>相同。 <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">522</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill">TypedArray.prototype.fill()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>fill() </strong>方法将</code>类型化数组中的从起始索引到终止索引内的全部元素。这个方法的算法和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" title="fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。"><code>Array.prototype.fill()</code></a> 相同。 <em>TypedArray</em> 是这里的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">523</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter">TypedArray.prototype.filter()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>filter()</strong></code>创建新的类型化数组，含有所有通过了测试的元素，测试由提供的函数实现。这个方法的算法和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" title="filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。"><code>Array.prototype.filter()</code></a><em>相同。</em> <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">524</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find">TypedArray.prototype.find()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>如果某个元素满足所提供的测试函数，<code><strong>find()</strong></code>方法返回类型化数组中的 <strong>值</strong>。否则返回<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。"><code>undefined</code></a> 。 <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">525</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex">TypedArray.prototype.findIndex()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>如果某个元素满足所提供的测试函数，<code><strong>findIndex()</strong></code>方法返回类型化数组中的 <strong>下标</strong>。否则返回 -1。 <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">526</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach">TypedArray.prototype.forEach()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>forEach()</strong></code>方法对类型化数组的每个元素调用提供的函数。 这个方法的算法和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" title="forEach() 方法对数组的每个元素执行一次提供的函数。"><code>Array.prototype.forEach()</code></a><em>相同。</em> <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">527</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes">TypedArray.prototype.includes()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>includes()</strong></code>方法判断类型化数组中是否含有特定元素，并相应返回<code>true</code> 或者<code>false</code> ，这个方法的算法和<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" title="includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。"><code>Array.prototype.includes()</code></a><em>相同。</em> <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">528</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf">TypedArray.prototype.indexOf()</a></td>
    <td><strong>TypedArray, Uint8Array</strong></td>
</tr>
<tr>
    <td><code><strong>indexOf()</strong></code> 方法返回在类型数组中可以找到给定元素的第一个索引，如果不存在，则返回-1。 方法具有与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" title="indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。"><code>Array.prototype.indexOf()</code></a> 相同的算法。 TypedArray是这里的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">529</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join">TypedArray.prototype.join()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>join()</strong></code>方法将数组中所有元素连接为一个字符串。这个方法的算法和<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join" title="join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。"><code>Array.prototype.join()</code></a><em>相同。</em> <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">530</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys">TypedArray.prototype.keys()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>keys()</code></strong>方法返回新的 <code>Array Iterator</code> 对象，包含数组中每个下标的键。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">531</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf">TypedArray.prototype.lastIndexOf()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>lastIndexOf()</strong></code> 方法返回在类型数组中可以找到给定元素的最后一个索引，如果不存在，则返回-1。 方法具有与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf" title="lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。"><code>Array.prototype.lastIndexOf()</code></a> 相同的算法。 TypedArray是这里的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">532</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length">TypedArray.prototype.length</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>length</code></strong>访问器属性表示类型化数组的长度（元素数）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">533</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map">TypedArray.prototype.map()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>map()</strong></code>方法对类型化数组的每个元素调用提供的函数，并使用结果来创建新的类型化数组。 这个方法的算法和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" title="map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。"><code>Array.prototype.map()</code></a><em>相同。</em> <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">534</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move">TypedArray.prototype.move()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>move()</code></strong>方法将数组中的元素序列复制到以<code>target</code>起始的位置。但是，这个非标准方法已经被<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin" title="copyWithin()方法将数组中的元素序列复制到以target起始的位置。 副本取自第二个参数和第三个参数 start 和end的位置下标。end 参数是可选的，默认为数组长度。这个方法的算法和Array.prototype.copyWithin相同。 TypedArray 是这里的 类型化数组类型 之一。"><code>TypedArray.prototype.copyWithin()</code></a> 标准方法取代。<em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">535</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce">TypedArray.prototype.reduce()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>reduce()</strong></code> 方法接受一个函数作为参数，这个函数作为一个累加器，从左到右遍历整个类型数组，最后返回一个单一的值. 这个方法和<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" title="reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。"><code>Array.prototype.reduce()</code></a>使用了同样的算法. <em>TypedArray</em> 是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">536</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight">TypedArray.prototype.reduceRight()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>reduceRight()</strong></code>在累加器和类型化数组的每个元素上（从右到左）调用函数，使其归约为单一的值。这个方法的算法和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight" title="reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。"><code>Array.prototype.reduceRight()</code></a>相同。 <em>TypedArray</em> 是这里的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">537</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse">TypedArray.prototype.reverse()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>reverse()</strong></code>方法原地翻转类型化数组。类型化数组的第一个元素变为最后一个，最后一个变为第一个。这个方法的算法和<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" title="reverse() 方法将数组中元素的位置颠倒。"><code>Array.prototype.reverse()</code></a><em>相同。</em> <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">538</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set">TypedArray.prototype.set()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>set()</code></strong> 方法用于从指定数组中读取值，并将其存储在类型化数组中。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">539</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice">TypedArray.prototype.slice()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>slice()</strong></code>方法返回一个typed array的部分类型数组对象，数组内容采用浅拷贝方式. 方法采用与 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" title="slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。"><code>Array.prototype.slice()</code></a>相同的算法<em>.</em> <em>类型数组</em>是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">540</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some">TypedArray.prototype.some()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>这个 <code><strong>some()</strong></code> 方法检测 <em>TypedArray</em> 的一些元素是否通过所提供函数的测试. 这个方法和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" title="some() 方法测试是否至少有一个元素可以通过被提供的函数方法。该方法返回一个Boolean类型的值。"><code>Array.prototype.some()</code></a><em> 相同.</em> <em>TypedArray</em> 是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">541</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort">TypedArray.prototype.sort()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>sort()</strong></code>方法<em>原地</em>排序类型化数组的元素，并且返回类型化数组。这个方法的算法和<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" title="sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串Unicode码点。"><code>Array.prototype.sort()</code></a><em>相同。</em> <em>TypedArray</em> 是这里的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">542</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray">TypedArray.prototype.subarray()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>No summary!</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">543</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString">TypedArray.prototype.toLocaleString()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, TypedArray</strong></td>
</tr>
<tr>
    <td><code><strong>toLocaleString()</strong></code>方法返回一个字符串，表明该类型化数组的元素。这些元素被转化为字符串并由一个区域设置指定的分隔符（例如逗号 “,”）分隔。这个方法与<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString" title='toLocaleString() 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 ","）隔开。'><code>Array.prototype.toLocaleString()</code></a>拥有相同的算法。同时，由于类型化数组的元素都是数，将每个元素转化为字符串的算法与<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" title="toLocaleString() 方法返回这个数字在特定语言环境下的表示字符串。"><code>Number.prototype.toLocaleString()</code></a>是相同的。（类型化数组）的是<a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">544</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString">TypedArray.prototype.toString()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>toString()</strong></code>方法返回一个表示指定数组及其元素的字符串。这个方法的算法和<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString" title="toString() 返回一个字符串，表示指定的数组及其元素。"><code>Array.prototype.toString()</code></a><em>一样。</em><em>TypedArray</em> 在这是<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">545</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values">TypedArray.prototype.values()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>values()</code></strong>返回新的 <code>Array Iterator</code> 对象，包含数组中每个下标处的值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">546</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator">TypedArray.prototype[@@iterator]()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>@@iterator 的初始值是和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values" title="values()返回新的 Array Iterator 对象，包含数组中每个下标处的值。"><code>values</code></a> 属性的初始值相同的对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">547</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@species">get TypedArray[@@species]</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>TypedArray[@@species]</strong></code> 访问器属性返回<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
</tr><tr>

</tr><tr>
    <td rowspan="2">548</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError">URIError</a></td>
    <td><strong>Error, JavaScript, URIError, 对象</strong></td>
</tr>
<tr>
    <td>URIError 对象用来表示以一种错误的方式使用全局URI处理函数而产生的错误。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">549</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError/prototype">URIError.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>所有的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError" title="URIError 对象用来表示以一种错误的方式使用全局URI处理函数而产生的错误。"><code>URIError</code></a> 实例都继承自 <code>URIError.prototype</code>。 可以通过原型(prototype) 给所有的实例添加属性或者方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">550</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array">Uint16Array</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <strong><code>Uint16Array</code></strong> typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">551</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array">Uint32Array</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Uint32Array</code></strong>表示一个由基于平台字节序的32位无符号字节组成的数组.如果需要对字节顺序进行控制(译者注:即 littleEndian 或 bigEndian),请使用<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" title="DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，在读写时不用考虑平台字节序问题。"><code>DataView</code></a>代替.数组中每个元素的初始值都是0.一旦创建，你可以用对象的方法引用数组里的元素，或者使用标准的数组索引语法（即，使用中括号）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">552</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array">Uint8Array</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Uint8Array</code></strong> 数组类型表示一个8位无符号整型数组，创建时内容被初始化为0。创建完后，可以以对象的方式或使用数组下标索引的方式引用数组中的元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">553</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray">Uint8ClampedArray</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>Uint8ClampedArray</code>（8位无符号整型固定数组）</strong> 类型化数组表示一个由值固定在0-255区间的8位无符号整型组成的数组；如果你指定一个在 [0,255] 区间外的值，它将被替换为0或255；如果你指定一个非整数，那么它将被设置为最接近它的整数。（数组）内容被初始化为0。一旦（数组）被创建，你可以使用对象的方法引用数组里的元素，或使用标准的数组索引语法（即使用方括号标记）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">554</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap</a></td>
    <td><strong>ECMAScript 2015, JavaScript, WeakMap</strong></td>
</tr>
<tr>
    <td><strong><code>WeakMap</code></strong> 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">555</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/prototype">WeakMap.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>WeakMap</strong></code><strong><code>.prototype</code></strong>属性表现为 <a href="/zh-CN/docs/Web/JavaScript/Reference/WeakMap" title="此页面仍未被本地化, 期待您的翻译!"><code>WeakMap</code></a>的构造器。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">556</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear">WeakMap.prototype.clear()</a></td>
    <td><strong>JavaScript, Method, WeakMap, clear()</strong></td>
</tr>
<tr>
    <td><code><strong>clear()</strong></code>用来从 <code>WeakMap对象中移除所有元素。</code>但不再是ECMAScript和它的实现部分。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">557</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete">WeakMap.prototype.delete()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>delete()</strong></code> 方法可以从一个 <code>WeakMap</code> 对象中删除指定的元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">558</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get">WeakMap.prototype.get()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>get()</strong></code> 方法返回  <code>WeakMap</code> 指定的元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">559</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has">WeakMap.prototype.has()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>has()</strong></code> 方法根据WeakMap对象的元素中是否存在key键返回一个boolean值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">560</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set">WeakMap.prototype.set()</a></td>
    <td><strong>JavaScript, Method, WeakMap</strong></td>
</tr>
<tr>
    <td><code><strong>set()</strong></code> 方法根据指定的<code>key</code>和<code>value在</code> <code>WeakMap</code>对象中添加新/更新元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">561</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet">WeakSet</a></td>
    <td><strong>WeakSet</strong></td>
</tr>
<tr>
    <td><strong><code>WeakSet</code></strong> 对象允许你将<em>弱保持对象</em>存储在一个集合中。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">562</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/prototype">WeakSet.prototype</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <code><strong>WeakSet</strong></code><strong><code>.prototype</code></strong> property represents the prototype for the <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet" title="WeakSet 对象允许你将弱保持对象存储在一个集合中。"><code>WeakSet</code></a> constructor.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">563</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add">WeakSet.prototype.add()</a></td>
    <td><strong>ECMAScript 2015, JavaScript, WeakSet</strong></td>
</tr>
<tr>
    <td><code><strong>add()</strong></code> 方法在 <code>WeakSet</code> 对象的最后一个元素后添加新的对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">564</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear">WeakSet.prototype.clear()</a></td>
    <td><strong>JavaScript, Method, WeakSet, 废弃</strong></td>
</tr>
<tr>
    <td><code><strong>clear()</strong></code> 方法用于删除 <code>WeakSet</code> 对象的所有元素，但是已经不是 ECMAScript 的一部分了。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">565</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete">WeakSet.prototype.delete()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>delete()</strong></code> 方法从 <code>WeakSet 对象中</code>移除指定的元素。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">566</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has">WeakSet.prototype.has()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>has()</strong></code> 方法根据 <code>WeakSet</code> 是否存在相应对象返回布尔值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">567</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly">WebAssembly</a></td>
    <td><strong>API, JavaScript, WebAssembly</strong></td>
</tr>
<tr>
    <td><strong><code>WebAssembly</code></strong>JavaScript 对象是所有 <a href="/en-US/docs/WebAssembly">WebAssembly</a> 相关功能的命名空间。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">568</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global">WebAssembly.Global</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>WebAssembly.Global</code></strong> 对象表示一个全局变量实例, 可以被JavaScript 和importable/exportable 访问 ,跨越一个或多个<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module" title="所有 Module 实例继承自 Module() 构造函数的原型对象 —— 修改它会影响所有 Module 实例。"><code>WebAssembly.Module</code></a> 实例. 他允许被多个modules动态连接.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">569</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance">WebAssembly.Instance</a></td>
    <td><strong>API, Experimental, JavaScript, Reference, WebAssembly</strong></td>
</tr>
<tr>
    <td>一个 <strong><code>WebAssembly.Instance</code></strong> 对象是有状态的, 是<a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module">WebAssembly.Module</a> 的一个可执行实例.  <code>实例</code>包含所有的 <a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">570</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError">WebAssembly.LinkError()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>No summary!</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">571</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory">WebAssembly.Memory()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>WebAssembly.Memory()</strong></code> 构造函数创建一个新的 <code>Memory</code> 对象。该对象的 <a class="new" href="/zh-CN/docs/Web/JavaScript/Reference/WebAssembly/Memory/buffer" rel="nofollow" title="此页面仍未被本地化, 期待您的翻译!"><code>buffer</code></a> 属性是一个可调整大小的 <a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">572</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module">WebAssembly.Module</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>所有 <code>Module</code> 实例继承自 <code>Module()</code> 构造函数的<a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/prototype">原型对象</a> —— 修改它会影响所有 <code>Module</code> 实例。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">573</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table">WebAssembly.Table()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>WebAssembly.Table()</strong></code> 构造函数根据给定的大小和元素类型创建一个Table对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">574</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile">WebAssembly.compile()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>WebAssembly.compile()</code></strong> 方法编译WebAssembly二进制代码到一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module" title="所有 Module 实例继承自 Module() 构造函数的原型对象 —— 修改它会影响所有 Module 实例。"><code>WebAssembly.Module</code></a> 对象。如果在实例化之前有必要去编译一个模块，那么这个方法是有用的（否则，将会使用<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate" title="WebAssembly.instantiate() 是编译和实例化 WebAssembly 代码的主要方法.  这个方法有两个重载方式:"><code>WebAssembly.instantiate()</code></a> 方法）</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">575</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming">WebAssembly.compileStreaming()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>WebAssembly.compileStreaming()</code></strong> 方法用来从一个流式源中直接编译一个 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module" title="所有 Module 实例继承自 Module() 构造函数的原型对象 —— 修改它会影响所有 Module 实例。"><code>WebAssembly.Module</code></a>。当模块需要在被实例化前被编译时，这个方法会很有用。如果要从流式源实例化一个模块应采用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming" title="WebAssembly.instantiateStreaming() 方法直接从流式底层源编译和实例化WebAssembly模块。这是加载wasm代码一种非常有效的优化方式。"><code>WebAssembly.instantiateStreaming()</code></a> 方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">576</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate">WebAssembly.instantiate()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>WebAssembly.instantiate()</code></strong> 是编译和实例化 WebAssembly 代码的主要方法.  这个方法有两个重载方式:</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">577</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming">WebAssembly.instantiateStreaming()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>WebAssembly.instantiateStreaming()</code></strong> 方法直接从流式底层源编译和实例化WebAssembly模块。这是加载wasm代码一种非常有效的优化方式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">578</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate">WebAssembly.validate()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>WebAssembly.validate()</code></strong> 方法用于验证包含 WebAssembly 二进制码的一个 <a href="/en-US/docs/Web/JavaScript/Typed_arrays">typed array</a> 是否合法，返回 <code>true</code> 如果这些字节能构成一个合法的 wasm 模块，否则返回 <code>false</code>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">579</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI">decodeURI()</a></td>
    <td><strong>JavaScript, URI, decodeURI(), 统一资源标识符</strong></td>
</tr>
<tr>
    <td><code><strong>decodeURI()</strong></code> 函数解码一个由<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI" title='encodeURI()  函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 "代理" 字符组成)。'><code>encodeURI</code></a> 先前创建的统一资源标识符（URI）或类似的例程。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">580</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent">decodeURIComponent()</a></td>
    <td><strong>JavaScript, URI, 统一资源标识符, 解码</strong></td>
</tr>
<tr>
    <td><code><strong>decodeURIComponent()</strong></code> 方法用于解码由 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent" title="encodeURIComponent()是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。"><code>encodeURIComponent</code></a> 方法或者其它类似方法编码的部分统一资源标识符（URI）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">581</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI">encodeURI()</a></td>
    <td><strong>JavaScript, URI, decodeURI, encodeURI, 统一资源定位符</strong></td>
</tr>
<tr>
    <td><code><strong>encodeURI()</strong></code>  函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 "代理" 字符组成)。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">582</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">encodeURIComponent()</a></td>
    <td><strong>JavaScript, URI, 统一资源标识符</strong></td>
</tr>
<tr>
    <td><code><strong>encodeURIComponent()</strong></code>是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">583</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape">escape()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>废弃的 <code><strong>escape()</strong></code> 方法生成新的由十六进制转义序列替换的字符串. 使用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI" title='encodeURI()  函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 "代理" 字符组成)。'><code>encodeURI</code></a> 或 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent" title="encodeURIComponent()是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。"><code>encodeURIComponent</code></a> 代替.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">584</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval">eval()</a></td>
    <td><strong>JavaScript, eval, 参考</strong></td>
</tr>
<tr>
    <td><code><strong>eval()</strong></code><strong> </strong>函数会将传入的字符串当做 JavaScript 代码进行执行。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">585</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis">globalThis</a></td>
    <td><strong>JavaScript, Reference, global, globalThis</strong></td>
</tr>
<tr>
    <td><code>globalThis</code> 可以获取全局对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">586</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite">isFinite()</a></td>
    <td><strong>JavaScript, isFinite</strong></td>
</tr>
<tr>
    <td>该全局 <strong><code>isFinite()</code></strong> 函数用来判断被传入的参数值是否为一个有限数值（finite number）。在必要情况下，参数会首先转为一个数值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">587</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN">isNaN()</a></td>
    <td><strong>JavaScript, Method, Reference</strong></td>
</tr>
<tr>
    <td><code><strong>isNaN()</strong></code> 函数用来确定一个值是否为<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" title="全局属性 NaN 的值表示不是一个数字（Not-A-Number）。"><code>NaN</code></a> 。注：<code>isNaN</code>函数内包含一些非常有趣的<a href="
</tr><tr>

</tr><tr>
    <td rowspan="2">588</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null">null</a></td>
    <td><strong>JavaScript, Literal, Primitive</strong></td>
</tr>
<tr>
    <td>值 <code>null</code> 特指对象的值未设置。它是 JavaScript <a class="glossaryLink" href="/en-US/docs/Glossary/Primitive" title="基本类型: In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, null, undefined, and symbol.">基本类型</a> 之一。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">589</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat">parseFloat</a></td>
    <td><strong>parseFloat()</strong></td>
</tr>
<tr>
    <td><strong><code>parseFloat()</code> </strong>函数解析一个字符串参数并返回一个浮点数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">590</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt">parseInt</a></td>
    <td><strong>JavaScript, parseInt()</strong></td>
</tr>
<tr>
    <td><strong>parseInt(<em>string</em>, <em>radix</em>)  </strong>string为字符串，radix为介于2-36之间的数。使用者告诉这个函数string（比如11）是radix（比如2）进制的，函数将固定返回string以十进制时显示的数（3）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">591</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined">undefined</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code>undefined</code>是全局对象的一个属性。也就是说，它是全局作用域的一个变量。<code>undefined</code>的最初值就是原始数据类型<code><a class="glossaryLink" href="/en-US/docs/Glossary/Undefined" title="undefined: undefined is a primitive value automatically assigned to variables that have just been declared, or to formal arguments for which there are no actual arguments.">undefined</a></code>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">592</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/unescape">unescape()</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td><font face="Open Sans, Arial, sans-serif">已废弃的</font><code><strong>unescape()</strong></code> 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换。上述的转义序列就像<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape" title="废弃的 escape() 方法生成新的由十六进制转义序列替换的字符串. 使用 encodeURI 或 encodeURIComponent 代替."><code>escape</code></a>里介绍的一样。因为 <code>unescape</code> 已经废弃，建议使用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI" title="decodeURI() 函数解码一个由encodeURI 先前创建的统一资源标识符（URI）或类似的例程。"><code>decodeURI</code></a>或者<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent" title="decodeURIComponent() 方法用于解码由 encodeURIComponent 方法或者其它类似方法编码的部分统一资源标识符（URI）。"><code>decodeURIComponent</code></a> 替代本方法。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">593</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/uneval">uneval()</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td><code><strong>uneval()</strong></code> 函数创建一个代表对象的源代码的字符串。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">594</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors">JavaScript 错误参考</a></td>
    <td><strong>Debugging, Errors, JavaScript, 调试, 错误</strong></td>
</tr>
<tr>
    <td>下面列出了 JavaScript 抛出的错误。这些错误是有用的调试帮助，但报告的问题并不总是十分明了。下面的页面提供有关这些错误的详细信息。每个错误都是基于 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error" title="通过Error的构造器可以创建一个错误对象。当运行时错误产生时，Error的实例对象会被抛出。Error对象也可用于用户自定义的异常的基础对象。下面列出了各种内建的标准错误类型。"><code>Error</code></a>  的对象，并且具有名称和消息。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">595</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Property_access_denied">Error: Permission denied to access property "x"</a></td>
    <td><strong>Error, Permission denied, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error" title="通过Error的构造器可以创建一个错误对象。当运行时错误产生时，Error的实例对象会被抛出。Error对象也可用于用户自定义的异常的基础对象。下面列出了各种内建的标准错误类型。"><code>错误</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">596</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Too_much_recursion">InternalError: too much recursion</a></td>
    <td><strong>InternalError, recursion, 内部错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError" title='InternalError 对象表示出现在JavaScript引擎内部的错误。 例如： "InternalError: too much recursion"（内部错误：递归过深）。'><code>内部错误</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">597</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint">RangeError: argument is not a valid code point</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError" title="RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"><code>RangeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">598</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_array_length">RangeError: invalid array length</a></td>
    <td><strong>JavaScript, 范围错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError" title="RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"><code>RangeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">599</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_date">RangeError: invalid date</a></td>
    <td><strong>JavaScript, 范围错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError" title="RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"><code>RangeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">600</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Precision_range">RangeError: precision is out of range</a></td>
    <td><strong>JavaScript, 范围错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError" title="RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"><code>RangeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">601</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_radix">RangeError: radix must be an integer</a></td>
    <td><strong>JavaScript, 范围错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError" title="RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"><code>RangeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">602</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large">RangeError: repeat count must be less than infinity</a></td>
    <td><strong>Errors, JavaScript, RangeError, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError" title="RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"><code>RangeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">603</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count">RangeError: repeat count must be non-negative</a></td>
    <td><strong>Errors, JavaScript, RangeError, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError" title="RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"><code>RangeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">604</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_defined">ReferenceError: "x" is not defined</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" title="ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"><code>ReferenceError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">605</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Undeclared_var">ReferenceError: assignment to undeclared variable "x"</a></td>
    <td><strong>Errors, JavaScript, ReferenceError, 严格模式, 错误</strong></td>
</tr>
<tr>
    <td>仅在<a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>中出现 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" title="ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"><code>ReferenceError</code></a> 警告。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">606</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init">ReferenceError: can't access lexical declaration`X' before initialization</a></td>
    <td><strong>JavaScript, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" title="ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"><code>ReferenceError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">607</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage">ReferenceError: deprecated caller or arguments usage</a></td>
    <td><strong>Errors, JavaScript, Strict Mode, 严格模式, 警告</strong></td>
</tr>
<tr>
    <td>仅在严格模式下出现的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" title="ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"><code>ReferenceError</code></a> 警告。<span class="short_text" id="result_box" lang="zh-CN"><span>JavaScript 的执行将不会停止。</span></span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">608</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side">ReferenceError: invalid assignment left-hand side</a></td>
    <td><strong>Errors, JavaScript, ReferenceError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" title="ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"><code>ReferenceError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">609</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Undefined_prop">ReferenceError: reference to undefined property "x"</a></td>
    <td><strong>Errors, JavaScript, ReferenceError, Strict Mode, 严格模式</strong></td>
</tr>
<tr>
    <td>仅在 <a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">strict mode</a> 下出现 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" title="ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"><code>ReferenceError</code></a> 警告。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">610</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_octal">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></td>
    <td><strong>JavaScript, 严格模式, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td>语法错误（<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a> ），只出现于<a href="/en-US/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>下。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">611</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></td>
    <td><strong>Errors, JavaScript, SyntaxError, TypeError, use strict</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">612</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Reserved_identifier">SyntaxError: "x" is a reserved identifier</a></td>
    <td><strong>JavaScript, 语法错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">613</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_octal">SyntaxError: "x" is not a legal ECMA-262 octal constant</a></td>
    <td><strong>Errors, JavaScript, SyntaxError, 严格模式</strong></td>
</tr>
<tr>
    <td>仅在 <a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">strict mode</a> 下出现 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a> 警告。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">614</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse">SyntaxError: JSON.parse: bad parsing</a></td>
    <td><strong>Errors, JSON, JavaScript, SyntaxError, 方法</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">615</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter">SyntaxError: Malformed formal parameter</a></td>
    <td><strong>Errors, JavaScript, SyntaxError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">616</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Unexpected_token">SyntaxError: Unexpected token</a></td>
    <td><strong>Errors, JavaScript, SyntaxError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">617</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //
    <td><strong>Errors, JavaScript, Source maps</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a> 的警告。不会终止 JavaScript 的执行。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">618</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></td>
    <td><strong>JavaScript, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">619</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></td>
    <td><strong>JavaScript, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a> 仅出现在<a href="/en-US/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>下。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">620</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer">SyntaxError: for-in loop head declarations may not have initializers</a></td>
    <td><strong>JavaScript, 严格模式, 语法错误</strong></td>
</tr>
<tr>
    <td>该 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a> 只出现于<a href="/en-US/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>下。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">621</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement">SyntaxError: function statement requires a name</a></td>
    <td><strong>JavaScript, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">622</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Identifier_after_number">SyntaxError: identifier starts immediately after numeric literal</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">623</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Illegal_character">SyntaxError: illegal character</a></td>
    <td><strong>JavaScript, 语法错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">624</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag">SyntaxError: invalid regular expression flag "x"</a></td>
    <td><strong>语法错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>语法错误</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">625</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list">SyntaxError: missing ) after argument list</a></td>
    <td><strong>JavaScript, 语法错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">626</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition">SyntaxError: missing ) after condition</a></td>
    <td><strong>JavaScript, 语法错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">627</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id">SyntaxError: missing : after property id</a></td>
    <td><strong>JavaScript, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">628</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement">SyntaxError: missing ; before statement</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">629</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const">SyntaxError: missing = in const declaration</a></td>
    <td><strong>JavaScript, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">630</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list">SyntaxError: missing ] after element list</a></td>
    <td><strong>Errors, JavaScript, SyntaxError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">631</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter">SyntaxError: missing formal parameter</a></td>
    <td><strong>JavaScript, 类型错误, 错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">632</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator">SyntaxError: missing name after . operator</a></td>
    <td><strong>JavaScript, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">633</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/No_variable_name">SyntaxError: missing variable name</a></td>
    <td><strong>JavaScript, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">634</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body">SyntaxError: missing } after function body</a></td>
    <td><strong>JavaScript, 语法错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">635</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list">SyntaxError: missing } after property list</a></td>
    <td><strong>Errors, JavaScript, SyntaxError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">636</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter">SyntaxError: redeclaration of formal parameter "x"</a></td>
    <td><strong>Errors, JavaScript, SyntaxError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">637</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield">SyntaxError: return not in function</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">638</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Equal_as_assign">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></td>
    <td><strong>语法错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a> 只在<a href="/en-US/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>下会出现的警告。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">639</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal">SyntaxError: unterminated string literal</a></td>
    <td><strong>Error, JavaScript, SyntaxError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" title="SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"><code>SyntaxError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">640</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/No_properties">TypeError: "x" has no properties</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">641</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Unexpected_type">TypeError: "x" is (not) "y"</a></td>
    <td><strong>类型错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">642</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_constructor">TypeError: "x" is not a constructor</a></td>
    <td><strong>Errors, JavaScript, TypeError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">643</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_function">TypeError: "x" is not a function</a></td>
    <td><strong>Errors, JavaScript, TypeError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">644</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/No_non-null_object">TypeError: "x" is not a non-null object</a></td>
    <td><strong>JavaScript, 类型错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">645</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Read-only">TypeError: "x" is read-only</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">646</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/is_not_iterable">TypeError: 'x' is not iterable</a></td>
    <td><strong>生成器, 迭代器</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">647</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/More_arguments_needed">TypeError: More arguments needed</a></td>
    <td><strong>Errors, JavaScript, TypeError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">648</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Dead_object">TypeError: can't access dead object</a></td>
    <td><strong>JavaScript, 插件, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">649</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_access_property">TypeError: can't access property "x" of "y"</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">650</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/%E4%B8%8D%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7">TypeError: can't assign to property "x" on "y": not an object</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">651</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible">TypeError: can't define property "x": "obj" is not extensible</a></td>
    <td><strong>Error, Errors, JavaScript, TypeError, 类型错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">652</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element">TypeError: can't delete non-configurable array element</a></td>
    <td><strong>JavaScript, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">653</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property">TypeError: can't redefine non-configurable property "x"</a></td>
    <td><strong>JavaScript, 类型错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">654</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value">TypeError: cyclic object value</a></td>
    <td><strong>Error, JavaScript, 类型错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">655</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/in_operator_no_object">TypeError: invalid 'in' operand "x"</a></td>
    <td><strong>JavaScript, 类型错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">656</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand">TypeError: invalid 'instanceof' operand 'x'</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">657</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Array_sort_argument">TypeError: invalid Array.prototype.sort argument</a></td>
    <td><strong>Errors, JavaScript, TypeError</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">658</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Typed_array_invalid_arguments">TypeError: invalid arguments</a></td>
    <td><strong>JavaScript, 类型错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">659</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment">TypeError: invalid assignment to const "x"</a></td>
    <td><strong>JavaScript, 类型错误, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">660</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_delete">TypeError: property "x" is non-configurable and can't be deleted</a></td>
    <td><strong>JavaScript, 严格模式, 类型错误, 错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a> 只出现在严格模式下。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">661</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Getter_only">TypeError: setting getter-only property "x"</a></td>
    <td><strong>JavaScript, 严格模式, 类型错误, 错误提示</strong></td>
</tr>
<tr>
    <td>仅在<a href="/en-US/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>下报 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a> 错误。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">662</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Var_hides_argument">TypeError: variable "x" redeclares argument</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a> 警告仅仅在 <a href="/en-US/docs/Web/JavaScript/Reference/Strict_mode">严格模式下</a> 出现。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">663</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Malformed_URI">URIError: malformed URI sequence</a></td>
    <td><strong>JavaScript, URLError, 错误提示</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError" title="URIError 对象用来表示以一种错误的方式使用全局URI处理函数而产生的错误。"><code>URIError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">664</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Already_has_pragma">Warning: -file- is being assigned a //
    <td><strong></strong></td>
</tr>
<tr>
    <td>一个警告。JavaScript 的执行不会中止。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">665</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat">Warning: Date.prototype.toLocaleFormat is deprecated</a></td>
    <td><strong>JavaScript, 警告</strong></td>
</tr>
<tr>
    <td>警告。JavaScript 引擎不会停止运行。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">666</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/For-each-in_loops_are_deprecated">Warning: JavaScript 1.6's for-each-in loops are deprecated</a></td>
    <td><strong>Warning</strong></td>
</tr>
<tr>
    <td>警告</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">667</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics">Warning: String.x is deprecated; use String.prototype.x instead</a></td>
    <td><strong>JavaScript, 警告</strong></td>
</tr>
<tr>
    <td>警告。JavaScript 引擎不会停止运行。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">668</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures">Warning: expression closures are deprecated</a></td>
    <td><strong>JavaScript, 警告</strong></td>
</tr>
<tr>
    <td>警告。JavaScript 引擎不会停止运行。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">669</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Stmt_after_return">Warning: unreachable code after return statement</a></td>
    <td><strong>警告</strong></td>
</tr>
<tr>
    <td>警告</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">670</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type">X.prototype.y called on incompatible type</a></td>
    <td><strong>JavaScript, 类型错误</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" title="TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"><code>TypeError</code></a></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">671</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value">类型错误：在没有初始值的情况下简化空数组</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><font face="x-locale-heading-primary, zillaslab, Palatino, Palatino Linotype, x-locale-heading-secondary, serif"><span style="font-size: 40px;"><strong>消息</strong></span></font></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">672</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Reserved_words">Reserved Words</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>No summary!</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">673</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a></td>
    <td><strong>JavaS, Strict Mode, 严格模式</strong></td>
</tr>
<tr>
    <td>如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅<a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">674</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode">向严格模式过渡</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>ECMAScript 5 引入了 <a href="/zh-CN/docs/JavaScript/Strict_mode" title="/zh-CN/docs/JavaScript/Strict_mode">strict mode</a> ,现在已经被大多浏览器实现(包括IE10. 会使web浏览器更容易的解析代码(只需要添加 <code>"use strict";</code> 在源码的最上面), 由现有的代码到严格模式的过渡需要一些事做.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">675</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/About">关于该参考</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td>该JavaScript参考提供Javascript语言的知识仓库。 详细的描述了完整的Javascript语言的信息。如果你编写JavaScript代码， 你会经常使用这些页面 (因此标题为 "JavaScript参考文档")。如果你正在学习JavaScript， 或需要帮助理解一些Javascript的功能或特性, 请查看 <a href="/zh-CN/docs/Web/JavaScript/Guide">JavaScript指南</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">676</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions">函数</a></td>
    <td><strong>Function, Functions, JavaScript</strong></td>
</tr>
<tr>
    <td>有关更多示例和说明，请参阅<a href="/zh-CN/docs/Web/JavaScript/Guide/Functions">有关函数的JavaScript指南</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">677</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">Arguments 对象</a></td>
    <td><strong>Functions, JavaScript, Reference, arguments</strong></td>
</tr>
<tr>
    <td><strong><code>arguments</code></strong> 是一个对应于传递给函数的参数的类数组对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">678</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee">arguments.callee</a></td>
    <td><strong>Deprecated, JavaScript, arguments, arguments.callee, 函数, 属性, 已弃用</strong></td>
</tr>
<tr>
    <td><code><strong>arguments.callee </strong></code>属性包含当前正在执行的函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">679</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/length">arguments.length</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>本次函数调用时传入函数的实参数量.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">680</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator">arguments[@@iterator]()</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><strong>@@iterator</strong></code> 属性的初始值是和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values" title="values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值"><code>Array.prototype.values</code></a> 属性的初始值相同的对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">681</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/caller">caller</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><code><font face="Open Sans, Arial, sans-serif">废弃的 </font><strong>arguments.caller</strong></code> 属性原先用在函数执行的时候调用自身。本属性已被移除且不再有用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">682</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/get">getter</a></td>
    <td><strong>ECMAScript 2015, Functions, JavaScript</strong></td>
</tr>
<tr>
    <td><strong><code>get</code></strong>语法将对象属性绑定到查询该属性时将被调用的函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">683</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/set">setter</a></td>
    <td><strong>ECMAScript 5, Functions, JavaScript</strong></td>
</tr>
<tr>
    <td>当尝试设置属性时，<strong><code>set</code></strong>语法将对象属性绑定到要调用的函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">684</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters">剩余参数</a></td>
    <td><strong>Functions, JavaScript, Rest, Rest parameters</strong></td>
</tr>
<tr>
    <td><strong>剩余参数</strong>语法允许我们将一个不定数量的参数表示为一个数组。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">685</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/Method_definitions">方法的定义</a></td>
    <td><strong>ECMAScript 2015, Functions, JavaScript, Object, 语法</strong></td>
</tr>
<tr>
    <td>从ECMAScript 2015开始，在对象初始器中引入了一种更简短定义方法的语法，这是一种把方法名直接赋给函数的简写方式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">686</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a></td>
    <td><strong>ECMAScript 2015, ES6 Arrow Function, Functions, Intermediate, JavaScript, Lambda, Lambda Expression, Reference, ramda</strong></td>
</tr>
<tr>
    <td><strong>箭头函数表达式</strong>的语法比<a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/function">函数表达式</a>更简洁，并且没有自己的<a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this</a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">arguments</a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/super">super</a>或 <a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target">new.target</a>。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">687</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters">默认参数值</a></td>
    <td><strong>ECMAScript 2015, Functions, JavaScript</strong></td>
</tr>
<tr>
    <td><strong>函数默认参数</strong>允许在没有值或<code>undefined</code>被传入时使用默认形参。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">688</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Trailing_commas">尾后逗号</a></td>
    <td><strong>Comma, ECMAScript2017, ECMAScript5, JavaScript, 语法, 逗号</strong></td>
</tr>
<tr>
    <td><strong>尾后逗号</strong> （有时叫做“终止逗号”）在向 JavaScript 代码添加元素、参数、属性时十分有用。如果你想要添加新的属性，并且上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。这使得版本控制的代码比较（diff）更加清晰，代码编辑过程中遇到的麻烦更少。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">689</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features">废弃和过时的JavaScript特性</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>本附录列出了那些已经被废弃的(仍然可用,但未来会被删除)或者已经过时的(已经被删除,不能再用了)JavaScript特性.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">690</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features/The_legacy_Iterator_protocol">原始迭代协议</a></td>
    <td><strong>JavaScript, Legacy Iterator, 传统迭代协议, 废弃属性</strong></td>
</tr>
<tr>
    <td>Firefox在version 26版本生效的与<a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">691</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/template_strings">模板字符串</a></td>
    <td><strong>ECMAScript6, JavaScript, Template string, 模板字符串</strong></td>
</tr>
<tr>
    <td>模板字面量 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。它们在ES2015规范的先前版本中被称为“模板字符串”。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">692</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Classes">类</a></td>
    <td><strong>Class, Classes, ECMAScript 2015, JavaScript</strong></td>
</tr>
<tr>
    <td>ECMAScript 2015 中引入的 JavaScript 类实质上是 JavaScript 现有的基于原型的继承的语法糖。类语法<strong>不会</strong>为JavaScript引入新的面向对象的继承模型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">693</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Classes/extends">extends</a></td>
    <td><strong>Classes, ECMAScript 2015, JavaScript</strong></td>
</tr>
<tr>
    <td><strong><code>extends</code></strong>关键字用于<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/class">类声明</a>或者<a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/class">类表达式</a>中，以创建一个类，该类是另一个类的子类。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">694</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Classes/static">static</a></td>
    <td><strong>Classes, ECMAScript 2015, ES6, JavaScript, Static, 静态方法</strong></td>
</tr>
<tr>
    <td>类（class）通过 <strong>static </strong>关键字定义静态方法。不能在类的实例上调用静态方法，而应该通过类本身调用。这些通常是实用程序方法，例如创建或克隆对象的功能。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">695</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor">构造方法</a></td>
    <td><strong>Classes, ECMAScript 2015, JavaScript</strong></td>
</tr>
<tr>
    <td><strong> <code>constructor </code></strong>是一种用于创建和初始化<code><a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">696</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators">表达式和运算符</a></td>
    <td><strong>JavaScript, Operators</strong></td>
</tr>
<tr>
    <td>左侧工具栏是按字母表排序的列表。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">697</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Expression_closures">Expression closures</a></td>
    <td><strong>Functions, JavaScript, Reference</strong></td>
</tr>
<tr>
    <td>表达式闭包是定义简单函数的一种便捷方式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">698</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions">Generator推导式</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>生成器推导语法是一种JavaScript表达式，它允许您基于现有的可迭代对象快速组合新的生成器函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">699</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/async%E5%85%81%E8%AE%B8%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%87%BD%E6%95%B0">async function expression</a></td>
    <td><strong>JavaScript, 函数, 基本表达式, 实验性内容, 操作符</strong></td>
</tr>
<tr>
    <td><strong><code>async function</code></strong> 关键字用来在表达式中定义异步函数。当然，你也可以用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" title="async function 声明用于定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。"><code>异步函数语句</code></a> 来定义。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">700</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/await">await</a></td>
    <td><strong>JavaScript, Promise, await, 实验性, 操作符</strong></td>
</tr>
<tr>
    <td><code>await</code>  操作符用于等待一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。"><code>Promise</code></a> 对象。它只能在异步函数 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" title="async function 声明用于定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。"><code>async function</code></a> 中使用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">701</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/delete">delete 操作符</a></td>
    <td><strong>JavaScript, Operator, Reference, delete</strong></td>
</tr>
<tr>
    <td><strong><code>delete</code> 操作符</strong>用于删除对象的某个属性；如果没有指向这个属性的引用，那它最终会被释放。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">702</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/function*">function* 表达式</a></td>
    <td><strong>ECMAScript 2015, Function, Iterator, JavaScript, Operator, Primary Expression</strong></td>
</tr>
<tr>
    <td><strong><code>function*</code></strong>关键字可以在表达式内部定义一个生成器函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">703</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/in">in</a></td>
    <td><strong>JavaScript, Operator, Relational Operators</strong></td>
</tr>
<tr>
    <td>如果指定的属性在指定的对象或其原型链中，则<strong><code>in</code> 运算符</strong>返回<code>true</code>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">704</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof</a></td>
    <td><strong>JavaScript, Object, Prototype, instanceof</strong></td>
</tr>
<tr>
    <td>instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">705</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/new">new 运算符</a></td>
    <td><strong>JavaScript, Left-hand-side expressions, Operator, 操作符</strong></td>
</tr>
<tr>
    <td><strong><code>new</code> 运算符</strong>创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">706</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target">new.target</a></td>
    <td><strong>Classes, ECMAScript 2015, JavaScript, Reference</strong></td>
</tr>
<tr>
    <td><code>new.target</code>语法由一个关键字"<code>new</code>"，一个点，和一个属性名"<font face="Consolas, Liberation Mono, Courier, monospace">target</font>"组成。通常"<code>new.</code>"<code>的</code>作用是提供属性访问的上下文，但这里"<code>new.</code>"其实不是一个真正的对象。不过在构造方法调用中，<code>new.target</code>指向被<code>new</code>调用的构造函数，所以"<code>new.</code>"成为了一个虚拟上下文。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">707</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/super">super</a></td>
    <td><strong>Classes, ECMAScript 2015, JavaScript, Operator</strong></td>
</tr>
<tr>
    <td><strong>super</strong>关键字用于访问和调用一个对象的父对象上的函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">708</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this</a></td>
    <td><strong>JavaScript, Operator, Primary Expressions, Reference</strong></td>
</tr>
<tr>
    <td>与其他语言相比，<strong>函数的 <code>this</code> 关键字</strong>在 JavaScript 中的表现略有不同，此外，在<a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>和非严格模式之间也会有一些差别。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">709</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a></td>
    <td><strong>JavaScript, Operator, Unary</strong></td>
</tr>
<tr>
    <td><strong><code>typeof</code></strong>操作符返回一个字符串，表示未经计算的操作数的类型。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">710</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/void">void 运算符</a></td>
    <td><strong>JavaScript, Unary</strong></td>
</tr>
<tr>
    <td><strong><code>void</code> 运算符 </strong>对给定的表达式进行求值，然后返回 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。"><code>undefined</code></a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">711</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/yield">yield</a></td>
    <td><strong>ECMAScript 2015, Generators, Iterator, JavaScript, Operator</strong></td>
</tr>
<tr>
    <td><code>yield</code> 关键字用来暂停和恢复一个生成器函数（(<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/function*" title="function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。"><code>function*</code></a> 或<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function">遗留的生成器函数</a>）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">712</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/yield*">yield*</a></td>
    <td><strong>ECMAScript 2015, Generators, Iterable, Iterator, JavaScript, Operator, Reference</strong></td>
</tr>
<tr>
    <td><strong><code>yield*</code> 表达式</strong>用于委托给另一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/function*" title="function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。"><code>generator</code></a> 或可迭代对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">713</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/function">函数表达式</a></td>
    <td><strong>Function, JavaScript, 函数, 基本表达式, 操作符</strong></td>
</tr>
<tr>
    <td><strong><code>function</code></strong> 关键字可以用来在一个表达式中定义一个函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">714</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping">圆括号运算符</a></td>
    <td><strong>JavaScript, Operator, 操作符</strong></td>
</tr>
<tr>
    <td>圆括号运算符 <code>( )</code> 用于控制表达式中的运算优先级。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">715</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer">对象初始化</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Literal, Methods, Object, Primary Expression, computed, mutation, properties</strong></td>
</tr>
<tr>
    <td>可以通过<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>new Object()</code></a>，<code> <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create()</a></code>方法，或者使用字面量标记（初始化标记）初始化对象。 一个对象初始化器，由花括号/大括号 (<code>{}</code>) 包含的一个由零个或多个对象属性名和其关联值组成的一个逗号分隔的列表构成。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">716</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax">展开语法</a></td>
    <td><strong>ECMAScript2015, Iterator, JavaScript, 展开</strong></td>
</tr>
<tr>
    <td>该示例的源代码存放于Github中，如果你想进行修订，请先克隆<a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">717</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Property_Accessors">属性访问器</a></td>
    <td><strong>JavaScript, Operator, 操作符</strong></td>
</tr>
<tr>
    <td>属性访问器提供了两种方式用于访问一个对象的属性，它们分别是点号和方括号。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">718</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators">按位操作符</a></td>
    <td><strong>js ^ &amp; Bitwise Operators</strong></td>
</tr>
<tr>
    <td><strong>按位操作符（Bitwise operators）</strong> 将其操作数（operands）当作32位的比特序列（由0和1组成），而不是十进制、十六进制或八进制<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" title="/en-US/docs/JavaScript/Reference/Global_Objects/Number">数值</a>。例如，十进制数9，用二进制表示则为1001。按位操作符操作数字的二进制形式，但是返回值依然是标准的JavaScript数值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">719</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Array_comprehensions">数组推导式</a></td>
    <td><strong>JavaScript, Non-standard, 参考, 运算符</strong></td>
</tr>
<tr>
    <td><strong>数组推导式</strong>是一种 JavaScript 表达式语法，使用它，你可以在一个原有数组的基础上快速的构造出一个新的数组。但是它已经从标准和火狐中移除。不要用它！</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">720</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function">旧式生成器函数</a></td>
    <td><strong>生成器函数</strong></td>
</tr>
<tr>
    <td><strong><code>function</code></strong> 关键字可以用于在表达式中定义旧式的生成器函数。为使定义的函数为一个旧式的生成器函数，该函数的函数体中需要至少包含一个 <a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/yield" title="yield 关键字用来暂停和恢复一个生成器函数（(function* 或遗留的生成器函数）。"><code>yield</code></a> 表达式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">721</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">条件运算符</a></td>
    <td><strong>JavaScript, Operator</strong></td>
</tr>
<tr>
    <td><strong>条件（三元）运算符</strong>是 JavaScript 仅有的使用三个操作数的运算符。本运算符经常作为<code><a href="/en-US/docs/Web/JavaScript/Reference/Statements/if...else">if</a></code>语句的简短形式来使用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">722</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators">比较操作符</a></td>
    <td><strong>严格比较操作符, 比较操作符</strong></td>
</tr>
<tr>
    <td>JavaScript 有两种比较方式：严格比较运算符和转换类型比较运算符。对于严格比较运算符（===）来说，仅当两个操作数的类型相同且值相等为 true，而对于被广泛使用的比较运算符（==）来说，会在进行比较之前，将两个操作数转换成相同的类型。对于关系运算符（比如 &lt;=）来说，会先将操作数转为原始值，使它们类型相同，再进行比较运算。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">723</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators">算术运算符</a></td>
    <td><strong>JavaScript, Operator</strong></td>
</tr>
<tr>
    <td><strong>算术运算符</strong>以数值（字面量或变量）作为其操作数，并返回一个单个数值。标准算术运算符是加法（+），减法（ - ），乘法（*）和除法（/）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">724</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C%E7%AC%A6">管道操作符</a></td>
    <td><strong>Experimental, JavaScript, Operator, 语法糖, 链式, 链式调用</strong></td>
</tr>
<tr>
    <td>试验性的管道操作符 <code>|&gt;</code> （目前其标准化流程处于 stage 1 阶段）允许以一种易读的方式去对函数链式调用。本质上来说，管道操作符是单参数函数调用的语法糖，它允许你像这样执行一个调用：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">725</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/class">类表达式</a></td>
    <td><strong>Class, Classes, ES6</strong></td>
</tr>
<tr>
    <td><strong>类表达式</strong>是用来定义类的一种语法。和<a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/function">函数表达式</a>相同的一点是，类表达式可以是命名也可以是匿名的。如果是命名类表达式，这个名字只能在类体内部才能访问到。JavaScript 的类也是基于原型继承的。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">726</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a></td>
    <td><strong>ECMAScript 2015, JavaScript, 对象, 操作符, 数组, 结构, 赋值</strong></td>
</tr>
<tr>
    <td><strong>解构赋值</strong>语法是一种 Javascript 表达式。通过<strong>解构赋值, </strong>可以将属性/值从对象/数组中取出,赋值给其他变量。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">727</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators">赋值运算符</a></td>
    <td><strong>JavaScript, 运算符</strong></td>
</tr>
<tr>
    <td>赋值运算符（<strong>assignment operator</strong>）基于右值（right operand）的值，给左值（left operand）赋值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">728</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">运算符优先级</a></td>
    <td><strong>JavaScript, 优先级, 运算符</strong></td>
</tr>
<tr>
    <td><span class="st">运算符的优先级决定了表达式中运算执行的先后顺序</span>，优先级高的运算符最先被执行。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">729</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator">逗号操作符</a></td>
    <td><strong>comma operator, 逗号操作符</strong></td>
</tr>
<tr>
    <td><strong>逗号操作符 </strong> 对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">730</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_Operators">逻辑运算符</a></td>
    <td><strong>JavaScript, 操作符, 逻辑</strong></td>
</tr>
<tr>
    <td>逻辑运算符通常用于<a href="/zh-CN/docs/Web/JavaScript/Reference/Boolean" title="此页面仍未被本地化, 期待您的翻译!"><code>布尔</code></a>型（逻辑）值。这种情况下，它们返回一个布尔值。然而，<code>&amp;&amp;</code> 和 <code>||</code> 运算符会返回一个指定操作数的值，因此，这些运算符也用于非布尔值。这时，它们也就会返回一个非布尔型值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">731</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar">词法文法</a></td>
    <td><strong>JavaScript, Keyword, Literal, 关键字, 字面量, 直接量, 词法, 语法</strong></td>
</tr>
<tr>
    <td>这部分描述了JavaScript 的词法（lexical grammar）。ECMAScript 源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括 token、控制符、行终止符、注释和空白符。ECMAScript 定义了一些关键字、字面量以及行尾分号补全的规则。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">732</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements">语句和声明</a></td>
    <td><strong>JavaScript, 参考, 声明</strong></td>
</tr>
<tr>
    <td>JavaScript 应用程序是由许多语法正确的语句组成的。单个语句可以跨多行。如果每个语句用分号隔开，那么多个语句可以在一行中出现。本页的内容并不是一个关键字，而是一组关键字。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">733</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">async function</a></td>
    <td><strong>Function, JavaScript, Statement, 异步函数</strong></td>
</tr>
<tr>
    <td><code><strong>async function</strong></code> 声明用于定义一个返回 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction" title="AsyncFunction 构造函数用来创建新的 异步函数 对象，JavaScript 中每个异步函数都是  AsyncFunction 的对象。"><code>AsyncFunction</code></a> 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。"><code>Promise</code></a> 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">734</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/block">block</a></td>
    <td><strong>JavaScript, Reference, Statement</strong></td>
</tr>
<tr>
    <td><strong>块语句</strong>（或其他语言的<strong>复合语句</strong>）用于组合零个或多个语句。该块由一对大括号界定，可以是<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/label" title="标记语句可以和 break 或 continue 语句一起使用。标记就是在一条语句前面加个可以引用的标识符。"><code>labelled</code></a>：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">735</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/break">break</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong>break 语句</strong>中止当前循环，<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/switch" title="switch 语句评估一个表达式，将表达式的值与case子句匹配，并执行与该情况相关联的语句。"><code>switch</code></a>语句或<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/label" title="标记语句可以和 break 或 continue 语句一起使用。标记就是在一条语句前面加个可以引用的标识符。"><code>label</code></a> 语句，并把程序控制流转到紧接着被中止语句后面的语句。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">736</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/class">class</a></td>
    <td><strong>Class, Classes, Declaration, ECMAScript 2015, ES6, JavaScript, Reference, Statement</strong></td>
</tr>
<tr>
    <td><strong>class 声明</strong>创建一个基于原型继承的具有给定名称的新类。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">737</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/const">const</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Reference, Statement, constants</strong></td>
</tr>
<tr>
    <td>常量是块级作用域，很像使用 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/let">let</a> 语句定义的变量。常量的值不能通过重新赋值来改变，并且不能重新声明。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">738</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/continue">continue</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>continue 语句</strong>结束当前（或标签）的循环语句的本次迭代，并继续执行循环的下一次迭代。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">739</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/debugger">debugger</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong>debugger 语句</strong>调用任何可用的调试功能，例如设置断点。 如果没有调试功能可用，则此语句不起作用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">740</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/default">default</a></td>
    <td><strong>JavaScript, Keyword</strong></td>
</tr>
<tr>
    <td><strong>default 关键字</strong>可以在 JavaScript 的两种情况下使用：在 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/switch" title="switch 语句评估一个表达式，将表达式的值与case子句匹配，并执行与该情况相关联的语句。"><code>switch</code></a> ，或 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/export" title="在创建JavaScript模块时，export 语句用于从模块中导出函数、对象或原始值，以便其他程序可以通过 import 语句使用它们。"><code>export</code></a> 中。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">741</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/do...while">do...while</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong><code>do...while</code> 语句</strong><span lang="zh-CN"><span>创建一个执行指定语句的循环，直到</span></span><code>condition</code><span lang="zh-CN"><span>值为 false。</span><span>在执行</span></span><code>statement</code> <span lang="zh-CN"><span>后检测</span></span><code>condition</code><span lang="zh-CN"><span>，所以指定的</span></span><code>statement</code><span lang="zh-CN"><span>至少执行一次。</span></span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">742</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/Empty">empty</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong>空语句</strong>用来表明没有语句，尽管 JavaScript 语法希望有语句。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">743</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/export">export</a></td>
    <td><strong>ECMAScript 2015, JavaScript, export, 声明, 模块</strong></td>
</tr>
<tr>
    <td>在创建JavaScript模块时，<code><strong>export</strong></code> 语句用于从模块中导出函数、对象或原始值，以便其他程序可以通过 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/import" title='静态的import 语句用于导入由另一个模块导出的绑定。无论是否声明了 strict mode ，导入的模块都运行在严格模式下。在浏览器中，import 语句只能在声明了 type="module" 的 script 的标签中使用。'><code>import</code></a> 语句使用它们。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">744</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for">for</a></td>
    <td><strong>JavaScript, Loop, Reference, Statement, for</strong></td>
</tr>
<tr>
    <td><strong><code>for 语句</code></strong>用于创建一个循环，它包含了三个可选的表达式，三个可选的表达式包围在圆括号中并由分号分隔， <span class="short_text" id="result_box" lang="zh-CN"><span>后跟一个在循环中执行的语句（通常是一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/block">块语句</a>）。</span></span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">745</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of">for await...of</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>The <strong><code>for await...of</code> 语句</strong>在异步或者同步可迭代对象上（包括 <a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/Array" title="REDIRECT Array"><code>Array</code></a>，<code>Array</code>-like 对象（比如<a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" title="arguments 是一个对应于传递给函数的参数的类数组对象。"><code>arguments</code></a> 或者<a href="/zh-CN/docs/Web/API/NodeList" title="NodeList 对象是一个节点的集合，是由 Node.childNodes 和 document.querySelectorAll 返回的."><code>NodeList</code></a>)，<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" title="一个TypedArray 对象描述一个底层的二进制数据缓存区的一个类似数组(array-like)视图。事实上，没有名为 TypedArray的全局对象，也没有一个名为的 TypedArray构造函数。相反，有许多不同的全局对象，下面会列出这些针对特定元素类型的类型化数组的构造函数。在下面的页面中，你会找到一些不管什么类型都公用的属性和方法。"><code>TypedArray</code></a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/Map" title="此页面仍未被本地化, 期待您的翻译!"><code>Map</code></a>， <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" title="Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。"><code>Set</code></a>和其他对象等等）创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句<strong>。</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">746</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for_each...in">for each...in</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>使用一个变量迭代一个对象的所有属性值，对于每一个属性值，有一个指定的语句块被执行。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">747</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in">for...in</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong><code>for...in</code>语句</strong>以任意顺序遍历一个对象自有的、继承的、<a href="/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚举</a>的、非Symbol的属性。对于每个不同的属性，语句都会被执行。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">748</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of">for...of</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Reference, Statement</strong></td>
</tr>
<tr>
    <td><strong><code>for...of</code>语句</strong>在<a href="/zh-CN/docs/Web/JavaScript/Guide/iterable">可迭代对象</a>（包括 <a href="/zh-CN/docs/Web/JavaScript/Reference/Array" title="REDIRECT Array"><code>Array</code></a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/Map" title="此页面仍未被本地化, 期待您的翻译!"><code>Map</code></a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" title="Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。"><code>Set</code></a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a>，<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" title="一个TypedArray 对象描述一个底层的二进制数据缓存区的一个类似数组(array-like)视图。事实上，没有名为 TypedArray的全局对象，也没有一个名为的 TypedArray构造函数。相反，有许多不同的全局对象，下面会列出这些针对特定元素类型的类型化数组的构造函数。在下面的页面中，你会找到一些不管什么类型都公用的属性和方法。"><code>TypedArray</code></a>，<a href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">749</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/function">function</a></td>
    <td><strong>函数, 函数声明提升, 函数表达式, 提升, 语句</strong></td>
</tr>
<tr>
    <td><strong>函数声明</strong>定义一个具有指定参数的函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">750</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/function*">function*</a></td>
    <td><strong>ECMAScript 2015, Generator, JavaScript, function*, 函数, 声明, 迭代器</strong></td>
</tr>
<tr>
    <td><code><strong>function*</strong></code> 这种声明方式(<code style="font-style: normal;">function</code>关键字后跟一个星号）会定义一个<strong><em>生成器函数</em> (</strong><em>generator function</em><strong>)</strong>，它返回一个  <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator" title="生成器对象是由一个 generator function 返回的,并且它符合可迭代协议和迭代器协议。"><code>Generator</code></a>  对象。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">751</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else">if...else</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><span style="line-height: 19.0909080505371px;">当指定条件为真，</span><strong>if 语句</strong>会执行一段语句。如果条件为假，则执行另一段语句。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">752</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/import">import</a></td>
    <td><strong>ECMAScript 2015, JavaScript, Modules, Statement, import</strong></td>
</tr>
<tr>
    <td>静态的<code><strong>import</strong></code> 语句用于导入由另一个模块导出的绑定。无论是否声明了 <a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" title="如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。"><code>strict mode</code></a> ，导入的模块都运行在严格模式下。在浏览器中，<code>import</code> 语句只能在声明了 <code>type="module"</code> 的 <code>script</code> 的标签中使用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">753</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/import.meta">import.meta</a></td>
    <td><strong>JavaScript, Modules, Reference</strong></td>
</tr>
<tr>
    <td><code>import.meta</code>是一个给JavaScript模块暴露特定上下文的元数据属性的对象。它包含了这个模块的信息，比如说这个模块的URL。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">754</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/label">label</a></td>
    <td><strong>JavaScript, Statement, 语句</strong></td>
</tr>
<tr>
    <td><strong>标记语句</strong>可以和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/break" title="break 语句中止当前循环，switch语句或label 语句，并把程序控制流转到紧接着被中止语句后面的语句。"><code>break</code></a> 或 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/continue" title="continue 语句结束当前（或标签）的循环语句的本次迭代，并继续执行循环的下一次迭代。"><code>continue</code></a> 语句一起使用。标记就是在一条语句前面加个可以引用的标识符（identifier）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">755</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/let">let</a></td>
    <td><strong>ECMAScript 2015, ECMAScript6, JavaScript, let, 变量, 变量声明, 声明</strong></td>
</tr>
<tr>
    <td><strong><code>let</code></strong>允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与<strong><code>var</code></strong>关键字不同的是，<strong><font face="consolas, Liberation Mono, courier, monospace"><span style="background-color: rgba(220, 220, 220, 0.5);">var</span></font></strong>声明的变量只能是全局或者整个函数块的。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">756</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/return">return</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong><code>return</code>语句</strong>终止函数的执行，并返回一个指定的值给函数调用者。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">757</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/switch">switch</a></td>
    <td><strong>JavaScript, Reference, Statement, Web</strong></td>
</tr>
<tr>
    <td><strong><code>switch</code> 语句</strong>评估一个<a href="/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators">表达式</a>，将表达式的值与<code>case</code>子句匹配，并执行与该情况相关联的<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements">语句</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">758</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/throw">throw</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong><code>throw</code>语句</strong>用来抛出一个用户自定义的异常。当前函数的执行将被停止（<code>throw</code>之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个<a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch"><code>catch</code></a>块。如果调用者函数中没有<code>catch</code>块，程序将会终止。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">759</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch">try...catch</a></td>
    <td><strong>Error, Exception, JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong><code>try...catch</code></strong>语句将能引发错误的代码放在try块中，并且对应一个响应，然后有异常被抛出。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">760</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/var">var</a></td>
    <td><strong>JavaScript, Statement, 声明</strong></td>
</tr>
<tr>
    <td><strong><code>var</code> 声明语句</strong>声明一个变量，并可选地将其初始化为一个值。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">761</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/while">while</a></td>
    <td><strong>JavaScript, Statement</strong></td>
</tr>
<tr>
    <td><strong>while 语句</strong>可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">762</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/with">with</a></td>
    <td><strong>Deprecated, JavaScript, Statement</strong></td>
</tr>
<tr>
    <td>JavaScript查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的context或者包含这个变量的函数有关。'with'语句將某个对象添加到作用域链的顶部，如果在statement中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" title="ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"><code>ReferenceError</code></a>异常。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">763</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function">遗留的生成器函数</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>遗留的生成器函数语句 </strong>使用特殊参数声明遗留的生成器函数。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">764</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols">迭代协议</a></td>
    <td><strong>ECMAScript 2015, 可迭代协议, 迭代器协议</strong></td>
</tr>
<tr>
    <td>ECMAScript 2015的几个补充，并不是新的内置实现或语法，而是协议<span style="line-height: 1.5;">。</span>这些<span style="line-height: 1.5;">协议</span>可以<span style="line-height: 1.5;">被任何遵循某些约定的对象</span>来<span style="line-height: 1.5;">实现。</span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">765</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview">JavaScript 技术概览</a></td>
    <td><strong>DOM, JavaScript, 入门, 新手</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/HTML">HTML</a> 定义网页的结构与内容，<a href="/zh-CN/docs/Web/CSS">CSS</a> 定义其格式与样式，而 <a href="/zh-CN/docs/Web/JavaScript">JavaScript</a> 则为网页增加可交互性，创作功能丰富的 Web 应用。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">766</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide">JavaScript 指南</a></td>
    <td><strong>Guide, JavaScript</strong></td>
</tr>
<tr>
    <td>JavaScript 指南向你介绍如何使用 <a href="/zh-CN/docs/Web/JavaScript">JavaScript</a>，并且给出了语言概述。如果你需要了解某些语言特性的详细信息，请参阅 <a href="/zh-CN/docs/Web/JavaScript/Reference">JavaScript 参考</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">767</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Modules">JavaScript modules 模块</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>这篇指南教给你Javascript 模块语法的全部信息。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">768</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/JavaScript_Overview">JavaScript 概述</a></td>
    <td><strong>ECMAScript</strong></td>
</tr>
<tr>
    <td>本节将介绍并讨论 JavaScript 的基本概念。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">769</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Text_formatting">Text formatting</a></td>
    <td><strong>Guide, JavaScript</strong></td>
</tr>
<tr>
    <td>本章介绍在Javascript中如何使用字符串与文本内容。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">770</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Introduction">介绍</a></td>
    <td><strong>JavaScript, 指南</strong></td>
</tr>
<tr>
    <td>我们假设你已经掌握了以下基础技能：</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">771</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Using_promises">使用 Promise</a></td>
    <td><strong>Guide, JavaScript, Promise, 异步, 指南</strong></td>
</tr>
<tr>
    <td><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。"><code>Promise</code></a> 是一个对象，它代表了一个异步操作的最终完成或者失败。因为大多数人仅仅是使用已创建的 Promise 实例对象，所以本教程将首先说明怎样使用 Promise，再说明如何创建 Promise。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">772</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects">使用对象</a></td>
    <td><strong>基本语法, 对象概述</strong></td>
</tr>
<tr>
    <td><span style="line-height: 1.5;">JavaScript </span>的设计是<span style="line-height: 1.5;">一个</span>简单的基于对象的范式。<span style="line-height: 1.5;">一个对象就是一系列属性的集合，一个属性包含一个名和一个值。一个属性的值可以是函数，这种情况下属性也被称为</span><em>方法</em><span style="line-height: 1.5;">。除了浏览器里面预定义的那些对象之外，你也可以定义你自己的对象。本章节讲述了怎么使用对象、属性、函数和方法，怎样实现自定义对象。</span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">773</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Meta_programming">元编程</a></td>
    <td><strong>Guide, JavaScript, Proxy, Reflect</strong></td>
</tr>
<tr>
    <td>从ECMAScript 2015 开始，JavaScript 获得了 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" title="Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。"><code>Proxy</code></a> 和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" title="Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect不是一个函数对象，因此它是不可构造的。"><code>Reflect</code></a> 对象的支持，允许你拦截并定义基本语言操作的自定义行为（例如，属性查找，赋值，枚举，函数调用等）。借助这两个对象，你可以在 JavaScript 元级别进行编程。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">774</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/About">关于本指南</a></td>
    <td><strong>JavaScript, 初学者, 指南</strong></td>
</tr>
<tr>
    <td>JavaScript 是一种跨平台的，基于对象的脚本语言。本指南介绍了所有您使用 JavaScript 所需要了解的事情。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">775</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Functions">函数</a></td>
    <td><strong>JavaScript, 函数, 初学者, 教程</strong></td>
</tr>
<tr>
    <td>函数是 JavaScript 中的基本组件之一。 一个函数是 JavaScript 过程 — 一组执行任务或计算值的语句。要使用一个函数，你必须将其定义在你希望调用它的作用域内。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">776</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Details_of_the_Object_Model">对象模型的细节</a></td>
    <td><strong>Guide, Intermediate, JavaScript, Object</strong></td>
</tr>
<tr>
    <td>JavaScript 是一种基于原型而不是基于类的面向对象语言。正是由于这一根本的区别，其如何创建对象的层级结构以及对象的属性与属性值是如何继承的并不是那么清晰。本节试着阐明。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">777</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Keyed_collections">带键的集合</a></td>
    <td><strong>Guide, JavaScript, Map, set, 集合</strong></td>
</tr>
<tr>
    <td>这一章介绍由key值标记的数据容器；Map 和 Set 对象承载的数据元素可以按照插入时的顺序被迭代遍历。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">778</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration">循环和迭代</a></td>
    <td><strong>JavaScript, 循环, 指南, 语法</strong></td>
</tr>
<tr>
    <td>循环提供了一种快速和简单的方式去做一些重复的事。<a href="/en-US/docs/Web/JavaScript/Guide">JavaScript入门</a>的这个章节会介绍在JavaScript中存在哪些不同的迭代语句。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">779</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Numbers_and_dates">数字和日期</a></td>
    <td><strong>JavaScript, 指南</strong></td>
</tr>
<tr>
    <td>本章节介绍如何掌握Javascript里的数字和日期类型</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">780</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式</a></td>
    <td><strong>JavaScript, RegExp, Regular Expressions, 中级, 参考, 指南, 正则表达式</strong></td>
</tr>
<tr>
    <td>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 <a href="/zh-CN/docs/Web/JavaScript/Reference/RegExp" title="此页面仍未被本地化, 期待您的翻译!"><code>RegExp</code></a> 的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" title="exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。"><code>exec</code></a> 和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test" title="test() 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 false。"><code>test</code></a> 方法, 以及 <a href="/zh-CN/docs/Web/JavaScript/Reference/String" title="此页面仍未被本地化, 期待您的翻译!"><code>String</code></a> 的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" title="match() 方法检索返回一个字符串匹配正则表达式的的结果。"><code>match</code></a>、<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" title="replace() 方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。"><code>replace</code></a>、<a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search" title="search() 方法执行正则表达式和 String 对象之间的一个搜索匹配。"><code>search</code></a> 和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" title="split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。"><code>split</code></a> 方法。本章介绍 JavaScript 正则表达式。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">781</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling">流程控制与错误处理</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td>JavaScript 提供一套灵活的语句集，<span class="notranslate">特别是控制流语句</span>，你可以<span class="notranslate">用它</span>在你的应用程序中实现大量的交互性功能。本章节我们将带来关于JavaScript语句的一些概览。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">782</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections">索引集合类 (Indexed collections)</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>这个章节主要介绍了以索引进行排序的数据集合。包括数组以及类似于数组的数据结构，如<strong style="background-color:
</tr><tr>

</tr><tr>
    <td rowspan="2">783</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators">表达式和运算符</a></td>
    <td><strong>JavaScript, 入门, 指南, 表达式</strong></td>
</tr>
<tr>
    <td>本章描述了 JavaScript 的表达式和运算符，包括了赋值，比较，算数，位运算，逻辑，字符串，三元等等。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">784</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types">语法和数据类型</a></td>
    <td><strong>Enhanced Object Literals, JavaScript, Null, Object Literals, Typed Objects, typeof(), 教程</strong></td>
</tr>
<tr>
    <td>本章讨论 JavaScript 的基本语法，变量声明，数据类型 和 字面量。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">785</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators">迭代器和生成器</a></td>
    <td><strong>Generator, Guide, Intermediate, Iterator, JavaScript, 生成器, 迭代器</strong></td>
</tr>
<tr>
    <td>处理集合中的每个项是很常见的操作。JavaScript 提供了许多迭代集合的方法，从简单的 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for" title="for 语句用于创建一个循环，它包含了三个可选的表达式，三个可选的表达式包围在圆括号中并由分号分隔， 后跟一个在循环中执行的语句（通常是一个块语句）。"><code>for</code></a> 循环到 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" title="map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。"><code>map()</code></a> 和 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" title="filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。"><code>filter()</code></a>。迭代器和生成器将迭代的概念直接带入核心语言，并提供了一种机制来自定义 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" title="for...of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句"><code>for...of</code></a> 循环的行为。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">786</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Data_structures">JavaScript 数据类型和数据结构</a></td>
    <td><strong>JavaScript, 初学者, 数据结构, 类型</strong></td>
</tr>
<tr>
    <td>编程语言都具有内建的数据结构，但各种编程语言的数据结构常有不同之处。本文试图列出 JavaScript 语言中内建的数据结构及其属性，它们可以用来构建其他的数据结构；同时尽可能地描述与其他语言的不同之处。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">787</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Typed_arrays">JavaScript 类数组对象</a></td>
    <td><strong>Array, Typed, Typed_arrays</strong></td>
</tr>
<tr>
    <td>JavaScript类型化数组是一种类似数组的对象，并提供了一种用于访问原始二进制数据的机制。 正如你可能已经知道，<a href="/zh-CN/docs/Web/JavaScript/Reference/Array" title="REDIRECT Array"><code>Array</code></a> 存储的对象能动态增多和减少，并且可以存储任何JavaScript值。JavaScript引擎会做一些内部优化，以便对数组的操作可以很快。然而，随着Web应用程序变得越来越强大，尤其一些新增加的功能例如：音频视频编辑，访问WebSockets的原始数据等，很明显有些时候如果使用JavaScript代码可以快速方便地通过类型化数组来操作原始的二进制数据将会非常有帮助。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">788</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript">JavaScript更新</a></td>
    <td><strong>ECMAScript, ECMAScript 2017, JavaScript, 版本</strong></td>
</tr>
<tr>
    <td>本章包含有关JavaScript版本历史记录的信息，以及基于<strong>Mozilla/SpiderMonkey-</strong>的JavaScript应用程序的实现状态，例如Firefox。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">789</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_5_support_in_Mozilla">ECMAScript 5 support in Mozilla</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>ECMAScript 5.1, an older version of the standard upon which JavaScript is based, was approved in June 2011.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">790</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/Firefox_JavaScript_changelog">Firefox 中的 JavaScript 更新日志</a></td>
    <td><strong>JavaScript, 版本</strong></td>
</tr>
<tr>
    <td>下面是 Firefox 发布版本的 JavaScript 日志更新情况。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">791</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.1">JavaScript 1.1的新特性</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>下面介绍的是JavaScript从Netscape Navigator 2.0到3.0的更新日志。旧的Netscape文档请参考<a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">792</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.2">JavaScript 1.2的新特性</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>下面介绍的是JavaScript从Netscape Navigator 3.0到4.0的更新日志。旧的Netscape文档可以在<a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">793</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.3">JavaScript 1.3的新特性</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>下面介绍的是JavaScript从Netscape Navigator 4.0到4.5的更新日志。旧的Netscape文档可以在<a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">794</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.4">JavaScript 1.4的新特性</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>下面是 JavaScript 1.4 的更新记录，它只可用于 1999 年发布的 Netscape 服务端 JavaScript。 旧的 Netscape 文档可在 <a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">795</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.5">JavaScript 1.5 的新特性</a></td>
    <td><strong>JavaScript, 版本</strong></td>
</tr>
<tr>
    <td>以下为JavaScript 1.5 的更新日志。该版本包含在发行于2000年11月14日的Netscape Navigator 6.0中，也在后续的的Netscape Navigator版本和Firefox 1.0中使用。你可以拿JavaScript 1.5 和JScript version 5.5，Internet Explorer 5.5进行比较，后者发行于2000年7月。相应的ECMA 标准是 ECMA-262 Edition 3版 (自1999年12月)。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">796</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.6">JavaScript 1.6 的新特性</a></td>
    <td><strong>JavaScript, 版本</strong></td>
</tr>
<tr>
    <td><strong>No summary!</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">797</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.7">JavaScript 1.7 的新特性</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong>No summary!</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">798</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.8.1">JavaScript 1.8.1 的新特性</a></td>
    <td><strong>Firefox 3.5</strong></td>
</tr>
<tr>
    <td>下面是JavaScript 1.8.1 的更新内容. 该版本已包含在 <a href="/en-US/Firefox/Releases/3.5">Firefox 3.5</a> 中.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">799</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.8.5">JavaScript 1.8.5 的新特性</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>下面的内容是JavaScript 1.8.5的更新记录. 该版本已包含在<a href="/en-US/Firefox/Releases/4">Firefox 4</a>中.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">800</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla">Mozilla 对 ECMAScript 6 的支持</a></td>
    <td><strong>ECMAScript2015, ECMAScript6, Firefox, JavaScript</strong></td>
</tr>
<tr>
    <td><strong>No summary!</strong></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">801</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.8">New in JavaScript 1.8</a></td>
    <td><strong>JavaScript, 版本</strong></td>
</tr>
<tr>
    <td>以下为JavaScript 1.8的更新日志。JavaScript 1.8 是 Gecko 1.9（已合并在 <a href="/cn/Firefox_3" title="cn/Firefox_3">Firefox 3</a> 中）的一部分。参见 <a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">802</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Language_Resources">JavaScript资源</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td><strong>ECMAScript</strong>是形成<a href="../../../../zh-CN/JavaScript" rel="internal">JavaScript</a>语言基础的脚本语言。ECMAScript是由<a class="external" href="http:
</tr><tr>

</tr><tr>
    <td rowspan="2">803</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript">JavaScript面向对象简介</a></td>
    <td><strong>JavaScript, OOP, 命名空间, 对象, 封装, 成员, 构造函数, 继承, 面向对象</strong></td>
</tr>
<tr>
    <td>JavaScript 的核心是支持面向对象的，同时它也提供了强大灵活的 OOP 语言能力。本文从对面向对象编程的介绍开始，带您探索 JavaScript 的对象模型，最后描述 JavaScript 当中面向对象编程的一些概念。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">804</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Microsoft_Extensions">Microsoft JavaScript extensions</a></td>
    <td><strong>JavaScript, JavaScript:Microsoft Extensions, NeedsTranslation, Non-standard, Reference, TopicStub</strong></td>
</tr>
<tr>
    <td>Microsoft browsers (Internet Explorer, and in a few cases, Microsoft Edge) support a number of special Microsoft extensions to the otherwise standard <a href="/en-US/docs/Web/JavaScript">JavaScript APIs</a>.</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">805</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Microsoft_Extensions/ActiveXObject">ActiveXObject</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><strong><code>ActiveXObject</code> </strong>启用会返回一个自动化对象的引用</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">806</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/ECMAScript_7_support_in_Mozilla">Mozilla对下一代ECMAScript 的支持</a></td>
    <td><strong>ECMAScript 2015, ECMAScript 2016, ECMAScript 2017, ECMAScript 2018, new features</strong></td>
</tr>
<tr>
    <td>下一代 ECMAScript 是指在 ECMAScript 2015 被推出后的 ECMA-262 标准（通常被称为 <a href="/en-US/docs/Web/JavaScript">JavaScript</a>）的新特性。新版本的 ECMAScript 规范会每年发布。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">807</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/The_performance_hazards_of__%5B%5BPrototype%5D%5D_mutation">The performance hazards of  [[Prototype]] mutation</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td><span></span></td>
</tr><tr>

</tr><tr>
    <td rowspan="2">808</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/javascript(%E8%B5%B7%E6%AD%A5)">javascript(起步)</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>作为一门计算机语言，JavaScript本身强大、复杂，且难于理解。但是，你可以用它来开发一系列的应用程序，它有巨大的潜力来改变当前的互联网现状。下面这个应用程序就是一个很好的例子：<a class="external" href="http://local.google.com/" rel="noopener">Google Maps</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">809</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/About_JavaScript">关于 JavaScript</a></td>
    <td><strong>JavaScript, 入门介绍</strong></td>
</tr>
<tr>
    <td><span class="external">JavaScript</span><sup>®</sup> （通常简写为JS）是一种轻量的、解释性的、面向对象的<a class="external" href="https:
</tr><tr>

</tr><tr>
    <td rowspan="2">810</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Memory_Management">内存管理</a></td>
    <td><strong>JavaScript, 内存, 性能</strong></td>
</tr>
<tr>
    <td>像C语言这样的底层语言一般都有底层的内存管理接口，比如 <code>malloc()</code>和<code>free()</code>。相反，JavaScript是在创建变量（对象，字符串等）时自动进行了分配内存，并且在不使用它们时“自动”释放。 释放的过程称为垃圾回收。这个“自动”是混乱的根源，并让JavaScript（和其他高级语言）开发者错误的感觉他们可以不关心内存管理。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">811</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">属性的可枚举性和所有权</a></td>
    <td><strong>JavaScript</strong></td>
</tr>
<tr>
    <td>可枚举属性是指那些内部 “可枚举” 标志设置为 true 的属性，对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true，对于通过 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a> 等定义的属性，该标识值默认为 false。可枚举的属性可以通过 <a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in">for...in</a> 循环进行遍历（除非该属性名是一个 <a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>）。属性的所有权是通过判断该属性是否直接属于某个对象决定的，而不是通过原型链继承的。一个对象的所有的属性可以一次性的获取到。有一些内置的方法可以用于判断、迭代/枚举以及获取对象的一个或一组属性，下表对这些方法进行了列举。对于部分不可用的类别，下方的示例代码对获取方法进行了演示。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">812</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/EventLoop">并发模型与事件循环</a></td>
    <td><strong>Advanced, Event Loop, Event Management, Event Queue, Handling Events, JavaScript, events</strong></td>
</tr>
<tr>
    <td>JavaScript 的并发模型基于“事件循环”。这个模型与像 C 或者 Java 这种其它语言中的模型截然不同。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">813</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Index">索引</a></td>
    <td><strong>JavaScript, MDN Meta, 索引</strong></td>
</tr>
<tr>
    <td>该页面列出了 MDN JavaScript 所有的页面及相关概览和标签。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">814</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a></td>
    <td><strong>Advanced, Guide, Inheritance, JavaScript, OOP, 指南, 继承, 进阶, 面向对象, 面向对象编程, 高级</strong></td>
</tr>
<tr>
    <td>对于使用过基于类的语言 (如 Java 或 C++) 的开发人员来说，JavaScript 有点令人困惑，因为它是动态的，并且本身不提供一个 <code>class</code> 实现。（在 ES2015/ES6 中引入了 <code>class</code> 关键字，但那只是语法糖，JavaScript 仍然是基于原型的）。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">815</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/%E8%AE%B0%E5%BD%95%E5%B7%AE%E5%BC%82%E6%B5%8B%E8%AF%95">记录差异测试</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>hello</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">816</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Getting_Started">起步(Javascript 教程)</a></td>
    <td><strong></strong></td>
</tr>
<tr>
    <td>作为一门计算机语言，JavaScript本身强大、复杂，且难于理解。但是，你可以用它来开发一系列的应用程序，它有巨大的潜力来改变当前的互联网现状。下面这个应用程序就是一个很好的例子：<a class="external" href="http://local.google.com/" rel="noopener">Google Maps</a>。</td>
</tr><tr>

</tr><tr>
    <td rowspan="2">817</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript（JS 教程）</a></td>
    <td><strong>JavaScript, 指南, 教程, 进阶, 高级</strong></td>
</tr>
<tr>
    <td>为什么会有这一篇“重新介绍”呢？因为 <a class="glossaryLink" href="/en-US/docs/Glossary/JavaScript" title="JavaScript: JavaScript (JS) is a programming language mostly used to dynamically script webpages on the client side, but it is also often utilized on the server-side, using packages such as Node.js.">JavaScript</a> 堪称<a class="external" href="http:
</tr><tr>

</tr><tr>
    <td rowspan="2">818</td>
    <td rowspan="2"><a href="/zh-CN/docs/Web/JavaScript/Closures">闭包</a></td>
    <td><strong>Closures, JavaScript, 指南, 进阶, 闭包</strong></td>
</tr>
<tr>
    <td>闭包是函数和声明该函数的词法环境的组合。</td>
</tr><tr>


</tr></tbody>
</table></article><div class="metadata"><section class="document-meta"><header class="visually-hidden"><h4>Metadata</h4></header> <ul><li class="last-modified"><b>最后修改：</b> <time dateTime="2019-03-21T07:54:31.289079">Mar 21, 2019</time>,<!-- --> <a href="https:
 <ol>
  <li><a href="/zh-CN/docs/Web/JavaScript"><strong><em>JavaScript</em></strong></a></li>
  <li><a class="new" href="/zh-CN/docs/Web/JavaScript/Tutorials" rel="nofollow"><strong>教程:</strong></a></li>
  <li class="toggle">
    <details>
      <summary>快速入门</summary>
      <ol>
        <li><a href="/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript 基础知识</a></li>
        <li><a href="/zh-CN/docs/Learn/JavaScript/First_steps">JavaScript first steps</a></li>
        <li><a href="/zh-CN/docs/Learn/JavaScript/Building_blocks">JavaScript building blocks</a></li>
        <li><a href="/zh-CN/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
      </ol>
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>JavaScript 指南</summary>
      <ol>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Introduction">Introduction</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_Types">Grammar and types</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling">Control flow and error handling</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration">Loops and iteration</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Functions">Functions</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators">Expressions and operators</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Numbers_and_dates">Numbers and dates</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Text_formatting">Text formatting</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">Regular expressions</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections">Indexed collections</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Keyed_collections">Keyed collections</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects">Working with objects</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Details_of_the_Object_Model">Details of the object model</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Using_promises">Using promises</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_generators">Iterators and generators</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Meta_programming">Meta programming</a></li>
          <li><a href="/zh-CN/docs/Web/JavaScript/Guide/Modules">JavaScript modules</a></li>
        </ol>
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>中级教程</summary>
      <ol>
        <li><a href="/zh-CN/docs/Learn/JavaScript/Objects">Introducing JavaScript objects</a></li>
        <li><a href="/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">深入 JavaScript</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Data_structures">JavaScript 数据结构</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">如何正确判断相等性</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Closures">Closures</a></li>
      </ol>
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>高级</summary>
      <ol>
        <li><a href="/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承和原型链</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Typed_arrays">JavaScript 类型化数组</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Memory_Management">内存管理</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/EventLoop">Concurrency model and Event Loop</a></li>
      </ol>
    </details>
  </li>
  <li><strong><a href="/zh-CN/docs/Web/JavaScript/Reference">引用:</a></strong></li>
  <li class="toggle">
    <details>
       <summary>内置对象</summary>
        <ol><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" title="JavaScript的 Array 对象是用于构造数组的全局对象，数组是类似于列表的高阶对象。">Array</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" title="The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https:
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>表达式和运算符</summary>
      <ol><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators" title="算术运算符以数值（字面量或变量）作为其操作数，并返回一个单个数值。标准算术运算符是加法（+），减法（ - ），乘法（*）和除法（/）。">算术运算符</a></li><li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."><i class="icon-warning-sign"> </i></span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."><i class="icon-trash"> </i></span></span><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Array_comprehensions" title="数组推导式是一种 JavaScript 表达式语法，使用它，你可以在一个原有数组的基础上快速的构造出一个新的数组。但是它已经从标准和火狐中移除。不要用它！">数组推导式</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators" title="赋值运算符（assignment operator）基于右值（right operand）的值，给左值（left operand）赋值。">赋值运算符</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" title="按位操作符（Bitwise operators） 将其操作数（operands）当作32位的比特序列（由0和1组成），而不是十进制、十六进制或八进制数值。例如，十进制数9，用二进制表示则为1001。按位操作符操作数字的二进制形式，但是返回值依然是标准的JavaScript数值。">按位操作符</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator" title="逗号操作符  对它的每个操作数求值（从左到右），并返回最后一个操作数的值。">逗号操作符</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators" title="JavaScript 有两种比较方式：严格比较运算符和转换类型比较运算符。对于严格比较运算符（===）来说，仅当两个操作数的类型相同且值相等为 true，而对于被广泛使用的比较运算符（==）来说，会在进行比较之前，将两个操作数转换成相同的类型。对于关系运算符（比如 &lt;=）来说，会先将操作数转为原始值，使它们类型相同，再进行比较运算。">比较操作符</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" title="条件（三元）运算符是 JavaScript 仅有的使用三个操作数的运算符。本运算符经常作为if语句的简短形式来使用。">条件运算符</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" title="解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。">解构赋值</a></li><li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."><i class="icon-warning-sign"> </i></span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."><i class="icon-trash"> </i></span></span><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Expression_closures" title="表达式闭包是定义简单函数的一种便捷方式。">Expression closures</a></li><li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."><i class="icon-warning-sign"> </i></span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."><i class="icon-trash"> </i></span></span><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions" title="生成器推导语法是一种JavaScript表达式，它允许您基于现有的可迭代对象快速组合新的生成器函数。">Generator推导式</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping" title="圆括号运算符 ( ) 用于控制表达式中的运算优先级。">圆括号运算符</a></li><li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."><i class="icon-warning-sign"> </i></span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."><i class="icon-trash"> </i></span></span><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function" title="function 关键字可以用于在表达式中定义旧式的生成器函数。为使定义的函数为一个旧式的生成器函数，该函数的函数体中需要至少包含一个 yield 表达式。">旧式生成器函数</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_Operators" title="逻辑运算符通常用于布尔型（逻辑）值。这种情况下，它们返回一个布尔值。然而，&amp;&amp; 和 || 运算符会返回一个指定操作数的值，因此，这些运算符也用于非布尔值。这时，它们也就会返回一个非布尔型值。">逻辑运算符</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer" title="可以通过new Object()， Object.create()方法，或者使用字面量标记（初始化标记）初始化对象。 一个对象初始化器，由花括号/大括号 ({}) 包含的一个由零个或多个对象属性名和其关联值组成的一个逗号分隔的列表构成。">对象初始化</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" title="运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。">运算符优先级</a></li><li><span class="sidebar-icon"><span class="icon-only-inline" title="这是一个实验性的 API，请尽量不要在生产环境中使用它。"><i class="icon-beaker"> </i></span></span><a class="new" href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining" rel="nofollow" title="The ?. operator functions similarly to the . chaining operator, except that instead of causing an error if a reference is null or undefined, the expression short-circuits with a return value of undefined.">Optional chaining</a> <a class="new" href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining$translate" rel="nofollow" style="opacity: 0.5;" title="此页面仍未被本地化, 期待您的翻译!">[我来译!]</a></li><li><span class="sidebar-icon"><span class="icon-only-inline" title="这是一个实验性的 API，请尽量不要在生产环境中使用它。"><i class="icon-beaker"> </i></span></span><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C%E7%AC%A6" title="试验性的管道操作符 |> （目前其标准化流程处于 stage 1 阶段）允许以一种易读的方式去对函数链式调用。本质上来说，管道操作符是单参数函数调用的语法糖，它允许你像这样执行一个调用：">管道操作符</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Property_Accessors" title="属性访问器提供了两种方式用于访问一个对象的属性，它们分别是点号和方括号。">属性访问器</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax" title="该示例的源代码存放于Github中，如果你想进行修订，请先克隆https:
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>语句和声明</summary>
      <ol><li><span class="sidebar-icon"><span class="icon-only-inline" title="This API has not been standardized."><i class="icon-warning-sign"> </i></span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."><i class="icon-trash"> </i></span></span><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function" title="遗留的生成器函数语句 使用特殊参数声明遗留的生成器函数。">遗留的生成器函数</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" title="async function 声明用于定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。">async function</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/block" title="块语句（或其他语言的复合语句）用于组合零个或多个语句。该块由一对大括号界定，可以是labelled：">block</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/break" title="break 语句中止当前循环，switch语句或label 语句，并把程序控制流转到紧接着被中止语句后面的语句。">break</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/class" title="class 声明创建一个基于原型继承的具有给定名称的新类。">class</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/const" title="常量是块级作用域，很像使用 let 语句定义的变量。常量的值不能通过重新赋值来改变，并且不能重新声明。">const</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/continue" title="continue 语句结束当前（或标签）的循环语句的本次迭代，并继续执行循环的下一次迭代。">continue</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/debugger" title="debugger 语句调用任何可用的调试功能，例如设置断点。 如果没有调试功能可用，则此语句不起作用。">debugger</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/default" title="default 关键字可以在 JavaScript 的两种情况下使用：在 switch ，或 export 中。">default</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/do...while" title="do...while 语句创建一个执行指定语句的循环，直到condition值为 false。在执行statement 后检测condition，所以指定的statement至少执行一次。">do...while</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/Empty" title="空语句用来表明没有语句，尽管 JavaScript 语法希望有语句。">empty</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/export" title="在创建JavaScript模块时，export 语句用于从模块中导出函数、对象或原始值，以便其他程序可以通过 import 语句使用它们。">export</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for" title="for 语句用于创建一个循环，它包含了三个可选的表达式，三个可选的表达式包围在圆括号中并由分号分隔， 后跟一个在循环中执行的语句（通常是一个块语句）。">for</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of" title="The for await...of 语句在异步或者同步可迭代对象上（包括 String，Array，Array-like 对象（比如arguments 或者NodeList)，TypedArray，Map， Set和其他对象等等）创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。">for await...of</a></li><li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."><i class="icon-thumbs-down-alt"> </i></span></span><span class="sidebar-icon"><span class="icon-only-inline" title="This is an obsolete API and is no longer guaranteed to work."><i class="icon-trash"> </i></span></span><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for_each...in" title="使用一个变量迭代一个对象的所有属性值，对于每一个属性值，有一个指定的语句块被执行。">for each...in</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" title="for...in语句以任意顺序遍历一个对象自有的、继承的、可枚举的、非Symbol的属性。对于每个不同的属性，语句都会被执行。">for...in</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" title="for...of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句">for...of</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/function" title="函数声明定义一个具有指定参数的函数。">function</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/function*" title="function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。">function*</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else" title="当指定条件为真，if 语句会执行一段语句。如果条件为假，则执行另一段语句。">if...else</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/import" title='静态的import 语句用于导入由另一个模块导出的绑定。无论是否声明了 strict mode ，导入的模块都运行在严格模式下。在浏览器中，import 语句只能在声明了 type="module" 的 script 的标签中使用。'>import</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/import.meta" title="import.meta是一个给JavaScript模块暴露特定上下文的元数据属性的对象。它包含了这个模块的信息，比如说这个模块的URL。">import.meta</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/label" title="标记语句可以和 break 或 continue 语句一起使用。标记就是在一条语句前面加个可以引用的标识符（identifier）。">label</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/let" title="let允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与var关键字不同的是，var声明的变量只能是全局或者整个函数块的。">let</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/return" title="return语句终止函数的执行，并返回一个指定的值给函数调用者。">return</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/switch" title="switch 语句评估一个表达式，将表达式的值与case子句匹配，并执行与该情况相关联的语句。">switch</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/throw" title="throw语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（throw之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个catch块。如果调用者函数中没有catch块，程序将会终止。">throw</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch" title="try...catch语句将能引发错误的代码放在try块中，并且对应一个响应，然后有异常被抛出。">try...catch</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/var" title="var 声明语句声明一个变量，并可选地将其初始化为一个值。">var</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/while" title="while 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环。">while</a></li><li><span class="sidebar-icon"><span class="icon-only-inline" title="This deprecated API should no longer be used, but will probably still work."><i class="icon-thumbs-down-alt"> </i></span></span><a href="/zh-CN/docs/Web/JavaScript/Reference/Statements/with" title="JavaScript查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的context或者包含这个变量的函数有关。'with'语句將某个对象添加到作用域链的顶部，如果在statement中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出ReferenceError异常。">with</a></li></ol>
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>函数</summary>
      <ol><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" title="箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。">箭头函数</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters" title="函数默认参数允许在没有值或undefined被传入时使用默认形参。">默认参数值</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/Method_definitions" title="从ECMAScript 2015开始，在对象初始器中引入了一种更简短定义方法的语法，这是一种把方法名直接赋给函数的简写方式。">方法的定义</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters" title="剩余参数语法允许我们将一个不定数量的参数表示为一个数组。">剩余参数</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" title="Editorial review completed.">Arguments 对象</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/get" title="get语法将对象属性绑定到查询该属性时将被调用的函数。">getter</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Functions/set" title="当尝试设置属性时，set语法将对象属性绑定到要调用的函数。">setter</a></li></ol>
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>Classes</summary>
      <ol><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor" title=" constructor 是一种用于创建和初始化class创建的对象的特殊方法。">构造方法</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Classes/extends" title="extends关键字用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。">extends</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Classes/static" title="类（class）通过 static 关键字定义静态方法。不能在类的实例上调用静态方法，而应该通过类本身调用。这些通常是实用程序方法，例如创建或克隆对象的功能。">static</a></li></ol>
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>Errors</summary>
      <ol><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Property_access_denied" title="错误.">Error: Permission denied to access property "x"</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Too_much_recursion" title="内部错误.">InternalError: too much recursion</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint" title="RangeError">RangeError: argument is not a valid code point</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_array_length" title="RangeError">RangeError: invalid array length</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_date" title="RangeError">RangeError: invalid date</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Precision_range" title="RangeError">RangeError: precision is out of range</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_radix" title="RangeError">RangeError: radix must be an integer</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large" title="RangeError">RangeError: repeat count must be less than infinity</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count" title="RangeError">RangeError: repeat count must be non-negative</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_defined" title="ReferenceError.">ReferenceError: "x" is not defined</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Undeclared_var" title="仅在严格模式中出现 ReferenceError 警告。">ReferenceError: assignment to undeclared variable "x"</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init" title="ReferenceError">ReferenceError: can't access lexical declaration`X' before initialization</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage" title="仅在严格模式下出现的 ReferenceError 警告。JavaScript 的执行将不会停止。">ReferenceError: deprecated caller or arguments usage</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side" title="ReferenceError.">ReferenceError: invalid assignment left-hand side</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Undefined_prop" title="仅在 strict mode 下出现 ReferenceError 警告。">ReferenceError: reference to undefined property "x"</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_octal" title="语法错误（SyntaxError ），只出现于严格模式下。">SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params" title="SyntaxError.">SyntaxError: "use strict" not allowed in function with non-simple parameters</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Reserved_identifier" title="SyntaxError">SyntaxError: "x" is a reserved identifier</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse" title="SyntaxError">SyntaxError: JSON.parse: bad parsing</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter" title="SyntaxError">SyntaxError: Malformed formal parameter</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Unexpected_token" title="SyntaxError">SyntaxError: Unexpected token</a></li><li><a href="/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma" title="SyntaxError 的警告。不会终止 JavaScript 的执行。">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>更多</summary>
      <ol>
        <li><a href="/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview">JavaScript 知识概要</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar">词法文法</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Data_structures">JavaScript 数据结构</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">属性的可枚举性和所有权</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols">Iteration protocols</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode">切换到严格模式</a></li>
        <li><a class="new" href="/zh-CN/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow">模板字符串</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features">已废弃的特性</a></li>
      </ol>
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>New in JavaScript</summary>
      <ol><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" title="">Mozilla 对 ECMAScript 6 的支持</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_5_support_in_Mozilla" title="ECMAScript 5.1, an older version of the standard upon which JavaScript is based, was approved in June 2011.">ECMAScript 5 support in Mozilla</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/Firefox_JavaScript_changelog" title="下面是 Firefox 发布版本的 JavaScript 日志更新情况。">Firefox 中的 JavaScript 更新日志</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.1" title='下面介绍的是JavaScript从Netscape Navigator 2.0到3.0的更新日志。旧的Netscape文档请参考"第1版之后新增的特性"。Netscape Navigator 3.0在1996年8月19发布，是支持JavaScript的浏览器的第二个主要的版本。'>JavaScript 1.1的新特性</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.2" title="下面介绍的是JavaScript从Netscape Navigator 3.0到4.0的更新日志。旧的Netscape文档可以在archive.org上面找到。Netscape Navigator 4.0在1997年6月11日发布，它是是支持JavaScript的浏览器的第三个主要的版本。">JavaScript 1.2的新特性</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.3" title="下面介绍的是JavaScript从Netscape Navigator 4.0到4.5的更新日志。旧的Netscape文档可以在archive.org上面找到。Netscape Navigator 4.5是在1998年10月19日发布的。">JavaScript 1.3的新特性</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.4" title="下面是 JavaScript 1.4 的更新记录，它只可用于 1999 年发布的 Netscape 服务端 JavaScript。 旧的 Netscape 文档可在 archive.org 找到。">JavaScript 1.4的新特性</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.5" title="以下为JavaScript 1.5 的更新日志。该版本包含在发行于2000年11月14日的Netscape Navigator 6.0中，也在后续的的Netscape Navigator版本和Firefox 1.0中使用。你可以拿JavaScript 1.5 和JScript version 5.5，Internet Explorer 5.5进行比较，后者发行于2000年7月。相应的ECMA 标准是 ECMA-262 Edition 3版 (自1999年12月)。">JavaScript 1.5 的新特性</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.6" title="">JavaScript 1.6 的新特性</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.7" title="">JavaScript 1.7 的新特性</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.8" title="以下为JavaScript 1.8的更新日志。JavaScript 1.8 是 Gecko 1.9（已合并在 Firefox 3 中）的一部分。参见 bug 380236 以跟踪 JavaScript 1.8。">New in JavaScript 1.8</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.8.1" title="下面是JavaScript 1.8.1 的更新内容. 该版本已包含在 Firefox 3.5 中.">JavaScript 1.8.1 的新特性</a></li><li><a href="/zh-CN/docs/Web/JavaScript/New_in_JavaScript/1.8.5" title="下面的内容是JavaScript 1.8.5的更新记录. 该版本已包含在Firefox 4中.">JavaScript 1.8.5 的新特性</a></li></ol>
    </details>
  </li>
  <li><strong><a href="/zh-CN/docs/MDN">文档:</a></strong></li>
  <li class="toggle">
    <details>
      <summary>常用列表</summary>
      <ol>
        <li><a href="/zh-CN/docs/Web/JavaScript/Index">全部页面索引</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Reference/Methods_Index">方法索引</a></li>
        <li><a href="/zh-CN/docs/Web/JavaScript/Reference/Properties_Index">属性索引</a></li>
        <li><a href="/zh-CN/docs/tag/JavaScript">拥有 "JavaScript" 标签的页面</a></li>
      </ol>
    </details>
  </li>
  <li class="toggle">
    <details>
      <summary>贡献</summary>
      <ol>
        <li><a href="/zh-CN/docs/MDN/Doc_status/JavaScript">JavaScript 文档翻译状态</a></li>
        <li><a href="/zh-CN/docs/MDN">MDN 项目</a></li>
      </ol>
    </details>
  </li>
 </ol>
</div></div></div></div></main><section class="newsletter-container"><div id="newsletter-form-container" class="newsletter"><form class="newsletter-form nodisable" name="newsletter-form"><section class="newsletter-head"><h2 class="newsletter-teaser">学习 Web 开发的最佳实践</h2><p class="newsletter-description">让 MDN 将最新、最棒的内容直接投递到您的邮箱。</p><p class="newsletter-lang" aria-hidden="false">目前仅提供英文版新闻通讯。</p></section><fieldset class="newsletter-fields"><input type="hidden" name="fmt" value="H"/><input type="hidden" name="newsletters" value="app-dev"/><div class="form-group newsletter-group-email"><label for="newsletter-email-input" class="form-label offscreen">电子邮箱</label><input type="email" id="newsletter-email-input" name="email" class="form-input newsletter-input-email" placeholder="you@example.com" required=""/></div><div id="newsletter-privacy" class="hidden" aria-hidden="true"><input type="checkbox" id="newsletter-privacy-input" name="privacy" required=""/><label for="newsletter-privacy-input">我同意 Mozilla 按照<a href="https:
<script>window._react_data = JSON.parse("{\"locale\":\"zh-CN\",\"stringCatalog\":{\"%(sentDate)s by %(user)s\":\"%(user)s \u4E8E %(sentDate)s\",\"...more docs\":\"...\u66F4\u591A\u6587\u6863\",\"A newer version of this article has been published since this draft was saved. You can restore the draft to view the content, but you will not be able to submit it for publishing.\":\"\u81EA\u8BE5\u8349\u7A3F\u4FDD\u5B58\u4EE5\u6765\uFF0C\u6B64\u6587\u7AE0\u5DF2\u6709\u4E00\u4E2A\u65B0\u7248\u672C\u88AB\u53D1\u5E03\u3002\u60A8\u53EF\u4EE5\u6062\u590D\u8BE5\u8349\u7A3F\u4EE5\u67E5\u770B\u5185\u5BB9\uFF0C\u4F46\u4E0D\u80FD\u5C06\u5176\u53D1\u5E03\u3002\",\"APIs / DOM\":\"API / DOM\",\"About\":\"\u5173\u4E8E\",\"About MDN\":\"\u5173\u4E8E MDN\",\"Accessibility\":\"\u65E0\u969C\u788D\u73AF\u5883\",\"Add a translation\":\"\u6DFB\u52A0\u7FFB\u8BD1\",\"An unhandled error occurred in the application. We apologize for the inconvenience!\":\"\u5E94\u7528\u7A0B\u5E8F\u4E2D\u51FA\u73B0\u672A\u5904\u7406\u7684\u9519\u8BEF\uFF0C\u6211\u4EEC\u5BF9\u9020\u6210\u7684\u4E0D\u4FBF\u6DF1\u8868\u62B1\u6B49\uFF01\",\"Application rendering error\":\"\u5E94\u7528\u7A0B\u5E8F\u5448\u73B0\u51FA\u9519\",\"Article Title Lookup / Link Text\":\"\u6587\u7AE0\u6807\u9898\u67E5\u8BE2 / \u94FE\u63A5\u6587\u672C\",\"Aspect ratio\":\"\u957F\u5BBD\u6BD4\",\"Attachments\":\"\u9644\u4EF6\",\"Autosave enabled.\":\"\u81EA\u52A8\u4FDD\u5B58\u5DF2\u542F\u7528\u3002\",\"Briefly outline the issue you are highlighting.\":\"\u8BF7\u7B80\u8981\u6982\u8FF0\u60A8\u8981\u6307\u660E\u7684\u95EE\u9898\u3002\",\"Browser Extensions\":\"\u6D4F\u89C8\u5668\u6269\u5C55\",\"Browser documentation and release notes are good supporting items to accompany your message. A demo hosted on services like Codepen or JSBin are perfect for providing real examples of your findings.\":\"\u4F8B\u5982\u60A8\u53EF\u4EE5\u63D0\u4F9B\u6D4F\u89C8\u5668\u6587\u6863\u6216\u53D1\u884C\u8BF4\u660E\uFF0C\u662F\u6781\u6709\u529B\u7684\u652F\u6491\u6750\u6599\u3002\u4E5F\u53EF\u4E3A\u6258\u7BA1\u5728 Codepen \u6216  JSBin \u7B49\u5E73\u53F0\u4E0A\u7684\u6F14\u793A\uFF08Demo\uFF09\uFF0C\u9488\u5BF9\u6240\u53CD\u9988\u5185\u5BB9\u63D0\u4F9B\u5B9E\u9645\u8303\u4F8B\u3002\",\"CSS\":\"CSS\",\"Can I keep track of my report?\":\"\u5982\u4F55\u8DDF\u8E2A\u6211\u7684\u53CD\u9988\u8FDB\u5EA6\uFF1F\",\"Can you provide a brief explanation?\":\"\u60A8\u80FD\u63D0\u4F9B\u4E00\u4E2A\u7B80\u77ED\u8BF4\u660E\u5417\uFF1F\",\"Changes saved.\":\"\u66F4\u6539\u5DF2\u4FDD\u5B58\u3002\",\"Close\":\"\u5173\u95ED\",\"Close banner\":\"\u5173\u95ED\u6A2A\u5E45\",\"Close notification\":\"\u5173\u95ED\u901A\u77E5\",\"Close submenu\":\"\u5173\u95ED\u5B50\u83DC\u5355\",\"Compare this date to the latest revision date to ensure you're not overwriting later changes.\":\"\u6BD4\u8F83\u6B64\u65E5\u671F\u4E0E\u6700\u65B0\u4FEE\u8BA2\u65E5\u671F\uFF0C\u4EE5\u786E\u4FDD\u60A8\u4E0D\u4F1A\u8986\u76D6\u4E4B\u540E\u7684\u66F4\u6539\u3002\",\"Connection error:\":\"\u8FDE\u63A5\u9519\u8BEF\uFF1A\",\"Contact Us\":\"\u8054\u7CFB\u6211\u4EEC\",\"Content rendering error\":\"\u5185\u5BB9\u5448\u73B0\u51FA\u9519\",\"Cookies\":\"Cookie\",\"Create a Redirect\":\"\u521B\u5EFA\u4E00\u4E2A\u91CD\u5B9A\u5411\",\"Current language is %s. Choose your preferred language.\":\"\u5F53\u524D\u8BED\u8A00\u4E3A %s\u3002\u8BF7\u9009\u62E9\u60A8\u504F\u597D\u7684\u8BED\u8A00\u3002\",\"Default\":\"\u9ED8\u8BA4\",\"Details\":\"\u8BE6\u60C5\",\"Developer Guides\":\"\u5F00\u53D1\u8005\u6307\u5357\",\"Discard draft.\":\"\u653E\u5F03\u8349\u7A3F\u3002\",\"Dismiss\":\"\u6D88\u9664\",\"Do you have any supporting material?\":\"\u60A8\u6709\u4EFB\u4F55\u53C2\u8003\u6216\u8F85\u52A9\u6750\u6599\u5417\uFF1F\",\"Document\":\"\u6587\u6863\",\"Draft autosaved:\":\"\u8349\u7A3F\u5DF2\u81EA\u52A8\u4FDD\u5B58\uFF1A\",\"Draft discarded.\":\"\u8349\u7A3F\u5DF2\u653E\u5F03\u3002\",\"Draft discarded:\":\"\u8349\u7A3F\u5DF2\u653E\u5F03\uFF1A\",\"Draft published:\":\"\u8349\u7A3F\u5DF2\u53D1\u5E03\uFF1A\",\"Draft restored.\":\"\u8349\u7A3F\u5DF2\u6062\u590D\u3002\",\"E-mail\":\"\u7535\u5B50\u90AE\u7BB1\",\"Edit Page\":\"\u7F16\u8F91\u9875\u9762\",\"Edit in wiki\":\"\u5728 Wiki \u4E2D\u7F16\u8F91\",\"Edit profile\":\"\u7F16\u8F91\u4E2A\u4EBA\u8D44\u6599\",\"Embed YouTube Video\":\"\u5D4C\u5165 YouTube \u89C6\u9891\",\"English\":\"\u82F1\u8BED\",\"Error loading content, please refresh the page\":\"\u8F7D\u5165\u5185\u5BB9\u65F6\u51FA\u9519, \u8BF7\u5237\u65B0\u9875\u9762\",\"Error submitting as %(type)s\":\"\u63D0\u4EA4\u4E3A %(type)s \u65F6\u51FA\u9519\",\"Feedback\":\"\u53CD\u9988\",\"Finish\":\"\u5B8C\u6210\",\"Game development\":\"\u6E38\u620F\u5F00\u53D1\",\"Get Firefox help\":\"\u83B7\u53D6 Firefox \u5E2E\u52A9\",\"Get the latest and greatest from MDN delivered straight to your inbox.\":\"\u8BA9 MDN \u5C06\u6700\u65B0\u3001\u6700\u68D2\u7684\u5185\u5BB9\u76F4\u63A5\u6295\u9012\u5230\u60A8\u7684\u90AE\u7BB1\u3002\",\"Get web development help\":\"\u83B7\u53D6 Web \u5F00\u53D1\u5E2E\u52A9\",\"Graphics\":\"\u56FE\u5F62\",\"HTML\":\"HTML\",\"HTTP\":\"HTTP\",\"Hang on! Updating filters\u2026\":\"\u8BF7\u7A0D\u7B49\uFF0C\u6B63\u5728\u66F4\u65B0\u8FC7\u6EE4\u5668\u2026\",\"Help us understand the top 10 needs of Web developers and designers.\":\"\u8BF7\u5E2E\u52A9\u6211\u4EEC\u4E86\u89E3\u7F51\u9875\u5F00\u53D1\u8005\u4E0E\u8BBE\u8BA1\u5E08\u6700\u91CD\u8981\u7684 10 \u4E2A\u9700\u6C42\u3002\",\"Hide Newsletter Sign-up\":\"\u9690\u85CF\u65B0\u95FB\u901A\u8BAF\u8BA2\u9605\",\"History\":\"\u5386\u53F2\u8BB0\u5F55\",\"If you haven\u2019t previously confirmed a subscription to a Mozilla - related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\":\"\u5982\u679C\u60A8\u4EE5\u524D\u6CA1\u6709\u6210\u529F\u8BA2\u9605\u8FC7 Mozilla \u76F8\u5173\u7684\u65B0\u95FB\u901A\u8BAF\uFF0C\u60A8\u53EF\u80FD\u9700\u8981\u68C0\u67E5\u6536\u4EF6\u7BB1\u4E43\u81F3\u5783\u573E\u90AE\u4EF6\u7BB1\u6765\u627E\u5230\u6211\u4EEC\u53D1\u7ED9\u60A8\u7684\u786E\u8BA4\u90AE\u4EF6\u3002\",\"Insert Code Sample Template\":\"\u63D2\u5165\u4EE3\u7801\u793A\u4F8B\u6A21\u677F\",\"Insert Code Sample iFrame\":\"\u63D2\u5165\u4EE3\u7801\u793A\u4F8B iFrame\",\"I\u2019m okay with Mozilla handling my info as explained in this <privacyLink/>.\":\"\u6211\u540C\u610F Mozilla \u6309\u7167<privacyLink/>\u4E2D\u6240\u8FF0\u65B9\u5F0F\u5904\u7406\u6211\u7684\u4FE1\u606F\u3002\",\"JavaScript\":\"JavaScript\",\"Join the MDN community\":\"\u52A0\u5165 MDN \u793E\u533A\",\"Last modified:\":\"\u6700\u540E\u4FEE\u6539\uFF1A\",\"Launch\":\"\u542F\u52A8\",\"Learn Web Development\":\"\u5B66\u4E60 Web \u5F00\u53D1\",\"Learn the best of web development\":\"\u5B66\u4E60 Web \u5F00\u53D1\u7684\u6700\u4F73\u5B9E\u8DF5\",\"Learn web development\":\"\u5B66\u4E60 Web \u5F00\u53D1\",\"Link\":\"\u94FE\u63A5\",\"Locate a YouTube Video\":\"\u5B9A\u4F4D\u4E00\u4E2A YouTube \u89C6\u9891\",\"MDN Redirect\":\"MDN \u91CD\u5B9A\u5411\",\"MDN Survey\":\"MDN \u95EE\u5377\",\"MDN Web Docs\":\"MDN Web \u6587\u6863\",\"MathML\":\"MathML\",\"Mozilla\":\"Mozilla\",\"Never\":\"\u4E0D\u518D\u663E\u793A\",\"New tag...\":\"\u65B0\u5EFA\u6807\u7B7E...\",\"Next\":\"\u4E0B\u4E00\u4E2A\",\"Next step (2 of 2)\":\"\u4E0B\u4E00\u6B65\uFF08\u7B2C 2 \u6B65\uFF0C\u5171 2 \u6B65\uFF09\",\"No\":\"\u5426\",\"No Highlight\":\"\u6CA1\u6709\u9AD8\u4EAE\",\"No attachments available\":\"\u6CA1\u6709\u53EF\u7528\u7684\u9644\u4EF6\",\"No matching documents found.\":\"\u672A\u627E\u5230\u5339\u914D\u7684\u6587\u6863\u3002\",\"No selection\":\"\u6CA1\u6709\u9009\u62E9\",\"Nothing found if nothing searched.\":\"\u5982\u679C\u6CA1\u6709\u641C\u7D22\uFF0C\u4EC0\u4E48\u4E1C\u897F\u4E5F\u627E\u4E0D\u5230\u3002\",\"On this Page\":\"\u5728\u6B64\u9875\u9762\",\"Open\":\"\u6253\u5F00\",\"Open implementation notes\":\"\u6253\u5F00\u5B9E\u73B0\u7B14\u8BB0\",\"Open in %(site)s\":\"\u5728 %(site)s \u4E2D\u6253\u5F00\",\"Open in CodePen\":\"\u5728 CodePen \u4E2D\u6253\u5F00\",\"Open in JSFiddle\":\"\u5728 JSFiddle \u4E2D\u6253\u5F00\",\"Open the survey in a new tab\":\"\u5728\u65B0\u6807\u7B7E\u9875\u6253\u5F00\u95EE\u5377\",\"Optional\":\"\u53EF\u9009\",\"Our goal is to provide accurate, real values for all our compatibility data tables. Notifying MDN of inaccurate data or supplying new data pushes us further towards our goal of providing 100% real values to the developer community.\":\"\u6211\u4EEC\u7684\u76EE\u6807\u662F\u63D0\u4F9B\u771F\u5B9E\u51C6\u786E\u7684\u517C\u5BB9\u6027\u6570\u636E\u8868\u3002\u901A\u77E5 MDN \u6709\u54EA\u4E9B\u4E0D\u6B63\u786E\u7684\u6570\u636E\uFF0C\u6216\u662F\u8865\u5145\u65B0\u6570\u636E\uFF0C\u53EF\u4F7F\u6211\u4EEC\u671D\u7740\u5411\u5F00\u53D1\u8005\u793E\u533A\u63D0\u4F9B 100% \u51C6\u786E\u6570\u636E\u7684\u76EE\u6807\u4E0D\u65AD\u8FC8\u8FDB\u3002\",\"Our team will review your report. Once we verify the information you have supplied we will update this browser compatability table accordingly.\":\"\u6211\u4EEC\u7684\u56E2\u961F\u5C06\u6838\u9A8C\u60A8\u7684\u53CD\u9988\u5185\u5BB9\uFF0C\u786E\u8BA4\u65E0\u8BEF\u540E\u5C31\u4F1A\u66F4\u65B0\u8FD9\u5F20\u6D4F\u89C8\u5668\u517C\u5BB9\u6027\u8868\u683C\u3002\",\"Page has not yet been created.\":\"\u8BE5\u9875\u9762\u5C1A\u672A\u521B\u5EFA\u3002\",\"Paste YouTube Video URL\":\"\u7C98\u8D34 YouTube \u89C6\u9891\u7F51\u5740\",\"Please help translate this article from English\":\"\u8BF7\u5E2E\u52A9\u6211\u4EEC\u7FFB\u8BD1\u8FD9\u7BC7\u6587\u7AE0\uFF01\",\"Please select the browser or browsers which are affected.\":\"\u8BF7\u9009\u62E9\u53D7\u5F71\u54CD\u7684\u6D4F\u89C8\u5668\u3002\",\"Previous\":\"\u4E0A\u4E00\u9875\",\"Previous step\":\"\u4E0A\u4E00\u6B65\",\"Privacy\":\"\u9690\u79C1\u6743\",\"Privacy Policy\":\"\u9690\u79C1\u653F\u7B56\",\"Published version\":\"\u5DF2\u53D1\u5E03\u7248\u672C\",\"Publishing changes\u2026\":\"\u6B63\u5728\u53D1\u5E03\u66F4\u6539\u2026\",\"Publishing failed. Please copy and paste your changes into a safe place and try submitting the form using the \\\"Publish\\\" button.\":\"\u53D1\u5E03\u5931\u8D25\u3002\u8BF7\u5C06\u60A8\u6240\u505A\u7684\u4FEE\u6539\u590D\u5236\u5E76\u7C98\u8D34\u5230\u4E00\u4E2A\u5B89\u5168\u7684\u5730\u65B9\uFF0C\u7136\u540E\u5C1D\u8BD5\u7528\u201C\u53D1\u5E03\u201D\u6309\u94AE\u63D0\u4EA4\u8868\u5355\u3002\",\"Publishing failed. You are not currently signed in. Please use a new tab to sign in and try publishing again.\":\"\u53D1\u5E03\u5931\u8D25\u3002\u60A8\u5F53\u524D\u672A\u767B\u5F55\u3002\u8BF7\u4F7F\u7528\u65B0\u7684\u6807\u7B7E\u9875\u767B\u5F55\u5E76\u518D\u6B21\u5C1D\u8BD5\u53D1\u5E03\u3002\",\"References\":\"\u53C2\u8003\u6587\u732E\",\"References & Guides\":\"\u53C2\u8003\u4E0E\u6307\u5357\",\"Related Topics\":\"\u76F8\u5173\u4E3B\u9898\",\"Report a content problem\":\"\u62A5\u544A\u5185\u5BB9\u95EE\u9898\",\"Report an issue\":\"\u62A5\u544A\u95EE\u9898\",\"Report sent\":\"\u53CD\u9988\u5DF2\u53D1\u9001\",\"Restore draft.\":\"\u6062\u590D\u8349\u7A3F\u5185\u5BB9\u3002\",\"Result\":\"\u7ED3\u679C\",\"Return to compatibility table.\":\"\u8FD4\u56DE\u517C\u5BB9\u6027\u8868\u683C\u3002\",\"Revert\":\"\u8FD8\u539F\",\"Revision history.\":\"\u7248\u672C\u5386\u53F2\u3002\",\"Sample CSS Content\":\"\u793A\u4F8B\u7684 CSS \u5185\u5BB9\",\"Sample Finder\":\"\u793A\u4F8B\u67E5\u627E\u5668\",\"Sample HTML Content\":\"\u793A\u4F8B\u7684 HTML \u5185\u5BB9\",\"Sample JavaScript Content\":\"\u793A\u4F8B\u7684 JavaScript \u5185\u5BB9\",\"Search MDN\":\"\u641C\u7D22 MDN\",\"Search Stack Overflow\":\"\u641C\u7D22 Stack Overflow\",\"Section\":\"\u8282\",\"Sections in Document\":\"\u6587\u6863\u4E2D\u7684\u6BB5\u843D\",\"Select a section\":\"\u9009\u62E9\u4E00\u4E2A\u7AE0\u8282\",\"Select an attachment\":\"\u9009\u62E9\u4E00\u4E2A\u9644\u4EF6\",\"Select language\":\"\u9009\u62E9\u8BED\u8A00\",\"Selected: \":\"\u5DF2\u9009\u62E9\uFF1A\",\"Send Feedback\":\"\u53D1\u9001\u53CD\u9988\",\"Send report\":\"\u53D1\u9001\u53CD\u9988\",\"Showing all \":\"\u663E\u793A\u6240\u6709\u7ED3\u679C \",\"Showing results %(start)s to %(end)s.\":\"\u5DF2\u663E\u793A\u7ED3\u679C %(start)s \u81F3 %(end)s\u3002\",\"Sign in\":\"\u767B\u5F55\",\"Sign out\":\"\u9000\u51FA\",\"Sign up now\":\"\u7ACB\u5373\u767B\u5F55\",\"Skip to main content\":\"\u8DF3\u8F6C\u5230\u4E3B\u8981\u5185\u5BB9\",\"Skip to search\":\"\u8DF3\u8F6C\u5230\u641C\u7D22\",\"Sorry, we can\u2019t seem to reach the server. We are working to fix the problem. Please try again later.\":\"\u62B1\u6B49\uFF0C\u6211\u4EEC\u4F3C\u4E4E\u65E0\u6CD5\u8BBF\u95EE\u670D\u52A1\u5668\u3002\u6211\u4EEC\u6B63\u5728\u52AA\u529B\u89E3\u51B3\u95EE\u9898\uFF0C\u8BF7\u7A0D\u540E\u518D\u8BD5\u3002\",\"Step %(current)s of %(total)s\":\"\u7B2C %(current)s \u6B65\uFF0C\u5171 %(total)s \u6B65\",\"Submitted as %(submissionType)s\":\"\u5DF2\u63D0\u4EA4\u4E3A %(submissionType)s\",\"Submitting...\":\"\u6B63\u5728\u63D0\u4EA4...\",\"Syntax Highlighter\":\"\u8BED\u6CD5\u9AD8\u4EAE\u5668\",\"Take the survey\":\"\u586B\u5199\u95EE\u5377\",\"Technologies\":\"\u6280\u672F\",\"Technologies Overview\":\"\u6280\u672F\u6982\u8FF0\",\"Tell us what\u2019s wrong with this table\":\"\u544A\u8BC9\u6211\u4EEC\u8FD9\u5F20\u8868\u683C\u6709\u4EC0\u4E48\u95EE\u9898\",\"Terms\":\"\u4F7F\u7528\u6761\u6B3E\",\"Thank you for helping.\":\"\u611F\u8C22\u60A8\u7684\u5E2E\u52A9\uFF01\",\"Thank you!\":\"\u5341\u5206\u611F\u8C22\uFF01\",\"Thanks! Please check your inbox to confirm your subscription.\":\"\u8C22\u8C22\uFF01\u8BF7\u68C0\u67E5\u60A8\u7684\u6536\u4EF6\u7BB1\u4EE5\u786E\u8BA4\u60A8\u7684\u8BA2\u9605\u3002\",\"The URL you've entered doesn't appear to be valid\":\"\u60A8\u8F93\u5165\u7684\u7F51\u5740\u770B\u4E0A\u53BB\u65E0\u6548\",\"The newsletter is offered in English only at the moment.\":\"\u76EE\u524D\u4EC5\u63D0\u4F9B\u82F1\u6587\u7248\u65B0\u95FB\u901A\u8BAF\u3002\",\"This translation is in progress.\":\"\u7FFB\u8BD1\u6B63\u5728\u8FDB\u884C\u4E2D\u3002\",\"This translation is incomplete.\":\"\u7FFB\u8BD1\u4E0D\u5B8C\u6574\u3002\",\"Tutorials\":\"\u6559\u7A0B\",\"URL\":\"URL\",\"Updated filters.\":\"\u8FC7\u6EE4\u5668\u5DF2\u66F4\u65B0\u3002\",\"View Page\":\"\u67E5\u770B\u9875\u9762\",\"View draft.\":\"\u67E5\u770B\u8349\u7A3F\u3002\",\"View profile\":\"\u67E5\u770B\u4E2A\u4EBA\u8D44\u6599\",\"Viewing old draft. This draft cannot be published.\":\"\u67E5\u770B\u65E7\u7684\u8349\u7A3F\u3002\u6B64\u8349\u7A3F\u4E0D\u80FD\u53D1\u5E03\u3002\",\"Web Technologies\":\"Web \u6280\u672F\",\"What are we missing?\":\"\u8FD8\u7F3A\u5C11\u4EC0\u4E48\u4E1C\u897F\uFF1F\",\"What happens next?\":\"\u63A5\u4E0B\u6765\u4F1A\u53D1\u751F\u4EC0\u4E48\uFF1F\",\"What should the sample title be?\":\"\u793A\u4F8B\u6807\u9898\u5E94\u8BE5\u662F\uFF1F\",\"Which browsers are affected?\":\"\u5F71\u54CD\u54EA\u4E9B\u6D4F\u89C8\u5668\uFF1F\",\"Which table row is affected?\":\"\u5F71\u54CD\u8868\u683C\u54EA\u4E00\u884C\uFF1F\",\"Would you answer 4 questions for us?\":\"\u613F\u610F\u56DE\u7B54\u6211\u4EEC\u7684 4 \u4E2A\u95EE\u5377\u95EE\u9898\u5417\uFF1F\",\"Would you answer 4 questions for us? <a %(url)s>Open the survey in a new tab</a> and fill it out when you are done on the site. Thanks!\":\"\u60A8\u80FD\u53C2\u4E0E\u6211\u4EEC\u7684\u8C03\u67E5\u5417\uFF1F\u53EA\u662F4\u4E2A\u95EE\u9898\u3002\u5728\u60A8\u5B8C\u6210\u5728\u672C\u7AD9\u4E0A\u9700\u8981\u505A\u7684\u4E8B\u60C5\u540E\uFF0C<a %(url)s>\u6253\u5F00\u8C03\u67E5</a>\u6765\u586B\u5199\u95EE\u5377\u3002\u8C22\u8C22\uFF01\",\"Yes\":\"\u662F\",\"You are now viewing this site in %(localeName)s. Do you always want to view this site in %(localeName)s?\":\"\u60A8\u76EE\u524D\u67E5\u9605\u7684\u662F\u672C\u7F51\u7AD9\u7684 %(localeName)s \u7248\u3002\u8981\u5C06 %(localeName)s \u8BBE\u4E3A\u9884\u8BBE\u7248\u672C\u5417\uFF1F\",\"You can join the GitHub repository to see updates and commits for this table data:\":\"\u60A8\u53EF\u4EE5\u52A0\u5165 GitHub \u4ED3\u5E93\u4EE5\u67E5\u770B\u6B64\u8868\u683C\u6570\u636E\u7684\u66F4\u65B0\u548C\u63D0\u4EA4\uFF1A\",\"You have a draft from: %(time)s.\":\"\u60A8\u6709\u4E00\u4E2A\u8349\u7A3F\uFF0C\u4FDD\u5B58\u4E8E\uFF1A%(time)s\u3002\",\"You must input a valid YouTube video URL.\":\"\u60A8\u5FC5\u987B\u8F93\u5165\u4E00\u4E2A\u6709\u6548\u7684 YouTube \u89C6\u9891\u7F51\u5740\u3002\",\"Your browser does not support MathML. A CSS fallback has been used instead.\":\"\u60A8\u7684\u6D4F\u89C8\u5668\u4E0D\u652F\u6301 MathML\u3002\u5DF2\u4F7F\u7528\u540E\u5907\u7684 CSS \u4EE3\u66FF\u3002\",\"an unknown date\":\"\u672A\u77E5\u65E5\u671F\",\"and fill it out when you are done on the site. Thanks!\":\"\u5F85\u5B8C\u6210\u672C\u7F51\u7AD9\u4E8B\u9879\u4E4B\u540E\u518D\u586B\u5199\u5373\u53EF\u3002\u611F\u8C22\uFF01\",\"by MDN contributors\":\"\u7531 Mozilla \u8D21\u732E\u8005\u7F16\u8F91\",\"https://github.com/mdn/browser-compat-data \":\"https://github.com/mdn/browser-compat-data \",\"you@example.com\":\"you@example.com\",\"%(count)s document found for \\\"%(query)s\\\" in %(locale)s.\":[\"\u5728 %(locale)s \u7248\u672C\u4E2D\u627E\u5230 %(count)s \u7BC7\u5173\u4E8E\u201C%(query)s\u201D\u7684\u6587\u6863\u3002\"]},\"pluralExpression\":\"0\",\"url\":\"/zh-CN/docs/Web/JavaScript/Index\",\"documentData\":{\"locale\":\"zh-CN\",\"slug\":\"Web/JavaScript/Index\",\"enSlug\":\"Web/JavaScript/Index\",\"id\":147642,\"title\":\"\u7D22\u5F15\",\"summary\":\"\u8BE5\u9875\u9762\u5217\u51FA\u4E86 MDN JavaScript \u6240\u6709\u7684\u9875\u9762\u53CA\u76F8\u5173\u6982\u89C8\u548C\u6807\u7B7E\u3002\",\"language\":\"\u4E2D\u6587 (\u7B80\u4F53)\",\"hrefLang\":\"zh\",\"absoluteURL\":\"/zh-CN/docs/Web/JavaScript/Index\",\"wikiURL\":\"https://wiki.developer.mozilla.org/zh-CN/docs/Web/JavaScript/Index\",\"translateURL\":null,\"translationStatus\":null,\"bodyHTML\":\"\\n\\n<h2 id=\\\"MDN_JavaScript_pages\\\">MDN JavaScript pages</h2>\\n\\n<p>\u8BE5\u9875\u9762\u5217\u51FA\u4E86 MDN JavaScript \u6240\u6709\u7684\u9875\u9762\u53CA\u76F8\u5173\u6982\u89C8\u548C\u6807\u7B7E\u3002</p>\\n\\n<p><strong>Found 818 pages:</strong></p>\\n<table class=\\\"fullwidth-table standard-table\\\">\\n<thead>\\n    <tr><th>


  
    
  

  <!-- site js -->
  <script defer type="text/javascript" src="/static/build/js/react-main.48270c4e4f6e.js" charset="utf-8"></script>
  
  
    <script defer type="text/javascript" src="/static/build/js/react-bcd-signal.5243efe96f7c.js" charset="utf-8"></script>
  
</body>
</html>